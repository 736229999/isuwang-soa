package com.isuwang.dapeng.code.generator

import java.util

import com.isuwang.dapeng.core.metadata.DataType.KIND
import com.isuwang.dapeng.core.metadata._

import scala.xml.Elem

/**
  * Created by lihuimin on 2017/10/24.
  */
class JavaSerializerGenerator extends CodeGenerator{

  override def generate(services: util.List[Service], outDir: String, generateAll:Boolean , structs: util.List[Struct], enums:util.List[TEnum]): Unit = {}

  override def generate(services: util.List[Service], outDir: String): Unit = {

  }

  def toStructSerializerTemplate(serviceName:String, struct:Struct ): Elem ={
    return {
      <div> package com.isuwang.soa.serializer;

        import com.isuwang.dapeng.core.*;
        import com.isuwang.org.apache.thrift.*;
        import com.isuwang.org.apache.thrift.protocol.*;

        import com.isuwang.soa.{serviceName}Codec;

        /**
        * Autogenerated by Dapeng-Code-Generator (1.2.1)
        *
        * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
        *  @generated
        **/
        {<div>public class {struct.name}Serializer implements TCommonBeanSerializer{lt}{struct.getNamespace() + "." + struct.name}{gt}<block>
          {getReadMethod(struct,"")}{getWriteMethod(struct,"")}{getValidateMethod(struct,"")}
          @Override
          public String toString({struct.getNamespace() + "." + struct.name} bean)
          <block>return bean == null ? "null" : bean.toString();</block>
        </block>
      </div>}

      </div>
    }

   }

  def toArgsMethodSerializerTemplate(serviceName:String,method:Method): Elem ={
    return {
      <div> package com.isuwang.soa.serializer;

        import com.isuwang.dapeng.core.*;
        import com.isuwang.org.apache.thrift.*;
        import com.isuwang.org.apache.thrift.protocol.*;

        import com.isuwang.soa.{serviceName}Codec;

        /**
        * Autogenerated by Dapeng-Code-Generator (1.2.1)
        *
        * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
        *  @generated
        **/

            <div>public class {method.name.charAt(0).toUpper + method.name.substring(1)}_argsSerializer implements TCommonBeanSerializer{lt}{serviceName}Codec.{method.name}_args{gt}<block>
            {getReadMethod(method.getRequest,serviceName+"Codec.")}{getWriteMethod(method.getRequest,serviceName+"Codec.")}{getValidateMethod(method.getRequest,serviceName+"Codec.")}

            @Override
            public String toString({serviceName}Codec.{method.name}_args bean) <block> return bean == null ? "null" : bean.toString(); </block>

            </block>
            </div>

      </div>
    }

  }

  def toResultMethodSerializerTemplate(serviceName:String,method:Method): Elem ={
    return {
      <div> package com.isuwang.soa.serializer;

        import com.isuwang.dapeng.core.*;
        import com.isuwang.org.apache.thrift.*;
        import com.isuwang.org.apache.thrift.protocol.*;

        import com.isuwang.soa.{serviceName}Codec;

        /**
        * Autogenerated by Dapeng-Code-Generator (1.2.1)
        *
        * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
        *  @generated
        **/

        public class {method.name.charAt(0).toUpper + method.name.substring(1)}_resultSerializer implements TCommonBeanSerializer{lt}{serviceName}Codec.{method.name}_result{gt}<block>
        @Override
        public {serviceName}Codec.{method.response.name} read(TProtocol iprot) throws TException<block>

          {serviceName}Codec.{method.response.name} bean = new {serviceName}Codec.{method.response.name}();
          com.isuwang.org.apache.thrift.protocol.TField schemeField;
          iprot.readStructBegin();

          while(true)<block>
            schemeField = iprot.readFieldBegin();
            if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP)<block> break;</block>

            switch(schemeField.id)<block>
              case 0:  //SUCCESS
              if(schemeField.type == {toThriftDateType(method.response.fields.get(0).dataType)})<block>
                {getJavaReadAndSetElement(method.response.fields.get(0))}
              </block>else<block>
                com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              </block>
              break;
              /*
              case 1: //ERROR
              bean.setSoaException(new SoaException());
              new SoaExceptionSerializer().read(bean.getSoaException(),iprot);
              break A;
              */
              default:
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            </block>
            iprot.readFieldEnd();
          </block>
          iprot.readStructEnd();

          validate(bean);
          return bean;
        </block>
        {getWriteMethod(method.getResponse,serviceName+"Codec.")}
        {getValidateMethod(method.getResponse,serviceName+"Codec.")}

        @Override
        public String toString( {serviceName}Codec.{method.name}_result bean) <block> return bean == null ? "null" : bean.toString(); </block>
      </block>

      </div>
    }

  }

  def toMetadataArgsSerializerTemplate(serviceName:String): Elem ={
    return {
      <div> package com.isuwang.soa.serializer;

        import com.isuwang.dapeng.core.*;
        import com.isuwang.org.apache.thrift.*;
        import com.isuwang.org.apache.thrift.protocol.*;

        import com.isuwang.soa.{serviceName}Codec;

        /**
        * Autogenerated by Dapeng-Code-Generator (1.2.1)
        *
        * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
        *  @generated
        **/

        public class GetServiceMetadata_argsSerializer implements TCommonBeanSerializer{lt}GetServiceMetadata_args{gt} <block>

        @Override
        public GetServiceMetadata_args read(TProtocol iprot) throws TException <block>

          GetServiceMetadata_args bean =new GetServiceMetadata_args();
          com.isuwang.org.apache.thrift.protocol.TField schemeField;
          iprot.readStructBegin();

          while (true) <block>
            schemeField = iprot.readFieldBegin();
            if (schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP) <block>
              break;
            </block>
            switch (schemeField.id) <block>
              default:
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);

            </block>
            iprot.readFieldEnd();
          </block>
          iprot.readStructEnd();

          validate(bean);
          return bean;
        </block>


        @Override
        public void write(GetServiceMetadata_args bean, TProtocol oprot) throws TException <block>

          validate(bean);
          oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("GetServiceMetadata_args"));
          oprot.writeFieldStop();
          oprot.writeStructEnd();
        </block>

        public void validate(GetServiceMetadata_args bean) throws TException <block></block>

        @Override
        public String toString(GetServiceMetadata_args bean) <block>
          return bean == null ? "null" : bean.toString();
        </block>

      </block>

      </div>
    }

  }

  def toMetadataResultSerializerTemplate(service:Service): Elem ={
    return {
      <div> package com.isuwang.soa.serializer;

        import com.isuwang.dapeng.core.*;
        import com.isuwang.org.apache.thrift.*;
        import com.isuwang.org.apache.thrift.protocol.*;

        import com.isuwang.soa.{service.name}Codec;

        /**
        * Autogenerated by Dapeng-Code-Generator (1.2.1)
        *
        * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
        *  @generated
        **/
        public class GetServiceMetadata_resultSerializer implements TCommonBeanSerializer{lt}GetServiceMetadata_result{gt} <block>
        @Override
        public GetServiceMetadata_result read(TProtocol iprot) throws TException <block>

          GetServiceMetadata_result bean = new GetServiceMetadata_result();
          com.isuwang.org.apache.thrift.protocol.TField schemeField;
          iprot.readStructBegin();

          while (true) <block>
            schemeField = iprot.readFieldBegin();
            if (schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP) <block>
              break;
            </block>

            switch (schemeField.id) <block>
              case 0:  //SUCCESS
              if (schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRING) <block>
                bean.setSuccess(iprot.readString());
              </block> else <block>
                com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              </block>
              break;
              default:
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            </block>
            iprot.readFieldEnd();
          </block>
          iprot.readStructEnd();

          validate(bean);
          return bean;
        </block>

        @Override
        public void write(GetServiceMetadata_result bean, TProtocol oprot) throws TException <block>

          validate(bean);
          oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("GetServiceMetadata_result"));

          oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("success", com.isuwang.org.apache.thrift.protocol.TType.STRING, (short) 0));
          oprot.writeString(bean.getSuccess());
          oprot.writeFieldEnd();

          oprot.writeFieldStop();
          oprot.writeStructEnd();
        </block>

        public void validate(GetServiceMetadata_result bean) throws TException <block>

          if (bean.getSuccess() == null)
          throw new SoaException(SoaBaseCode.NotNull, "success字段不允许为空");
        </block>

        @Override
        public String toString(GetServiceMetadata_result bean) <block>
          return bean == null ? "null" : bean.toString();
        </block>
      </block>


      </div>
    }

  }

  def toMetadataArgsTemplate(): Elem = return {
    <div> package com.isuwang.soa.serializer;


      /**
      * Autogenerated by Dapeng-Code-Generator (1.2.1)
      *
      * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
      *  @generated
      **/
      public class GetServiceMetadata_args  <block>
      @Override
      public String toString() <block>
        return "{}";

      </block>
    </block>
    </div>
  }
  def toMetadataResultTemplate(): Elem = return {
    <div> package com.isuwang.soa.serializer;


      /**
      * Autogenerated by Dapeng-Code-Generator (1.2.1)
      *
      * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
      *  @generated
      **/
      public class GetServiceMetadata_result  <block>
      private String success;
      public String getSuccess() <block>
      return success;
        </block>
      public void setSuccess(String success)  <block>
      this.success = success;
        </block>
      @Override
      public String toString() <block>
        StringBuilder stringBuilder = new StringBuilder("<block>");
          stringBuilder.append("\"").append("success").append("\":\"").append(this.success).append("\",");
          stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
          stringBuilder.append("</block>");
        return stringBuilder.toString();
      </block>
    </block>
    </div>
  }

  def getReadMethod(struct: Struct,codecName:String): Elem = {
    <div>
      @Override
      public {codecName}{toStructName(struct)} read(TProtocol iprot) throws TException<block>

      {codecName}{toStructName(struct)} bean = new {codecName}{toStructName(struct)}();
      com.isuwang.org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();

      while(true)<block>
        schemeField = iprot.readFieldBegin();
        if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP)<block> break;</block>

        switch(schemeField.id)<block>
          {
          toFieldArrayBuffer(struct.getFields).map{(field : Field) =>{
            <div>
              case {field.tag}:
              if(schemeField.type == {toThriftDateType(field.dataType)})<block>
              {getJavaReadAndSetElement(field)}
            </block>else<block>
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            </block>
              break;
            </div>
          }}
          }
          <div>
            default:
            com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          </div>
        </block>
        iprot.readFieldEnd();
      </block>
      iprot.readStructEnd();

      validate(bean);
      return bean;
    </block>
    </div>
  }

  def toStructName(struct: Struct): String = {
    if (struct.getNamespace == null) {
      return struct.getName()
    } else {
      return struct.getNamespace + "." + struct.getName();
    }
  }

  def toThriftDateType(dataType:DataType): Elem = {
    dataType.kind match {
      case KIND.VOID => <div>com.isuwang.org.apache.thrift.protocol.TType.VOID</div>
      case KIND.BOOLEAN => <div>com.isuwang.org.apache.thrift.protocol.TType.BOOL</div>
      case KIND.BYTE => <div>com.isuwang.org.apache.thrift.protocol.TType.BYTE</div>
      case KIND.SHORT => <div>com.isuwang.org.apache.thrift.protocol.TType.I16</div>
      case KIND.INTEGER => <div>com.isuwang.org.apache.thrift.protocol.TType.I32</div>
      case KIND.LONG => <div>com.isuwang.org.apache.thrift.protocol.TType.I64</div>
      case KIND.DOUBLE => <div>com.isuwang.org.apache.thrift.protocol.TType.DOUBLE</div>
      case KIND.STRING => <div>com.isuwang.org.apache.thrift.protocol.TType.STRING</div>
      case KIND.MAP => <div>com.isuwang.org.apache.thrift.protocol.TType.MAP</div>
      case KIND.LIST => <div>com.isuwang.org.apache.thrift.protocol.TType.LIST</div>
      case KIND.SET => <div>com.isuwang.org.apache.thrift.protocol.TType.SET</div>
      case KIND.ENUM => <div>com.isuwang.org.apache.thrift.protocol.TType.I32</div>
      case KIND.STRUCT => <div>com.isuwang.org.apache.thrift.protocol.TType.STRUCT</div>
      case KIND.DATE => <div>com.isuwang.org.apache.thrift.protocol.TType.I64</div>
      case KIND.BIGDECIMAL => <div>com.isuwang.org.apache.thrift.protocol.TType.STRING</div>
      case KIND.BINARY => <div>com.isuwang.org.apache.thrift.protocol.TType.STRING</div>
      case _ => <div></div>
    }
  }

  def getJavaReadAndSetElement(field: Field):Elem = {
    <div>{getJavaReadElement(field.getDataType, 0)}
      {getJavaSetElement(field)}</div>
  }

  def getJavaReadElement(dataType: DataType, index: Int):Elem = {
    dataType.kind match {
      case KIND.BOOLEAN => <div>boolean elem{index} = iprot.readBool();</div>
      case KIND.STRING => <div>String elem{index} = iprot.readString();</div>
      case KIND.BYTE => <div>byte elem{index} = iprot.readByte();</div>
      case KIND.SHORT =>  <div>short elem{index} = iprot.readI16();</div>
      case KIND.INTEGER => <div> int elem{index} = iprot.readI32();</div>
      case KIND.LONG => <div>long elem{index} = iprot.readI64();</div>
      case KIND.DOUBLE => <div> double elem{index} = iprot.readDouble();</div>
      case KIND.BINARY => <div>java.nio.ByteBuffer elem{index} = iprot.readBinary();</div>
      case KIND.BIGDECIMAL => <div>java.math.BigDecimal elem{index} = new java.math.BigDecimal(iprot.readString());</div>
      case KIND.DATE => <div>Long time = iprot.readI64(); java.util.Date elem{index} = new java.util.Date(time);</div>
      case KIND.STRUCT => <div>{dataType.qualifiedName} elem{index} = new {dataType.qualifiedName}();
        elem{index}=new {dataType.qualifiedName.substring(dataType.qualifiedName.lastIndexOf(".")+1)}Serializer().read(iprot);</div>
      case KIND.ENUM => <div>{dataType.qualifiedName} elem{index} = {dataType.qualifiedName}.findByValue(iprot.readI32());</div>
      case KIND.MAP => <div>com.isuwang.org.apache.thrift.protocol.TMap _map{index} = iprot.readMapBegin();
        java.util.Map{lt}{toJavaDataType(dataType.keyType)},{toJavaDataType(dataType.valueType)}{gt} elem{index} = new java.util.HashMap{lt}{gt}(_map{index}.size);
        for(int _i{index} = 0; _i{index} {lt} _map{index}.size; ++ _i{index})<block>
          {getJavaReadElement(dataType.keyType, index+1)}
          {getJavaReadElement(dataType.valueType, index+2)}
          elem{index}.put(elem{index+1}, elem{index+2});
        </block>
        iprot.readMapEnd();</div>
      case KIND.LIST => <div> com.isuwang.org.apache.thrift.protocol.TList _list{index} = iprot.readListBegin();
        java.util.List{lt}{toJavaDataType(dataType.valueType)}{gt} elem{index} = new java.util.ArrayList{lt}{gt}(_list{index}.size);
        for(int _i{index} = 0; _i{index} {lt} _list{index}.size; ++ _i{index})<block>
          {getJavaReadElement(dataType.valueType, index+1)}
          elem{index}.add(elem{index+1});
        </block>
        iprot.readListEnd();</div>
      case KIND.SET => <div>com.isuwang.org.apache.thrift.protocol.TSet _set{index} = iprot.readSetBegin();
        java.util.Set{lt}{toJavaDataType(dataType.valueType)}{gt} elem{index} = new java.util.HashSet{lt}{gt}(_set{index}.size);
        for(int _i{index} = 0; _i{index} {lt} _set{index}.size; ++ _i{index})<block>
          {getJavaReadElement(dataType.valueType, index+1)}
          elem{index}.add(elem{index+1});
        </block>
        iprot.readSetEnd();
      </div>
      case _ => <div></div>
    }
  }
  def getJavaSetElement(field: Field): Elem = {
    field.dataType.kind match {
      case KIND.VOID => <div>com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);</div>
      case _ => <div> bean.set{field.name.charAt(0).toUpper + field.name.substring(1)}({if(field.optional) <div>Optional.of(</div>}elem0{if(field.optional) <div>)</div>});</div>
    }

  }

  def getWriteMethod(struct: Struct,codecName:String): Elem = {

    var index = 0
    <div>
      @Override
      public void write({codecName}{toStructName(struct)} bean, TProtocol oprot) throws TException<block>

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("{struct.name}"));

      {toFieldArrayBuffer(struct.fields).map{(field : Field) =>{
        if(field.dataType.getKind() == DataType.KIND.VOID) {
        } else {
          if(field.isOptional){
            <div>if(bean.get{field.name.charAt(0).toUpper + field.name.substring(1)}().isPresent())<block>
              oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("{field.name}", {toThriftDateType(field.dataType)}, (short) {field.tag}));
              {toJavaDataType(field.dataType)} elem{index} = bean.get{field.name.charAt(0).toUpper + field.name.substring(1)}().get();
              {toJavaWriteElement(field.dataType, index)}
              {index = index + 1}
            </block>
            </div>
          }else{<div>
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("{field.name}", {toThriftDateType(field.dataType)}, (short) {field.tag}));
            {toJavaDataType(field.dataType)} elem{index} = bean.get{field.name.charAt(0).toUpper + field.name.substring(1)}();
            {toJavaWriteElement(field.dataType, index)}
            {index = index + 1}
            oprot.writeFieldEnd();
          </div>
          }
        }
      }
      }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    </block>
    </div>
  }

  def getValidateMethod(struct: Struct,codecName:String) : Elem = {
    <div>
      public void validate({codecName}{toStructName(struct)} bean) throws TException<block>
      {
      toFieldArrayBuffer(struct.fields).map{(field : Field) =>{
        <div>{
          if(!field.isOptional && field.dataType.kind != DataType.KIND.VOID && checkIfNeedValidate(field.isOptional, field.dataType)){
            <div>
              if(bean.get{field.name.charAt(0).toUpper + field.name.substring(1)}() == null)
              throw new SoaException(SoaBaseCode.NotNull, "{field.name}字段不允许为空");
            </div>}}</div>
          <div>{
            if(!field.isOptional && field.dataType.kind == KIND.STRUCT && field.dataType.kind != DataType.KIND.VOID){
              <div>
                if(bean.get{field.name.charAt(0).toUpper + field.name.substring(1)}() != null)
                new {field.dataType.qualifiedName.substring(field.dataType.qualifiedName.lastIndexOf(".")+1)}Serializer().validate(bean.get{field.name.charAt(0).toUpper + field.name.substring(1)}());
              </div>}}</div>
          <div>{
            if(field.isOptional && field.dataType.kind == KIND.STRUCT && field.dataType.kind != DataType.KIND.VOID){
              <div>
                if(bean.get{field.name.charAt(0).toUpper + field.name.substring(1)}().isPresent())
                new {field.dataType.qualifiedName.substring(field.dataType.qualifiedName.lastIndexOf(".")+1)}Serializer().validate(bean.get{field.name.charAt(0).toUpper + field.name.substring(1)}().get());
              </div>}}</div>
      }
      }
      }
    </block>
    </div>
  }

  def toJavaDataType(dataType:DataType): Elem = {
    dataType.kind match {
      case KIND.VOID => <div>void</div>
      case KIND.BOOLEAN => <div>Boolean</div>
      case KIND.BYTE => <div>Byte</div>
      case KIND.SHORT => <div>Short</div>
      case KIND.INTEGER => <div>Integer</div>
      case KIND.LONG => <div>Long</div>
      case KIND.DOUBLE => <div>Double</div>
      case KIND.STRING => <div>String</div>
      case KIND.BINARY => <div>java.nio.ByteBuffer</div>
      case KIND.DATE => <div>java.util.Date</div>
      case KIND.BIGDECIMAL => <div>java.math.BigDecimal</div>
      case KIND.MAP =>
        return {<div>java.util.Map{lt}{toJavaDataType(dataType.getKeyType())}, {toJavaDataType(dataType.getValueType())}{gt}</div>}
      case KIND.LIST =>
        return {<div>java.util.List{lt}{toJavaDataType(dataType.getValueType())}{gt}</div>}
      case KIND.SET =>
        return {<div>java.util.Set{lt}{toJavaDataType(dataType.getValueType())}{gt}</div>}
      case KIND.ENUM =>
        val ref = dataType.getQualifiedName();
        return {<div>{ref}</div>}
      case KIND.STRUCT =>
        val ref = dataType.getQualifiedName();
        return {<div>{ref}</div>}
    }
  }

  def toJavaWriteElement(dataType: DataType, index: Int): Elem = {

    dataType.kind match {
      case KIND.BOOLEAN => <div>oprot.writeBool(elem{index});</div>
      case KIND.BYTE => <div>oprot.writeByte(elem{index});</div>
      case KIND.SHORT => <div>oprot.writeI16(elem{index});</div>
      case KIND.INTEGER => <div>oprot.writeI32(elem{index});</div>
      case KIND.LONG => <div>oprot.writeI64(elem{index});</div>
      case KIND.DOUBLE => <div>oprot.writeDouble(elem{index});</div>
      case KIND.STRING => <div>oprot.writeString(elem{index});</div>
      case KIND.ENUM => <div>oprot.writeI32(elem{index}.getValue());</div>
      case KIND.BINARY => <div>oprot.writeBinary(elem{index});</div>
      case KIND.DATE => <div>oprot.writeI64(elem{index}.getTime());</div>
      case KIND.BIGDECIMAL => <div>oprot.writeString(elem{index}.toString());</div>
      case KIND.STRUCT => <div> new {dataType.qualifiedName.substring(dataType.qualifiedName.lastIndexOf(".")+1)}Serializer().write(elem{index}, oprot);</div>
      case KIND.LIST =>
        <div>
          oprot.writeListBegin(new com.isuwang.org.apache.thrift.protocol.TList({toThriftDateType(dataType.valueType)}, elem{index}.size()));
          for({toJavaDataType(dataType.valueType)} elem{index+1} : elem{index})<block>
          {toJavaWriteElement(dataType.valueType, index+1)}
        </block>
          oprot.writeListEnd();
        </div>
      case KIND.MAP =>
        <div>
          oprot.writeMapBegin(new com.isuwang.org.apache.thrift.protocol.TMap({toThriftDateType(dataType.keyType)}, {toThriftDateType(dataType.valueType)}, elem{index}.size()));
          for(java.util.Map.Entry{lt}{toJavaDataType(dataType.keyType)}, {toJavaDataType(dataType.valueType)}{gt} _it{index} : elem{index}.entrySet())<block>

          {toJavaDataType(dataType.keyType)} elem{index+1} = _it{index}.getKey();
          {toJavaDataType(dataType.valueType)} elem{index+2} = _it{index}.getValue();
          {toJavaWriteElement(dataType.keyType, index+1)}
          {toJavaWriteElement(dataType.valueType, index+2)}
        </block>
          oprot.writeMapEnd();
        </div>

      case KIND.SET =>
        return{
          <div>
            oprot.writeSetBegin(new com.isuwang.org.apache.thrift.protocol.TSet({toThriftDateType(dataType.valueType)}, elem{index}.size()));
            for({toJavaDataType(dataType.valueType)} elem{index+1} : elem{index})<block>
            {toJavaWriteElement(dataType.valueType, index+1)}
          </block>
            oprot.writeSetEnd();
          </div>}
      case KIND.VOID => <div></div>
      case _ => <div></div>
    }
  }

  def checkIfNeedValidate(optional: Boolean, dataType: DataType): Boolean = {

    if(optional)
      false
    else
      dataType.kind match {

        case DataType.KIND.BOOLEAN => false
        case KIND.SHORT => false
        case KIND.INTEGER => false
        case KIND.LONG => false
        case KIND.DOUBLE => false
        case _ => true
      }

  }


}
