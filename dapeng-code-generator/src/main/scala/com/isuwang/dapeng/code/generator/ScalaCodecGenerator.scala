package com.isuwang.dapeng.code.generator

import java.util

import com.isuwang.dapeng.core.metadata.DataType.KIND
import com.isuwang.dapeng.core.metadata._

import scala.xml.Elem

/**
 * JAVA生成器
 *
 * @author tangliu
 * @date 15/9/8
 */
class ScalaCodecGenerator extends CodeGenerator {

  override def generate(services: util.List[Service], outDir: String, generateAll:Boolean , structs: util.List[Struct], enums:util.List[TEnum]): Unit = {}

  override def generate(services: util.List[Service], outDir: String): Unit = {

  }

  val keywords = Set("type") // TODO is there any other keyword need to be escape
  def nameAsId(name: String) = if(keywords contains name) s"`$name`" else name

  def toCodecTemplate(service:Service, namespaces:util.Set[String]): Elem = {
    //val structNameCache = new util.ArrayList[String]()

    return {
      <div>package {service.namespace.substring(0, service.namespace.lastIndexOf("."))}

        import com.isuwang.dapeng.core._
        import com.isuwang.org.apache.thrift._
        import com.isuwang.org.apache.thrift.protocol._
        import com.isuwang.soa.scala.serializer._

        /**
        * Autogenerated by Dapeng-Code-Generator (1.2.1)
        *
        * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
        *  @generated
        **/
        object {service.name}Codec <block>

        {toMethodArrayBuffer(service.methods).map{(method: Method)=> {

          <div>
            case class {method.name}_args({toFieldArrayBuffer(method.request.getFields).map{(field: Field)=>{<div>{nameAsId(field.name)}:{toScalaDataType(field.dataType)}{if(field != method.request.getFields.get(method.request.getFields.size-1)) <span>,</span>}</div>}}})

            case class {method.name}_result({toFieldArrayBuffer(method.response.getFields).map{(field: Field)=>{<div>{caseClassFiledCombile(field)}{if(field != method.response.getFields.get(method.response.getFields.size-1)) <span>,</span>}</div>}}})

            class {method.name} extends SoaProcessFunction[{service.namespace}.{service.name}, {method.name}_args, {method.name}_result, {method.name.charAt(0).toUpper + method.name.substring(1)}_argsSerializer,  {method.name.charAt(0).toUpper + method.name.substring(1)}_resultSerializer]("{method.name}", new {method.name.charAt(0).toUpper + method.name.substring(1)}_argsSerializer(), new {method.name.charAt(0).toUpper + method.name.substring(1)}_resultSerializer())<block>

            override def isOneway: Boolean = false

            override def getEmptyArgsInstance: {method.name}_args = null


            @throws[TException]
            def getResult(iface: {service.namespace}.{service.name}, args: {method.name}_args):{method.name}_result = <block>

              val _result = iface.{method.name}({toFieldArrayBuffer(method.request.getFields).map{(field: Field)=>{<div>args.{nameAsId(field.name)}{if(field != method.request.getFields.get(method.request.getFields.size-1)) <span>,</span>}</div>}}})
              {method.response.name}({if(method.response.fields.get(0).dataType.kind != KIND.VOID) <div>_result</div>} )
            </block>
          </block>
          </div>
        }
        }
        }

  class getServiceMetadata extends SoaProcessFunction[{service.namespace}.{service.name}, GetServiceMetadata_args, GetServiceMetadata_result, GetServiceMetadata_argsSerializer, GetServiceMetadata_resultSerializer](
  "getServiceMetadata", new GetServiceMetadata_argsSerializer(), new GetServiceMetadata_resultSerializer()) <block>

      override def isOneway: Boolean = false

      override def getEmptyArgsInstance: GetServiceMetadata_args = GetServiceMetadata_args()

      @throws[TException]
      override def getResult(iface: {service.namespace}.{service.name}, args: GetServiceMetadata_args): GetServiceMetadata_result = <block>

        val source = scala.io.Source.fromInputStream({service.name}Codec.getClass.getClassLoader.getResourceAsStream("{service.namespace}.{service.name}.xml"))
        val success = source.mkString
        source.close
        GetServiceMetadata_result(success)
      </block>
      </block>

      class Processor(iface: {service.getNamespace}.{service.name}) extends SoaCommonBaseProcessor(iface, Processor.getProcessMap)

        object Processor<block>

          type PF = SoaProcessFunction[{service.getNamespace}.{service.name}, _, _, _ {lt}: TCommonBeanSerializer[_], _ {lt}: TCommonBeanSerializer[_]]

          def getProcessMap(): java.util.Map[String, PF] = <block>
             val map = new java.util.HashMap[String, PF]()
            {toMethodArrayBuffer(service.getMethods).map{(method: Method)=>{
              <div>map.put("{method.name}", new {method.name})
              </div>}}}
            map.put("getServiceMetadata", new getServiceMetadata)
            map
          </block>

        </block>
        </block>
      </div>
    }
  }

  def toScalaDataType(dataType:DataType): Elem = {
    dataType.kind match {
      case KIND.VOID => <div></div>
      case KIND.BOOLEAN => <div>Boolean</div>
      case KIND.BYTE => <div>Byte</div>
      case KIND.SHORT => <div>Short</div>
      case KIND.INTEGER => <div>Int</div>
      case KIND.LONG => <div>Long</div>
      case KIND.DOUBLE => <div>Double</div>
      case KIND.STRING => <div>String</div>
      case KIND.BINARY => <div>java.nio.ByteBuffer</div>
      case KIND.DATE => <div>java.util.Date</div>
      case KIND.BIGDECIMAL => <div>BigDecimal</div>
      case KIND.MAP =>
        return {<div>Map[{toScalaDataType(dataType.getKeyType)}, {toScalaDataType(dataType.getValueType)}]</div>}
      case KIND.LIST =>
        return {<div>List[{toScalaDataType(dataType.getValueType)}]</div>}
      case KIND.SET =>
        return {<div>Set[{toScalaDataType(dataType.getValueType)}]</div>}
      case KIND.ENUM =>
        val ref = dataType.getQualifiedName
        val enumName = ref.substring(ref.lastIndexOf("."))
        return {<div>{ref}{enumName}</div>}
      case KIND.STRUCT =>
        val ref = dataType.getQualifiedName
        return {<div>{ref}</div>}
    }
  }

  def caseClassFiledCombile(field: Field): Elem ={
    <div>{if(field.dataType.kind != KIND.VOID) <div>{nameAsId(field.name)}:{toScalaDataType(field.dataType)}</div>}</div>

  }




//  def getToStringElement(field: Field): Elem = {
//    <div>
//      stringBuilder.append("\"").append("{nameAsId(field.name)}").append("\":{if(field.dataType.kind == DataType.KIND.STRING) <div>\"</div>}").append({getToStringByDataType(field)}).append("{if(field.dataType.kind == DataType.KIND.STRING) <div>\"</div>},");
//    </div>
//  }
//
//  def getToStringByDataType(field: Field):Elem = {
//    if(field.dataType.kind == KIND.STRUCT) <div>this.{nameAsId(field.name)} == null ? "null" : this.{nameAsId(field.name)}.toString()</div> else <div>{nameAsId(field.name)}</div>
//  }

}
