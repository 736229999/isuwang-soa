package com.isuwang.dapeng.json.demo;

      import com.isuwang.dapeng.core.*;
      import com.isuwang.org.apache.thrift.*;
      import java.util.concurrent.CompletableFuture;
      import java.util.concurrent.Future;
      import java.util.ServiceLoader;
      import com.isuwang.dapeng.json.demo.OrderServiceCodec.*;
      import com.isuwang.dapeng.json.demo.service.OrderServiceAsync;

      /**
       * Autogenerated by Dapeng-Code-Generator (1.2.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated

      **/
      public class OrderServiceAsyncClient implements OrderServiceAsync{
      private final String serviceName;
      private final String version;

      private SoaConnectionPool pool;

      public OrderServiceAsyncClient() {
        this.serviceName = "com.isuwang.dapeng.json.demo.service.OrderServiceAsync";
        this.version = "1.0.0";

        ServiceLoader<SoaConnectionPoolFactory> factories = ServiceLoader.load(SoaConnectionPoolFactory.class);
        for (SoaConnectionPoolFactory factory: factories) {
          this.pool = factory.getPool();
          break;
        }
        this.pool.registerClientInfo(serviceName,version);
      }

      
          
            /**
            * 

###
#### 业务描述
   1、 批量修改单个医生一天排班情况
   2、如果以排班的时间去除勾选（弃用）则删除排班数据
   3、如果原来未排班的数据选中（认领）后则创建一天可预约(workable)记录

#### 接口依赖

#### 边界异常说明
    无

#### 输入
    1. 选中和非选中的时间段均要上传，否则未上送的时间号段不做处理

#### 前置检查


####  权限检查

####  逻辑处理


#### 数据库变更

####  事务处理

####  输出
    无

            **/
            
              public CompletableFuture<Void> batchAppointment(com.isuwang.dapeng.json.demo.domain.BatchAppointmentRequest request, long timeout) throws SoaException{

              String methodName = "batchAppointment";
              batchAppointment_args batchAppointment_args = new batchAppointment_args();
              batchAppointment_args.setRequest(request);
                

              CompletableFuture<batchAppointment_result> response = (CompletableFuture<batchAppointment_result>) pool.sendAsync(serviceName,version,"batchAppointment",batchAppointment_args, new BatchAppointment_argsSerializer(), new BatchAppointment_resultSerializer(),timeout);

              
                  return response.thenApply((batchAppointment_result result )->  null);
                
            }
            
          

        
          
            /**
            * 

### 医生排班
#### 业务描述
   1、 批量修改单个医生一天排班情况
   2、如果以排班的时间去除勾选（弃用）则删除排班数据
   3、如果原来未排班的数据选中（认领）后则创建一天可预约(workable)记录

#### 接口依赖
    listAppointmentTimeForDoctor
#### 边界异常说明
    无

#### 输入
    1. 选中和非选中的时间段均要上传，否则未上送的时间号段不做处理

#### 前置检查


####  权限检查

####  逻辑处理


#### 数据库变更

####  事务处理

####  输出
    返回当天的所有排班时间段

            **/
            
              public CompletableFuture<java.util.List<com.isuwang.dapeng.json.demo.domain.AppointmentTimeItem>> batchAppointment4Doctor(com.isuwang.dapeng.json.demo.domain.BatchAppointmentRequest request, long timeout) throws SoaException{

              String methodName = "batchAppointment4Doctor";
              batchAppointment4Doctor_args batchAppointment4Doctor_args = new batchAppointment4Doctor_args();
              batchAppointment4Doctor_args.setRequest(request);
                

              CompletableFuture<batchAppointment4Doctor_result> response = (CompletableFuture<batchAppointment4Doctor_result>) pool.sendAsync(serviceName,version,"batchAppointment4Doctor",batchAppointment4Doctor_args, new BatchAppointment4Doctor_argsSerializer(), new BatchAppointment4Doctor_resultSerializer(),timeout);

              
                  
                      return response.thenApply((batchAppointment4Doctor_result result )->  result.getSuccess());
                    
                
            }
            
          

        
          
            /**
            * 

### 条件查询排班列表
#### 业务描述
    添加医生排班

#### 接口依赖

#### 边界异常说明
    无

#### 输入
    1.查询条件

#### 前置检查


####  权限检查

####  逻辑处理


#### 数据库变更

####  事务处理


####  输出
    1.排班列表

            **/
            
              public CompletableFuture<com.isuwang.dapeng.json.demo.domain.ListAppointmentsResponse> listAppointments(com.isuwang.dapeng.json.demo.domain.ListAppointmentsRequest request, long timeout) throws SoaException{

              String methodName = "listAppointments";
              listAppointments_args listAppointments_args = new listAppointments_args();
              listAppointments_args.setRequest(request);
                

              CompletableFuture<listAppointments_result> response = (CompletableFuture<listAppointments_result>) pool.sendAsync(serviceName,version,"listAppointments",listAppointments_args, new ListAppointments_argsSerializer(), new ListAppointments_resultSerializer(),timeout);

              
                  
                      return response.thenApply((listAppointments_result result )->  result.getSuccess());
                    
                
            }
            
          

        
          
            /**
            * 

### 批量创建【可领取】的排班信息
#### 业务描述
    添加医生排班

#### 接口依赖

#### 边界异常说明
    无

#### 输入
    1.创建条件

#### 前置检查


####  权限检查

####  逻辑处理


#### 数据库变更

####  事务处理


####  输出
   1. 无

            **/
            
              public CompletableFuture<Void> createAppointmentForAvailable(com.isuwang.dapeng.json.demo.domain.CreateAppointmentForAvailableRequest request, long timeout) throws SoaException{

              String methodName = "createAppointmentForAvailable";
              createAppointmentForAvailable_args createAppointmentForAvailable_args = new createAppointmentForAvailable_args();
              createAppointmentForAvailable_args.setRequest(request);
                

              CompletableFuture<createAppointmentForAvailable_result> response = (CompletableFuture<createAppointmentForAvailable_result>) pool.sendAsync(serviceName,version,"createAppointmentForAvailable",createAppointmentForAvailable_args, new CreateAppointmentForAvailable_argsSerializer(), new CreateAppointmentForAvailable_resultSerializer(),timeout);

              
                  return response.thenApply((createAppointmentForAvailable_result result )->  null);
                
            }
            
          

        
          
            /**
            * 

### 最后的诊断医生
#### 业务描述
    最后的诊断医生

#### 接口依赖

#### 边界异常说明
    无

#### 输入
    1.病人id

#### 前置检查


####  权限检查

####  逻辑处理


#### 数据库变更

####  事务处理


####  输出
    1.

            **/
            
              public CompletableFuture<com.isuwang.dapeng.json.demo.domain.GetLastTreatDoctorResponse> getLastTreatDoctor(Integer patientId, long timeout) throws SoaException{

              String methodName = "getLastTreatDoctor";
              getLastTreatDoctor_args getLastTreatDoctor_args = new getLastTreatDoctor_args();
              getLastTreatDoctor_args.setPatientId(patientId);
                

              CompletableFuture<getLastTreatDoctor_result> response = (CompletableFuture<getLastTreatDoctor_result>) pool.sendAsync(serviceName,version,"getLastTreatDoctor",getLastTreatDoctor_args, new GetLastTreatDoctor_argsSerializer(), new GetLastTreatDoctor_resultSerializer(),timeout);

              
                  
                      return response.thenApply((getLastTreatDoctor_result result )->  result.getSuccess());
                    
                
            }
            
          

        
          
            /**
            * 

     ### 创建订单
     #### 业务描述
         预约锁定医生（创建【预约】订单，补充病人信息， 症状记录到订单表）

     #### 接口依赖

     #### 边界异常说明
         无

     #### 输入
         1.病人id

     #### 前置检查


     ####  权限检查

     ####  逻辑处理


     #### 数据库变更

     ####  事务处理


     ####  输出
         1. OrderItem

            **/
            
              public CompletableFuture<com.isuwang.dapeng.json.demo.domain.OrderItem> createOrder(com.isuwang.dapeng.json.demo.domain.CreateOrderRequest request, long timeout) throws SoaException{

              String methodName = "createOrder";
              createOrder_args createOrder_args = new createOrder_args();
              createOrder_args.setRequest(request);
                

              CompletableFuture<createOrder_result> response = (CompletableFuture<createOrder_result>) pool.sendAsync(serviceName,version,"createOrder",createOrder_args, new CreateOrder_argsSerializer(), new CreateOrder_resultSerializer(),timeout);

              
                  
                      return response.thenApply((createOrder_result result )->  result.getSuccess());
                    
                
            }
            
          

        
          
            /**
            * 

   ### 查询订单列表
   #### 业务描述
       查询订单列表

   #### 接口依赖

   #### 边界异常说明
       无

   #### 输入
       1.查询条件

   #### 前置检查


   ####  权限检查

   ####  逻辑处理


   #### 数据库变更

   ####  事务处理


   ####  输出
       1.

            **/
            
              public CompletableFuture<com.isuwang.dapeng.json.demo.domain.ListOrderResponse> listOrders(com.isuwang.dapeng.json.demo.domain.ListOrderRequest request, long timeout) throws SoaException{

              String methodName = "listOrders";
              listOrders_args listOrders_args = new listOrders_args();
              listOrders_args.setRequest(request);
                

              CompletableFuture<listOrders_result> response = (CompletableFuture<listOrders_result>) pool.sendAsync(serviceName,version,"listOrders",listOrders_args, new ListOrders_argsSerializer(), new ListOrders_resultSerializer(),timeout);

              
                  
                      return response.thenApply((listOrders_result result )->  result.getSuccess());
                    
                
            }
            
          

        
          
            /**
            * 

       ### 查询订单明细
       #### 业务描述
           查询订单明细

       #### 接口依赖

       #### 边界异常说明
           无

       #### 输入
           1.查询条件

       #### 前置检查


       ####  权限检查

       ####  逻辑处理


       #### 数据库变更

       ####  事务处理


       ####  输出
           1.

            **/
            
              public CompletableFuture<com.isuwang.dapeng.json.demo.domain.OrderItem> getOrder(Integer orderId, long timeout) throws SoaException{

              String methodName = "getOrder";
              getOrder_args getOrder_args = new getOrder_args();
              getOrder_args.setOrderId(orderId);
                

              CompletableFuture<getOrder_result> response = (CompletableFuture<getOrder_result>) pool.sendAsync(serviceName,version,"getOrder",getOrder_args, new GetOrder_argsSerializer(), new GetOrder_resultSerializer(),timeout);

              
                  
                      return response.thenApply((getOrder_result result )->  result.getSuccess());
                    
                
            }
            
          

        
          
            /**
            * 

       ### 修改订单状态
       #### 业务描述
           修改订单状态

       #### 接口依赖

       #### 边界异常说明
           无

       #### 输入
           1.查询条件

       #### 前置检查


       ####  权限检查

       ####  逻辑处理


       #### 数据库变更

       ####  事务处理


       ####  输出
           1.

            **/
            
              public CompletableFuture<Void> modifyOrderStatus(com.isuwang.dapeng.json.demo.domain.ModifyOrderStatusRequest request, long timeout) throws SoaException{

              String methodName = "modifyOrderStatus";
              modifyOrderStatus_args modifyOrderStatus_args = new modifyOrderStatus_args();
              modifyOrderStatus_args.setRequest(request);
                

              CompletableFuture<modifyOrderStatus_result> response = (CompletableFuture<modifyOrderStatus_result>) pool.sendAsync(serviceName,version,"modifyOrderStatus",modifyOrderStatus_args, new ModifyOrderStatus_argsSerializer(), new ModifyOrderStatus_resultSerializer(),timeout);

              
                  return response.thenApply((modifyOrderStatus_result result )->  null);
                
            }
            
          

        
          
            /**
            * 

           ### 订单缴费成功的回调接口
           #### 业务描述
               订单缴费支付的回调接口

           #### 接口依赖

           #### 边界异常说明
               无

           #### 输入
               1. 订单唯一ID
               2. 支付平台的订单ID

           #### 前置检查
               1. 检查订单是否存在

           ####  权限检查

           ####  逻辑处理
               1. 更新订单状态并记录支付平台的订单ID
               2. 调用结算接口，创建结算记录

           #### 数据库变更

           ####  事务处理


           ####  输出
               1.

            **/
            
              public CompletableFuture<Boolean> payNotify(com.isuwang.dapeng.json.demo.domain.PayNotifyRequest payNotifyRequest, long timeout) throws SoaException{

              String methodName = "payNotify";
              payNotify_args payNotify_args = new payNotify_args();
              payNotify_args.setPayNotifyRequest(payNotifyRequest);
                

              CompletableFuture<payNotify_result> response = (CompletableFuture<payNotify_result>) pool.sendAsync(serviceName,version,"payNotify",payNotify_args, new PayNotify_argsSerializer(), new PayNotify_resultSerializer(),timeout);

              
                  
                      return response.thenApply((payNotify_result result )->  result.getSuccess());
                    
                
            }
            
          

        
          
            /**
            * 

           ### 创建诊疗报告（医生端）
           #### 业务描述
               创建诊疗报告

           #### 接口依赖
                saveRecommends
           #### 边界异常说明
               无

           #### 输入
               1. 订单ID
               2. 诊疗报告内容
               3、如果是首诊报告还有推荐医生和推荐量表
           #### 前置检查


           ####  权限检查

           ####  逻辑处理
               1. 插入数据库

           #### 数据库变更

           ####  事务处理


           ####  输出
               1. id

            **/
            
              public CompletableFuture<Integer> createDiagnose(com.isuwang.dapeng.json.demo.domain.CreateDiagnoseRequest createDiagnoseRequest, long timeout) throws SoaException{

              String methodName = "createDiagnose";
              createDiagnose_args createDiagnose_args = new createDiagnose_args();
              createDiagnose_args.setCreateDiagnoseRequest(createDiagnoseRequest);
                

              CompletableFuture<createDiagnose_result> response = (CompletableFuture<createDiagnose_result>) pool.sendAsync(serviceName,version,"createDiagnose",createDiagnose_args, new CreateDiagnose_argsSerializer(), new CreateDiagnose_resultSerializer(),timeout);

              
                  
                      return response.thenApply((createDiagnose_result result )->  result.getSuccess());
                    
                
            }
            
          

        
          
            /**
            * 

       ### 诊疗报告列表
       #### 业务描述
           诊疗报告列表，支持医生和患者查自己的报告

       #### 接口依赖

       #### 边界异常说明
           无

       #### 输入


       #### 前置检查


       ####  权限检查

       ####  逻辑处理


       #### 数据库变更

       ####  事务处理


       ####  输出
           1. id

            **/
            
              public CompletableFuture<com.isuwang.dapeng.json.demo.domain.ListDiagnoseResponse> listDiagnoses(com.isuwang.dapeng.json.demo.domain.ListDiagnoseRequest listDiagnoseRequest, long timeout) throws SoaException{

              String methodName = "listDiagnoses";
              listDiagnoses_args listDiagnoses_args = new listDiagnoses_args();
              listDiagnoses_args.setListDiagnoseRequest(listDiagnoseRequest);
                

              CompletableFuture<listDiagnoses_result> response = (CompletableFuture<listDiagnoses_result>) pool.sendAsync(serviceName,version,"listDiagnoses",listDiagnoses_args, new ListDiagnoses_argsSerializer(), new ListDiagnoses_resultSerializer(),timeout);

              
                  
                      return response.thenApply((listDiagnoses_result result )->  result.getSuccess());
                    
                
            }
            
          

        
          
            /**
            * 

       ### 预约就诊计划(排队就诊)
       #### 业务描述
           查询未过期的预约记录

       #### 接口依赖

       #### 边界异常说明
           无

       #### 输入


       #### 前置检查


       ####  权限检查

       ####  逻辑处理


       #### 数据库变更

       ####  事务处理


       ####  输出
           1. id

            **/
            
              public CompletableFuture<com.isuwang.dapeng.json.demo.domain.ListTreatPlansResponse> listTreatPlans(long timeout) throws SoaException{

              String methodName = "listTreatPlans";
              listTreatPlans_args listTreatPlans_args = new listTreatPlans_args();
              

              CompletableFuture<listTreatPlans_result> response = (CompletableFuture<listTreatPlans_result>) pool.sendAsync(serviceName,version,"listTreatPlans",listTreatPlans_args, new ListTreatPlans_argsSerializer(), new ListTreatPlans_resultSerializer(),timeout);

              
                  
                      return response.thenApply((listTreatPlans_result result )->  result.getSuccess());
                    
                
            }
            
          

        
          
            /**
            * 

### 查询可以预约医生（按时间周期排序）
#### 业务描述
查询可以预约医生（按时间周期排序）

#### 接口依赖

#### 边界异常说明
无

#### 输入


#### 前置检查


####  权限检查

####  逻辑处理


#### 数据库变更

####  事务处理


####  输出
1. 可预约医生列表

            **/
            
              public CompletableFuture<com.isuwang.dapeng.json.demo.domain.AppointmentDoctorsResponse> listAppointmentDoctors(com.isuwang.dapeng.json.demo.domain.ListAppointmentDoctorsRequest request, long timeout) throws SoaException{

              String methodName = "listAppointmentDoctors";
              listAppointmentDoctors_args listAppointmentDoctors_args = new listAppointmentDoctors_args();
              listAppointmentDoctors_args.setRequest(request);
                

              CompletableFuture<listAppointmentDoctors_result> response = (CompletableFuture<listAppointmentDoctors_result>) pool.sendAsync(serviceName,version,"listAppointmentDoctors",listAppointmentDoctors_args, new ListAppointmentDoctors_argsSerializer(), new ListAppointmentDoctors_resultSerializer(),timeout);

              
                  
                      return response.thenApply((listAppointmentDoctors_result result )->  result.getSuccess());
                    
                
            }
            
          

        
          
            /**
            * 

### 用医生姓名来查询可以预约医生（按时间周期排序）
#### 业务描述
用医生姓名来查询可以预约医生（按时间周期排序）

#### 接口依赖

#### 边界异常说明
无

#### 输入


#### 前置检查


####  权限检查

####  逻辑处理


#### 数据库变更

####  事务处理


####  输出
1. 可预约医生列表

            **/
            
              public CompletableFuture<com.isuwang.dapeng.json.demo.domain.AppointmentDoctorsResponse> listAppointmentForDoctorName(com.isuwang.dapeng.json.demo.domain.ListAppointmentForDoctorNameRequest listAppointmentForDoctorNameRequest, long timeout) throws SoaException{

              String methodName = "listAppointmentForDoctorName";
              listAppointmentForDoctorName_args listAppointmentForDoctorName_args = new listAppointmentForDoctorName_args();
              listAppointmentForDoctorName_args.setListAppointmentForDoctorNameRequest(listAppointmentForDoctorNameRequest);
                

              CompletableFuture<listAppointmentForDoctorName_result> response = (CompletableFuture<listAppointmentForDoctorName_result>) pool.sendAsync(serviceName,version,"listAppointmentForDoctorName",listAppointmentForDoctorName_args, new ListAppointmentForDoctorName_argsSerializer(), new ListAppointmentForDoctorName_resultSerializer(),timeout);

              
                  
                      return response.thenApply((listAppointmentForDoctorName_result result )->  result.getSuccess());
                    
                
            }
            
          

        
          
            /**
            * 

### 按日期查询可以预约医生列表
#### 业务描述
按医生查询可以预约列表

#### 接口依赖

#### 边界异常说明
无

#### 输入
1、医生id
2、日期

#### 前置检查


####  权限检查

####  逻辑处理


#### 数据库变更

####  事务处理


####  输出
1. 可预时间列表

            **/
            
              public CompletableFuture<com.isuwang.dapeng.json.demo.domain.AppointmentDoctorsByDateResponse> listAppointmentDoctorsByDate(com.isuwang.dapeng.json.demo.domain.AppointmentDoctorsByDateRequest request, long timeout) throws SoaException{

              String methodName = "listAppointmentDoctorsByDate";
              listAppointmentDoctorsByDate_args listAppointmentDoctorsByDate_args = new listAppointmentDoctorsByDate_args();
              listAppointmentDoctorsByDate_args.setRequest(request);
                

              CompletableFuture<listAppointmentDoctorsByDate_result> response = (CompletableFuture<listAppointmentDoctorsByDate_result>) pool.sendAsync(serviceName,version,"listAppointmentDoctorsByDate",listAppointmentDoctorsByDate_args, new ListAppointmentDoctorsByDate_argsSerializer(), new ListAppointmentDoctorsByDate_resultSerializer(),timeout);

              
                  
                      return response.thenApply((listAppointmentDoctorsByDate_result result )->  result.getSuccess());
                    
                
            }
            
          

        
          
            /**
            * 

### 医生查询已预约的患者列表
#### 业务描述
医生查询已预约的患者列表

#### 接口依赖

#### 边界异常说明
无

#### 输入
1、订单状态 hasTreated ：是否已经治疗 true：已治疗 false :未治疗


#### 前置检查


####  权限检查

####  逻辑处理


#### 数据库变更

####  事务处理


####  输出
1. 患者列表

            **/
            
              public CompletableFuture<com.isuwang.dapeng.json.demo.domain.ListAppointmentPatientResponse> listAppointmentPatients(com.isuwang.dapeng.json.demo.domain.ListAppointmentPatientRequest request, long timeout) throws SoaException{

              String methodName = "listAppointmentPatients";
              listAppointmentPatients_args listAppointmentPatients_args = new listAppointmentPatients_args();
              listAppointmentPatients_args.setRequest(request);
                

              CompletableFuture<listAppointmentPatients_result> response = (CompletableFuture<listAppointmentPatients_result>) pool.sendAsync(serviceName,version,"listAppointmentPatients",listAppointmentPatients_args, new ListAppointmentPatients_argsSerializer(), new ListAppointmentPatients_resultSerializer(),timeout);

              
                  
                      return response.thenApply((listAppointmentPatients_result result )->  result.getSuccess());
                    
                
            }
            
          

        
          
            /**
            * 

### 查询(今日)值班医生列表
#### 业务描述
查询值班医生列表

#### 接口依赖

#### 边界异常说明
无

#### 输入

#### 前置检查


####  权限检查

####  逻辑处理


#### 数据库变更

####  事务处理


####  输出
1. 医生列表

            **/
            
              public CompletableFuture<com.isuwang.dapeng.json.demo.domain.ListDoctorOnDutyResponse> listDoctorOnDuty(com.isuwang.dapeng.json.demo.domain.PageRequest pageRequest, long timeout) throws SoaException{

              String methodName = "listDoctorOnDuty";
              listDoctorOnDuty_args listDoctorOnDuty_args = new listDoctorOnDuty_args();
              listDoctorOnDuty_args.setPageRequest(pageRequest);
                

              CompletableFuture<listDoctorOnDuty_result> response = (CompletableFuture<listDoctorOnDuty_result>) pool.sendAsync(serviceName,version,"listDoctorOnDuty",listDoctorOnDuty_args, new ListDoctorOnDuty_argsSerializer(), new ListDoctorOnDuty_resultSerializer(),timeout);

              
                  
                      return response.thenApply((listDoctorOnDuty_result result )->  result.getSuccess());
                    
                
            }
            
          

        
          
            /**
            * 

### 预约日历
#### 业务描述
当前一个月预约日历

#### 接口依赖

#### 边界异常说明
无

#### 输入

#### 前置检查


####  权限检查

####  逻辑处理


#### 数据库变更

####  事务处理


####  输出
1. 可以预约日期

            **/
            
              public CompletableFuture<java.util.List<String>> listAppointmentCalendar(com.isuwang.dapeng.json.demo.domain.ListAppointmentCalendarRequest request, long timeout) throws SoaException{

              String methodName = "listAppointmentCalendar";
              listAppointmentCalendar_args listAppointmentCalendar_args = new listAppointmentCalendar_args();
              listAppointmentCalendar_args.setRequest(request);
                

              CompletableFuture<listAppointmentCalendar_result> response = (CompletableFuture<listAppointmentCalendar_result>) pool.sendAsync(serviceName,version,"listAppointmentCalendar",listAppointmentCalendar_args, new ListAppointmentCalendar_argsSerializer(), new ListAppointmentCalendar_resultSerializer(),timeout);

              
                  
                      return response.thenApply((listAppointmentCalendar_result result )->  result.getSuccess());
                    
                
            }
            
          

        
          
            /**
            * 

### 医生领取排班的日历
#### 业务描述
当前一个月排班日历

#### 接口依赖

#### 边界异常说明
无

#### 输入

#### 前置检查


####  权限检查

####  逻辑处理


#### 数据库变更

####  事务处理


####  输出
1. 可以预约日期

            **/
            
              public CompletableFuture<java.util.List<String>> listAppointmentCalendarForDoctor(long timeout) throws SoaException{

              String methodName = "listAppointmentCalendarForDoctor";
              listAppointmentCalendarForDoctor_args listAppointmentCalendarForDoctor_args = new listAppointmentCalendarForDoctor_args();
              

              CompletableFuture<listAppointmentCalendarForDoctor_result> response = (CompletableFuture<listAppointmentCalendarForDoctor_result>) pool.sendAsync(serviceName,version,"listAppointmentCalendarForDoctor",listAppointmentCalendarForDoctor_args, new ListAppointmentCalendarForDoctor_argsSerializer(), new ListAppointmentCalendarForDoctor_resultSerializer(),timeout);

              
                  
                      return response.thenApply((listAppointmentCalendarForDoctor_result result )->  result.getSuccess());
                    
                
            }
            
          

        
          
            /**
            * 

### 查询可以预约医生（按时间周期排序）
#### 业务描述
查询可以预约医生（按时间周期排序）

#### 接口依赖

#### 边界异常说明
无

#### 输入


#### 前置检查


####  权限检查

####  逻辑处理


#### 数据库变更

####  事务处理


####  输出
1. 可预约医生列表

            **/
            
              public CompletableFuture<com.isuwang.dapeng.json.demo.domain.ListAppointmentsByDoctorIdResponse> listAppointmentsByDoctorId(com.isuwang.dapeng.json.demo.domain.ListAppointmentsByDoctorIdRequest request, long timeout) throws SoaException{

              String methodName = "listAppointmentsByDoctorId";
              listAppointmentsByDoctorId_args listAppointmentsByDoctorId_args = new listAppointmentsByDoctorId_args();
              listAppointmentsByDoctorId_args.setRequest(request);
                

              CompletableFuture<listAppointmentsByDoctorId_result> response = (CompletableFuture<listAppointmentsByDoctorId_result>) pool.sendAsync(serviceName,version,"listAppointmentsByDoctorId",listAppointmentsByDoctorId_args, new ListAppointmentsByDoctorId_argsSerializer(), new ListAppointmentsByDoctorId_resultSerializer(),timeout);

              
                  
                      return response.thenApply((listAppointmentsByDoctorId_result result )->  result.getSuccess());
                    
                
            }
            
          

        
          
            /**
            * 

      ### 查询排班记录信息
      #### 业务描述
      查询排班记录信息

      #### 接口依赖

      #### 边界异常说明
      无

      #### 输入
        appointmentId

      #### 前置检查

      ####  权限检查

      ####  逻辑处理


      #### 数据库变更

      ####  事务处理


      ####  输出
      1. 排班记录信息

            **/
            
              public CompletableFuture<com.isuwang.dapeng.json.demo.domain.AppointmentItem> getAppointmentItem(Integer appointmentId, long timeout) throws SoaException{

              String methodName = "getAppointmentItem";
              getAppointmentItem_args getAppointmentItem_args = new getAppointmentItem_args();
              getAppointmentItem_args.setAppointmentId(appointmentId);
                

              CompletableFuture<getAppointmentItem_result> response = (CompletableFuture<getAppointmentItem_result>) pool.sendAsync(serviceName,version,"getAppointmentItem",getAppointmentItem_args, new GetAppointmentItem_argsSerializer(), new GetAppointmentItem_resultSerializer(),timeout);

              
                  
                      return response.thenApply((getAppointmentItem_result result )->  result.getSuccess());
                    
                
            }
            
          

        
          
            /**
            * 

### 查询医生排班记录信息(包括未安排的时间段)
#### 业务描述
1、查询医生排班记录信息(包括未安排的时间段)
2、医生排班管理列表

#### 接口依赖

#### 边界异常说明
无

#### 输入
appointmentId

#### 前置检查

####  权限检查

####  逻辑处理


#### 数据库变更

####  事务处理


####  输出
1. 医生排班记录信息

            **/
            
              public CompletableFuture<java.util.List<com.isuwang.dapeng.json.demo.domain.AppointmentTimeItem>> listAppointmentTimeForDoctor(com.isuwang.dapeng.json.demo.domain.ListAppointmentTimeForDoctorRequest request, long timeout) throws SoaException{

              String methodName = "listAppointmentTimeForDoctor";
              listAppointmentTimeForDoctor_args listAppointmentTimeForDoctor_args = new listAppointmentTimeForDoctor_args();
              listAppointmentTimeForDoctor_args.setRequest(request);
                

              CompletableFuture<listAppointmentTimeForDoctor_result> response = (CompletableFuture<listAppointmentTimeForDoctor_result>) pool.sendAsync(serviceName,version,"listAppointmentTimeForDoctor",listAppointmentTimeForDoctor_args, new ListAppointmentTimeForDoctor_argsSerializer(), new ListAppointmentTimeForDoctor_resultSerializer(),timeout);

              
                  
                      return response.thenApply((listAppointmentTimeForDoctor_result result )->  result.getSuccess());
                    
                
            }
            
          

        
          
            /**
            * 

    ### 医生首页通知
    #### 业务描述
    医生首页通知(各种待办记录的数量)

    #### 接口依赖

    #### 边界异常说明
    无

    #### 输入

    #### 前置检查

    ####  权限检查

    ####  逻辑处理


    #### 数据库变更

    ####  事务处理


    ####  输出
     1、我的预约： 已完成支付但没开始的订单数量

            **/
            
              public CompletableFuture<com.isuwang.dapeng.json.demo.domain.DoctorHomePageNotice> getDoctorHomePageNotice(long timeout) throws SoaException{

              String methodName = "getDoctorHomePageNotice";
              getDoctorHomePageNotice_args getDoctorHomePageNotice_args = new getDoctorHomePageNotice_args();
              

              CompletableFuture<getDoctorHomePageNotice_result> response = (CompletableFuture<getDoctorHomePageNotice_result>) pool.sendAsync(serviceName,version,"getDoctorHomePageNotice",getDoctorHomePageNotice_args, new GetDoctorHomePageNotice_argsSerializer(), new GetDoctorHomePageNotice_resultSerializer(),timeout);

              
                  
                      return response.thenApply((getDoctorHomePageNotice_result result )->  result.getSuccess());
                    
                
            }
            
          

        
          
            /**
            * 

       ### 患者首页通知
       #### 业务描述
       患者首页通知(各种待办记录的数量)

       #### 接口依赖

       #### 边界异常说明
       无

       #### 输入

       #### 前置检查

       ####  权限检查

       ####  逻辑处理


       #### 数据库变更

       ####  事务处理


       ####  输出
       1、排队候诊 该用户已完成支付但没开始治疗的订单数量
       2、诊断报告： 未读的诊断报告数量
       3、订单缴费： 已创建但没支付的订单数量

            **/
            
              public CompletableFuture<com.isuwang.dapeng.json.demo.domain.PatientHomePageNotice> getPatientHomePageNotice(long timeout) throws SoaException{

              String methodName = "getPatientHomePageNotice";
              getPatientHomePageNotice_args getPatientHomePageNotice_args = new getPatientHomePageNotice_args();
              

              CompletableFuture<getPatientHomePageNotice_result> response = (CompletableFuture<getPatientHomePageNotice_result>) pool.sendAsync(serviceName,version,"getPatientHomePageNotice",getPatientHomePageNotice_args, new GetPatientHomePageNotice_argsSerializer(), new GetPatientHomePageNotice_resultSerializer(),timeout);

              
                  
                      return response.thenApply((getPatientHomePageNotice_result result )->  result.getSuccess());
                    
                
            }
            
          

        
          
            /**
            * 

     ### 阅读诊断报告
     #### 业务描述
     阅读诊断报告

     #### 接口依赖

     #### 边界异常说明
     无

     #### 输入
      1、排队候诊 该用户已完成支付但没开始治疗的订单数量
     #### 前置检查

     ####  权限检查

     ####  逻辑处理


     #### 数据库变更

     ####  事务处理


     ####  输出
     1. 患者首页通知

            **/
            
              public CompletableFuture<Void> readDiagnose(Integer diagnoseId, long timeout) throws SoaException{

              String methodName = "readDiagnose";
              readDiagnose_args readDiagnose_args = new readDiagnose_args();
              readDiagnose_args.setDiagnoseId(diagnoseId);
                

              CompletableFuture<readDiagnose_result> response = (CompletableFuture<readDiagnose_result>) pool.sendAsync(serviceName,version,"readDiagnose",readDiagnose_args, new ReadDiagnose_argsSerializer(), new ReadDiagnose_resultSerializer(),timeout);

              
                  return response.thenApply((readDiagnose_result result )->  null);
                
            }
            
          

        
          
            /**
            * 

     ### 获取诊断报告
     #### 业务描述
     获取一份诊断报告

     #### 接口依赖

     #### 边界异常说明
     无

     #### 输入

     #### 前置检查

     ####  权限检查

     ####  逻辑处理


     #### 数据库变更

     ####  事务处理


     ####  输出
     1. 患者首页通知

            **/
            
              public CompletableFuture<com.isuwang.dapeng.json.demo.domain.DiagnoseItem> getDiagnoseItem(Integer diagnoseId, long timeout) throws SoaException{

              String methodName = "getDiagnoseItem";
              getDiagnoseItem_args getDiagnoseItem_args = new getDiagnoseItem_args();
              getDiagnoseItem_args.setDiagnoseId(diagnoseId);
                

              CompletableFuture<getDiagnoseItem_result> response = (CompletableFuture<getDiagnoseItem_result>) pool.sendAsync(serviceName,version,"getDiagnoseItem",getDiagnoseItem_args, new GetDiagnoseItem_argsSerializer(), new GetDiagnoseItem_resultSerializer(),timeout);

              
                  
                      return response.thenApply((getDiagnoseItem_result result )->  result.getSuccess());
                    
                
            }
            
          

        
          
            /**
            * 

     ### 获取订单的微信支付对象
     #### 业务描述
     获取订单的微信支付对象

     #### 接口依赖

     #### 边界异常说明
     无

     #### 输入

     #### 前置检查

     ####  权限检查

     ####  逻辑处理


     #### 数据库变更

     ####  事务处理


     ####  输出
     1. 支付对象

            **/
            
              public CompletableFuture<com.isuwang.dapeng.json.demo.domain.OrderForWxResponse> getOrderForWx(Integer orderId, long timeout) throws SoaException{

              String methodName = "getOrderForWx";
              getOrderForWx_args getOrderForWx_args = new getOrderForWx_args();
              getOrderForWx_args.setOrderId(orderId);
                

              CompletableFuture<getOrderForWx_result> response = (CompletableFuture<getOrderForWx_result>) pool.sendAsync(serviceName,version,"getOrderForWx",getOrderForWx_args, new GetOrderForWx_argsSerializer(), new GetOrderForWx_resultSerializer(),timeout);

              
                  
                      return response.thenApply((getOrderForWx_result result )->  result.getSuccess());
                    
                
            }
            
          

        
          
            /**
            * 

     ### 微信回调处理方法
     #### 业务描述
     微信回调处理方法

     #### 接口依赖

     #### 边界异常说明
     无

     #### 输入

     #### 前置检查

     ####  权限检查

     ####  逻辑处理


     #### 数据库变更

     ####  事务处理


     ####  输出
     1. 微信回调的XML字符串

            **/
            
              public CompletableFuture<String> payNotifyForWx(String wxNotifyString, long timeout) throws SoaException{

              String methodName = "payNotifyForWx";
              payNotifyForWx_args payNotifyForWx_args = new payNotifyForWx_args();
              payNotifyForWx_args.setWxNotifyString(wxNotifyString);
                

              CompletableFuture<payNotifyForWx_result> response = (CompletableFuture<payNotifyForWx_result>) pool.sendAsync(serviceName,version,"payNotifyForWx",payNotifyForWx_args, new PayNotifyForWx_argsSerializer(), new PayNotifyForWx_resultSerializer(),timeout);

              
                  
                      return response.thenApply((payNotifyForWx_result result )->  result.getSuccess());
                    
                
            }
            
          

        
          
            /**
            * 

     ### 获取订单的支付宝支付字符串
     #### 业务描述
     获取订单的支付宝支付字符串

     #### 接口依赖

     #### 边界异常说明
     无

     #### 输入

     #### 前置检查

     ####  权限检查

     ####  逻辑处理


     #### 数据库变更

     ####  事务处理


     ####  输出
     1. 支付字符串

            **/
            
              public CompletableFuture<String> getOrderForAlipay(Integer orderId, long timeout) throws SoaException{

              String methodName = "getOrderForAlipay";
              getOrderForAlipay_args getOrderForAlipay_args = new getOrderForAlipay_args();
              getOrderForAlipay_args.setOrderId(orderId);
                

              CompletableFuture<getOrderForAlipay_result> response = (CompletableFuture<getOrderForAlipay_result>) pool.sendAsync(serviceName,version,"getOrderForAlipay",getOrderForAlipay_args, new GetOrderForAlipay_argsSerializer(), new GetOrderForAlipay_resultSerializer(),timeout);

              
                  
                      return response.thenApply((getOrderForAlipay_result result )->  result.getSuccess());
                    
                
            }
            
          

        
          
            /**
            * 

     ### 支付宝回调处理方法
     #### 业务描述
     支付宝回调处理方法

     #### 接口依赖

     #### 边界异常说明
     无

     #### 输入

     #### 前置检查

     ####  权限检查

     ####  逻辑处理


     #### 数据库变更

     ####  事务处理


     ####  输出
     1. 支付宝回调的字符串

            **/
            
              public CompletableFuture<String> payNotifyForAlipay(java.util.Map<String, String> params, long timeout) throws SoaException{

              String methodName = "payNotifyForAlipay";
              payNotifyForAlipay_args payNotifyForAlipay_args = new payNotifyForAlipay_args();
              payNotifyForAlipay_args.setParams(params);
                

              CompletableFuture<payNotifyForAlipay_result> response = (CompletableFuture<payNotifyForAlipay_result>) pool.sendAsync(serviceName,version,"payNotifyForAlipay",payNotifyForAlipay_args, new PayNotifyForAlipay_argsSerializer(), new PayNotifyForAlipay_resultSerializer(),timeout);

              
                  
                      return response.thenApply((payNotifyForAlipay_result result )->  result.getSuccess());
                    
                
            }
            
          

        
          
            /**
            * 

    ### 结束诊断会话
    #### 业务描述
     结束诊断会话，把订单状态修改为诊断结束
    #### 接口依赖

    #### 边界异常说明
    无

    #### 输入

    #### 前置检查


    ####  权限检查

    ####  逻辑处理


    #### 数据库变更

    ####  事务处理

    ####  输出


            **/
            
              public CompletableFuture<Void> diagnoseFinish(com.isuwang.dapeng.json.demo.domain.DiagnoseFinishRequest request, long timeout) throws SoaException{

              String methodName = "diagnoseFinish";
              diagnoseFinish_args diagnoseFinish_args = new diagnoseFinish_args();
              diagnoseFinish_args.setRequest(request);
                

              CompletableFuture<diagnoseFinish_result> response = (CompletableFuture<diagnoseFinish_result>) pool.sendAsync(serviceName,version,"diagnoseFinish",diagnoseFinish_args, new DiagnoseFinish_argsSerializer(), new DiagnoseFinish_resultSerializer(),timeout);

              
                  return response.thenApply((diagnoseFinish_result result )->  null);
                
            }
            
          

        
          
            /**
            * 

    ### 重做异常单
    #### 业务描述
     1、因排班问题或者是诊断是通话不顺畅需要重约时间再会诊

    #### 接口依赖

    #### 边界异常说明
    无

    #### 输入

    #### 前置检查
     1、需要已支付的预约订单才能购重新预约

    ####  权限检查

    ####  逻辑处理
     1、重新预约的订单直接跳过支付流程到等待就诊状态（但保留支付类型和金额信息），并且关联原订单(parent_id)
     2、原订单状态置为 12:异常取消(exception_cancel)

    #### 数据库变更

    ####  事务处理

    ####  输出


            **/
            
              public CompletableFuture<com.isuwang.dapeng.json.demo.domain.OrderItem> redoExceptionOrder(com.isuwang.dapeng.json.demo.domain.RedoExceptionOrderRequest request, long timeout) throws SoaException{

              String methodName = "redoExceptionOrder";
              redoExceptionOrder_args redoExceptionOrder_args = new redoExceptionOrder_args();
              redoExceptionOrder_args.setRequest(request);
                

              CompletableFuture<redoExceptionOrder_result> response = (CompletableFuture<redoExceptionOrder_result>) pool.sendAsync(serviceName,version,"redoExceptionOrder",redoExceptionOrder_args, new RedoExceptionOrder_argsSerializer(), new RedoExceptionOrder_resultSerializer(),timeout);

              
                  
                      return response.thenApply((redoExceptionOrder_result result )->  result.getSuccess());
                    
                
            }
            
          

        
          
            /**
            * 

    ### 添加线下患者
    #### 业务描述
     添加线下患者
    #### 接口依赖

    #### 边界异常说明
    无

    #### 输入

    #### 前置检查


    ####  权限检查

    ####  逻辑处理


    #### 数据库变更

    ####  事务处理

    ####  输出


            **/
            
              public CompletableFuture<Integer> createOfflinePatient(com.isuwang.dapeng.json.demo.domain.CreateOfflinePatientRequest request, long timeout) throws SoaException{

              String methodName = "createOfflinePatient";
              createOfflinePatient_args createOfflinePatient_args = new createOfflinePatient_args();
              createOfflinePatient_args.setRequest(request);
                

              CompletableFuture<createOfflinePatient_result> response = (CompletableFuture<createOfflinePatient_result>) pool.sendAsync(serviceName,version,"createOfflinePatient",createOfflinePatient_args, new CreateOfflinePatient_argsSerializer(), new CreateOfflinePatient_resultSerializer(),timeout);

              
                  
                      return response.thenApply((createOfflinePatient_result result )->  result.getSuccess());
                    
                
            }
            
          

        
          
            /**
            * 

    ### 获取线下患者信息
    #### 业务描述
     获取线下患者信息
    #### 接口依赖

    #### 边界异常说明
    无

    #### 输入
        1. id 或 手机号码 二选一

    #### 前置检查


    ####  权限检查

    ####  逻辑处理


    #### 数据库变更

    ####  事务处理

    ####  输出
       1. 线下患者信息

            **/
            
              public CompletableFuture<com.isuwang.dapeng.json.demo.domain.OfflinePatientResponse> getOfflinePatient(com.isuwang.dapeng.json.demo.domain.GetOfflinePatientRequest request, long timeout) throws SoaException{

              String methodName = "getOfflinePatient";
              getOfflinePatient_args getOfflinePatient_args = new getOfflinePatient_args();
              getOfflinePatient_args.setRequest(request);
                

              CompletableFuture<getOfflinePatient_result> response = (CompletableFuture<getOfflinePatient_result>) pool.sendAsync(serviceName,version,"getOfflinePatient",getOfflinePatient_args, new GetOfflinePatient_argsSerializer(), new GetOfflinePatient_resultSerializer(),timeout);

              
                  
                      return response.thenApply((getOfflinePatient_result result )->  result.getSuccess());
                    
                
            }
            
          

        
          
            /**
            * 

    ### 添加线下订单服务
    #### 业务描述
     添加线下订单服务
    #### 接口依赖

    #### 边界异常说明
    无

    #### 输入

    #### 前置检查


    ####  权限检查

    ####  逻辑处理


    #### 数据库变更

    ####  事务处理

    ####  输出


            **/
            
              public CompletableFuture<Integer> createOrderForOffline(com.isuwang.dapeng.json.demo.domain.CreateOrderForOffLineRequest request, long timeout) throws SoaException{

              String methodName = "createOrderForOffline";
              createOrderForOffline_args createOrderForOffline_args = new createOrderForOffline_args();
              createOrderForOffline_args.setRequest(request);
                

              CompletableFuture<createOrderForOffline_result> response = (CompletableFuture<createOrderForOffline_result>) pool.sendAsync(serviceName,version,"createOrderForOffline",createOrderForOffline_args, new CreateOrderForOffline_argsSerializer(), new CreateOrderForOffline_resultSerializer(),timeout);

              
                  
                      return response.thenApply((createOrderForOffline_result result )->  result.getSuccess());
                    
                
            }
            
          

        
          
            /**
            * 

   ### 编辑线下订单
   #### 业务描述
    编辑线下订单服务
   #### 接口依赖

   #### 边界异常说明
    无

   #### 输入

   #### 前置检查


   ####  权限检查

   ####  逻辑处理


   #### 数据库变更

   ####  事务处理

   ####  输出


            **/
            
              public CompletableFuture<Void> modifyOrderForOffline(com.isuwang.dapeng.json.demo.domain.ModifyOrderForOfflineRequest request, long timeout) throws SoaException{

              String methodName = "modifyOrderForOffline";
              modifyOrderForOffline_args modifyOrderForOffline_args = new modifyOrderForOffline_args();
              modifyOrderForOffline_args.setRequest(request);
                

              CompletableFuture<modifyOrderForOffline_result> response = (CompletableFuture<modifyOrderForOffline_result>) pool.sendAsync(serviceName,version,"modifyOrderForOffline",modifyOrderForOffline_args, new ModifyOrderForOffline_argsSerializer(), new ModifyOrderForOffline_resultSerializer(),timeout);

              
                  return response.thenApply((modifyOrderForOffline_result result )->  null);
                
            }
            
          

        
          
            /**
            * 

   ### 编辑线下订单状态
   #### 业务描述
    编辑线下订单状态的服务
   #### 接口依赖

   #### 边界异常说明
    无

   #### 输入

   #### 前置检查


   ####  权限检查

   ####  逻辑处理


   #### 数据库变更

   ####  事务处理

   ####  输出


            **/
            
              public CompletableFuture<Void> modifyOrderStatusForOffline(com.isuwang.dapeng.json.demo.domain.ModifyOrderStatusRequest request, long timeout) throws SoaException{

              String methodName = "modifyOrderStatusForOffline";
              modifyOrderStatusForOffline_args modifyOrderStatusForOffline_args = new modifyOrderStatusForOffline_args();
              modifyOrderStatusForOffline_args.setRequest(request);
                

              CompletableFuture<modifyOrderStatusForOffline_result> response = (CompletableFuture<modifyOrderStatusForOffline_result>) pool.sendAsync(serviceName,version,"modifyOrderStatusForOffline",modifyOrderStatusForOffline_args, new ModifyOrderStatusForOffline_argsSerializer(), new ModifyOrderStatusForOffline_resultSerializer(),timeout);

              
                  return response.thenApply((modifyOrderStatusForOffline_result result )->  null);
                
            }
            
          

        
          
            /**
            * 

### 患者端首页显示医生的相关推荐信息
#### 业务描述
查询患者端首页显示医生的相关推荐信息
#### 接口依赖

#### 边界异常说明
无

#### 输入

#### 前置检查


####  权限检查

####  逻辑处理


#### 数据库变更

####  事务处理

####  输出


            **/
            
              public CompletableFuture<com.isuwang.dapeng.json.demo.domain.PatientHomePageInfoResponse> getPatientHomePageInfo(com.isuwang.dapeng.json.demo.domain.PatientHomePageInfoRequest request, long timeout) throws SoaException{

              String methodName = "getPatientHomePageInfo";
              getPatientHomePageInfo_args getPatientHomePageInfo_args = new getPatientHomePageInfo_args();
              getPatientHomePageInfo_args.setRequest(request);
                

              CompletableFuture<getPatientHomePageInfo_result> response = (CompletableFuture<getPatientHomePageInfo_result>) pool.sendAsync(serviceName,version,"getPatientHomePageInfo",getPatientHomePageInfo_args, new GetPatientHomePageInfo_argsSerializer(), new GetPatientHomePageInfo_resultSerializer(),timeout);

              
                  
                      return response.thenApply((getPatientHomePageInfo_result result )->  result.getSuccess());
                    
                
            }
            
          

        
          
            /**
            * 

### 患者端首页显示滚动通知信息
#### 业务描述
查询患者端首页显示滚动通知信息
#### 接口依赖
#### 边界异常说明
无
#### 输入
#### 前置检查
####  权限检查
####  逻辑处理
#### 数据库变更
####  事务处理
####  输出


            **/
            
              public CompletableFuture<com.isuwang.dapeng.json.demo.domain.PatientHomePageSliderNoticeResponse> getPatientHomePageSliderNotice(com.isuwang.dapeng.json.demo.domain.PatientHomePageSliderNoticeRequest request, long timeout) throws SoaException{

              String methodName = "getPatientHomePageSliderNotice";
              getPatientHomePageSliderNotice_args getPatientHomePageSliderNotice_args = new getPatientHomePageSliderNotice_args();
              getPatientHomePageSliderNotice_args.setRequest(request);
                

              CompletableFuture<getPatientHomePageSliderNotice_result> response = (CompletableFuture<getPatientHomePageSliderNotice_result>) pool.sendAsync(serviceName,version,"getPatientHomePageSliderNotice",getPatientHomePageSliderNotice_args, new GetPatientHomePageSliderNotice_argsSerializer(), new GetPatientHomePageSliderNotice_resultSerializer(),timeout);

              
                  
                      return response.thenApply((getPatientHomePageSliderNotice_result result )->  result.getSuccess());
                    
                
            }
            
          

        
          
            /**
            * 

### 保存患者推荐信息
#### 业务描述
  保存患者症状
#### 接口依赖
#### 边界异常说明
#### 输入

#### 前置检查

#### 权限检查
#### 逻辑处理

#### 数据变更
   1.

#### 事务处理
#### 输出
   1.void

            **/
            
              public CompletableFuture<Void> saveRecommends(com.isuwang.dapeng.json.demo.domain.SaveRecommendsRequest request, long timeout) throws SoaException{

              String methodName = "saveRecommends";
              saveRecommends_args saveRecommends_args = new saveRecommends_args();
              saveRecommends_args.setRequest(request);
                

              CompletableFuture<saveRecommends_result> response = (CompletableFuture<saveRecommends_result>) pool.sendAsync(serviceName,version,"saveRecommends",saveRecommends_args, new SaveRecommends_argsSerializer(), new SaveRecommends_resultSerializer(),timeout);

              
                  return response.thenApply((saveRecommends_result result )->  null);
                
            }
            
          

        
          
            /**
            * 

### 查询患者推荐信息
#### 业务描述
  保存患者症状
#### 接口依赖
#### 边界异常说明
#### 输入

#### 前置检查

#### 权限检查
#### 逻辑处理

#### 数据变更
   1.

#### 事务处理
#### 输出
   1.void

            **/
            
              public CompletableFuture<com.isuwang.dapeng.json.demo.domain.ListRecommendsRespone> listRecommends(com.isuwang.dapeng.json.demo.domain.ListRecommendsRequest request, long timeout) throws SoaException{

              String methodName = "listRecommends";
              listRecommends_args listRecommends_args = new listRecommends_args();
              listRecommends_args.setRequest(request);
                

              CompletableFuture<listRecommends_result> response = (CompletableFuture<listRecommends_result>) pool.sendAsync(serviceName,version,"listRecommends",listRecommends_args, new ListRecommends_argsSerializer(), new ListRecommends_resultSerializer(),timeout);

              
                  
                      return response.thenApply((listRecommends_result result )->  result.getSuccess());
                    
                
            }
            
          

        
          
            /**
            * 

    ### 查询文章阅读数量
    #### 业务描述
      查询文章阅读数量
    #### 接口依赖
    #### 边界异常说明
    #### 输入
        articleId
    #### 前置检查

    #### 权限检查
    #### 逻辑处理

    #### 数据变更
       1.

    #### 事务处理
    #### 输出
       1.文章阅读数量

            **/
            
              public CompletableFuture<Integer> getArticleReadership(Integer articleId, long timeout) throws SoaException{

              String methodName = "getArticleReadership";
              getArticleReadership_args getArticleReadership_args = new getArticleReadership_args();
              getArticleReadership_args.setArticleId(articleId);
                

              CompletableFuture<getArticleReadership_result> response = (CompletableFuture<getArticleReadership_result>) pool.sendAsync(serviceName,version,"getArticleReadership",getArticleReadership_args, new GetArticleReadership_argsSerializer(), new GetArticleReadership_resultSerializer(),timeout);

              
                  
                      return response.thenApply((getArticleReadership_result result )->  result.getSuccess());
                    
                
            }
            
          

        
          
            /**
            * 

    ### 阅读文章并返回阅读次数
    #### 业务描述
    阅读文章，文章阅读书+1
    #### 接口依赖
    #### 边界异常说明
    #### 输入
    articleId
    #### 前置检查

    #### 权限检查
    #### 逻辑处理

    #### 数据变更
    1.

    #### 事务处理
    #### 输出
    1.文章阅读数量

            **/
            
              public CompletableFuture<Integer> readArticle(Integer articleId, long timeout) throws SoaException{

              String methodName = "readArticle";
              readArticle_args readArticle_args = new readArticle_args();
              readArticle_args.setArticleId(articleId);
                

              CompletableFuture<readArticle_result> response = (CompletableFuture<readArticle_result>) pool.sendAsync(serviceName,version,"readArticle",readArticle_args, new ReadArticle_argsSerializer(), new ReadArticle_resultSerializer(),timeout);

              
                  
                      return response.thenApply((readArticle_result result )->  result.getSuccess());
                    
                
            }
            
          

        
          
            /**
            * 

    ### 价格规则表列表查询
    #### 业务描述
   价格规则表列表
    #### 接口依赖
    #### 边界异常说明
    #### 输入
    articleId
    #### 前置检查

    #### 权限检查
    #### 逻辑处理

    #### 数据变更
    1.

    #### 事务处理
    #### 输出
    1.价格规则表列表

            **/
            
              public CompletableFuture<com.isuwang.dapeng.json.demo.domain.ListPriceRuleResponse> listPriceRule(com.isuwang.dapeng.json.demo.domain.ListPriceRuleRequest request, long timeout) throws SoaException{

              String methodName = "listPriceRule";
              listPriceRule_args listPriceRule_args = new listPriceRule_args();
              listPriceRule_args.setRequest(request);
                

              CompletableFuture<listPriceRule_result> response = (CompletableFuture<listPriceRule_result>) pool.sendAsync(serviceName,version,"listPriceRule",listPriceRule_args, new ListPriceRule_argsSerializer(), new ListPriceRule_resultSerializer(),timeout);

              
                  
                      return response.thenApply((listPriceRule_result result )->  result.getSuccess());
                    
                
            }
            
          

        
          
            /**
            * 

    ### 价格规则表修改
    #### 业务描述
   价格规则表列表
    #### 接口依赖
    #### 边界异常说明
    #### 输入
    articleId
    #### 前置检查

    #### 权限检查
    #### 逻辑处理

    #### 数据变更
    1.

    #### 事务处理
    #### 输出
    void

            **/
            
              public CompletableFuture<Void> modifyPriceRule(com.isuwang.dapeng.json.demo.domain.TPriceRuleDTO request, long timeout) throws SoaException{

              String methodName = "modifyPriceRule";
              modifyPriceRule_args modifyPriceRule_args = new modifyPriceRule_args();
              modifyPriceRule_args.setRequest(request);
                

              CompletableFuture<modifyPriceRule_result> response = (CompletableFuture<modifyPriceRule_result>) pool.sendAsync(serviceName,version,"modifyPriceRule",modifyPriceRule_args, new ModifyPriceRule_argsSerializer(), new ModifyPriceRule_resultSerializer(),timeout);

              
                  return response.thenApply((modifyPriceRule_result result )->  null);
                
            }
            
          

        
          
            /**
            * 

    ### 价格规则表添加
    #### 业务描述
    添加价格规则表
    #### 接口依赖
    #### 边界异常说明
    #### 输入
    articleId
    #### 前置检查

    #### 权限检查
    #### 逻辑处理

    #### 数据变更
    1.

    #### 事务处理
    #### 输出
    void

            **/
            
              public CompletableFuture<Void> savePriceRule(com.isuwang.dapeng.json.demo.domain.TPriceRuleDTO request, long timeout) throws SoaException{

              String methodName = "savePriceRule";
              savePriceRule_args savePriceRule_args = new savePriceRule_args();
              savePriceRule_args.setRequest(request);
                

              CompletableFuture<savePriceRule_result> response = (CompletableFuture<savePriceRule_result>) pool.sendAsync(serviceName,version,"savePriceRule",savePriceRule_args, new SavePriceRule_argsSerializer(), new SavePriceRule_resultSerializer(),timeout);

              
                  return response.thenApply((savePriceRule_result result )->  null);
                
            }
            
          

        
          
            /**
            * 

    ### 查询医生的诊疗套餐价格
    #### 业务描述
    查询医生的诊疗套餐价格，如果已购买了图文咨询套餐则返回已购买标志
    #### 接口依赖
    #### 边界异常说明
    #### 输入

    #### 前置检查

    #### 权限检查
    #### 逻辑处理

    #### 数据变更
    1.

    #### 事务处理
    #### 输出
    void

            **/
            
              public CompletableFuture<java.util.List<com.isuwang.dapeng.json.demo.domain.PackageChargeItem>> listPackageChargesByDoctorId(Integer doctorId, long timeout) throws SoaException{

              String methodName = "listPackageChargesByDoctorId";
              listPackageChargesByDoctorId_args listPackageChargesByDoctorId_args = new listPackageChargesByDoctorId_args();
              listPackageChargesByDoctorId_args.setDoctorId(doctorId);
                

              CompletableFuture<listPackageChargesByDoctorId_result> response = (CompletableFuture<listPackageChargesByDoctorId_result>) pool.sendAsync(serviceName,version,"listPackageChargesByDoctorId",listPackageChargesByDoctorId_args, new ListPackageChargesByDoctorId_argsSerializer(), new ListPackageChargesByDoctorId_resultSerializer(),timeout);

              
                  
                      return response.thenApply((listPackageChargesByDoctorId_result result )->  result.getSuccess());
                    
                
            }
            
          

        
          
            /**
            * 

    ### 查询医生的诊疗套餐
    #### 业务描述
    #### 接口依赖
    #### 边界异常说明
    #### 输入

    #### 前置检查

    #### 权限检查
    #### 逻辑处理

    #### 数据变更
    1.

    #### 事务处理
    #### 输出
    void

            **/
            
              public CompletableFuture<com.isuwang.dapeng.json.demo.domain.GetPackageInfoResponse> getPackageInfo(com.isuwang.dapeng.json.demo.domain.GetPackageInfoRequest request, long timeout) throws SoaException{

              String methodName = "getPackageInfo";
              getPackageInfo_args getPackageInfo_args = new getPackageInfo_args();
              getPackageInfo_args.setRequest(request);
                

              CompletableFuture<getPackageInfo_result> response = (CompletableFuture<getPackageInfo_result>) pool.sendAsync(serviceName,version,"getPackageInfo",getPackageInfo_args, new GetPackageInfo_argsSerializer(), new GetPackageInfo_resultSerializer(),timeout);

              
                  
                      return response.thenApply((getPackageInfo_result result )->  result.getSuccess());
                    
                
            }
            
          

        
          
            /**
            * 

        ### 购买诊疗套餐
        #### 业务描述
        #### 接口依赖
        #### 边界异常说明
        #### 输入

        #### 前置检查

        #### 权限检查
        #### 逻辑处理

        #### 数据变更
        1.

        #### 事务处理
        #### 输出
        void

            **/
            
              public CompletableFuture<com.isuwang.dapeng.json.demo.domain.OrderItem> buyPackage(com.isuwang.dapeng.json.demo.domain.BuyPackageRequest request, long timeout) throws SoaException{

              String methodName = "buyPackage";
              buyPackage_args buyPackage_args = new buyPackage_args();
              buyPackage_args.setRequest(request);
                

              CompletableFuture<buyPackage_result> response = (CompletableFuture<buyPackage_result>) pool.sendAsync(serviceName,version,"buyPackage",buyPackage_args, new BuyPackage_argsSerializer(), new BuyPackage_resultSerializer(),timeout);

              
                  
                      return response.thenApply((buyPackage_result result )->  result.getSuccess());
                    
                
            }
            
          

        
          
            /**
            * 
            **/
            
              public CompletableFuture<com.isuwang.dapeng.json.demo.domain.ListTextPackOrderForDoctorResponse> listTextPackOrderForDoctor(com.isuwang.dapeng.json.demo.domain.ListTextPackOrderForDoctorRequest request, long timeout) throws SoaException{

              String methodName = "listTextPackOrderForDoctor";
              listTextPackOrderForDoctor_args listTextPackOrderForDoctor_args = new listTextPackOrderForDoctor_args();
              listTextPackOrderForDoctor_args.setRequest(request);
                

              CompletableFuture<listTextPackOrderForDoctor_result> response = (CompletableFuture<listTextPackOrderForDoctor_result>) pool.sendAsync(serviceName,version,"listTextPackOrderForDoctor",listTextPackOrderForDoctor_args, new ListTextPackOrderForDoctor_argsSerializer(), new ListTextPackOrderForDoctor_resultSerializer(),timeout);

              
                  
                      return response.thenApply((listTextPackOrderForDoctor_result result )->  result.getSuccess());
                    
                
            }
            
          

        
          
            /**
            * 

        ### 查询订购了医生的图文咨询包月服务的患者数量
        #### 业务描述
           查询关注记录
        #### 接口依赖
        #### 边界异常说明
        #### 输入

        #### 前置检查

        #### 权限检查
         仅允许医生进行该操作
        #### 逻辑处理

        #### 数据变更
            1.

        #### 事务处理
        #### 输出


            **/
            
              public CompletableFuture<com.isuwang.dapeng.json.demo.domain.CountBuyTextPackPatientsResponse> countBuyTextPackPatients(Integer doctorId, long timeout) throws SoaException{

              String methodName = "countBuyTextPackPatients";
              countBuyTextPackPatients_args countBuyTextPackPatients_args = new countBuyTextPackPatients_args();
              countBuyTextPackPatients_args.setDoctorId(doctorId);
                

              CompletableFuture<countBuyTextPackPatients_result> response = (CompletableFuture<countBuyTextPackPatients_result>) pool.sendAsync(serviceName,version,"countBuyTextPackPatients",countBuyTextPackPatients_args, new CountBuyTextPackPatients_argsSerializer(), new CountBuyTextPackPatients_resultSerializer(),timeout);

              
                  
                      return response.thenApply((countBuyTextPackPatients_result result )->  result.getSuccess());
                    
                
            }
            
          

        
          
            /**
            * 

    ### 判断是否可以聊天对话
    #### 业务描述
       判断医生和患者是否可以聊天对话
       1、医生请求时，如果可以对话，返回可以对话时间以及患者信息
       2、患者请求时，如果可以对话，返回可以对话时间以及医生信息
    #### 接口依赖
    #### 边界异常说明
    #### 输入

    #### 前置检查

    #### 权限检查
     登陆的医生或者患者
    #### 逻辑处理

    #### 数据变更
        1.

    #### 事务处理
    #### 输出


            **/
            
              public CompletableFuture<com.isuwang.dapeng.json.demo.domain.JudgeChatAbleResponse> judgeChatAble(com.isuwang.dapeng.json.demo.domain.JudgeChatAbleRequest request, long timeout) throws SoaException{

              String methodName = "judgeChatAble";
              judgeChatAble_args judgeChatAble_args = new judgeChatAble_args();
              judgeChatAble_args.setRequest(request);
                

              CompletableFuture<judgeChatAble_result> response = (CompletableFuture<judgeChatAble_result>) pool.sendAsync(serviceName,version,"judgeChatAble",judgeChatAble_args, new JudgeChatAble_argsSerializer(), new JudgeChatAble_resultSerializer(),timeout);

              
                  
                      return response.thenApply((judgeChatAble_result result )->  result.getSuccess());
                    
                
            }
            
          

        
          
            /**
            * 

         ### 发放优惠券
         #### 业务描述
         给患者发放优惠券
         #### 接口依赖
         #### 边界异常说明
         #### 输入

         #### 前置检查

         #### 权限检查
         #### 逻辑处理

         #### 数据变更
         1.

         #### 事务处理
         #### 输出
         1.

            **/
            
              public CompletableFuture<Void> giveCoupon(com.isuwang.dapeng.json.demo.domain.GiveCouponRequest request, long timeout) throws SoaException{

              String methodName = "giveCoupon";
              giveCoupon_args giveCoupon_args = new giveCoupon_args();
              giveCoupon_args.setRequest(request);
                

              CompletableFuture<giveCoupon_result> response = (CompletableFuture<giveCoupon_result>) pool.sendAsync(serviceName,version,"giveCoupon",giveCoupon_args, new GiveCoupon_argsSerializer(), new GiveCoupon_resultSerializer(),timeout);

              
                  return response.thenApply((giveCoupon_result result )->  null);
                
            }
            
          

        
          
            /**
            * 

         ### 批量发放优惠券
         #### 业务描述
         批量给患者发放优惠券
         #### 接口依赖
         #### 边界异常说明
         #### 输入

         #### 前置检查

         #### 权限检查
         #### 逻辑处理

         #### 数据变更
         1.

         #### 事务处理
         #### 输出
         1.

            **/
            
              public CompletableFuture<Void> batchGiveCoupon(java.util.List<com.isuwang.dapeng.json.demo.domain.GiveCouponRequest> request, long timeout) throws SoaException{

              String methodName = "batchGiveCoupon";
              batchGiveCoupon_args batchGiveCoupon_args = new batchGiveCoupon_args();
              batchGiveCoupon_args.setRequest(request);
                

              CompletableFuture<batchGiveCoupon_result> response = (CompletableFuture<batchGiveCoupon_result>) pool.sendAsync(serviceName,version,"batchGiveCoupon",batchGiveCoupon_args, new BatchGiveCoupon_argsSerializer(), new BatchGiveCoupon_resultSerializer(),timeout);

              
                  return response.thenApply((batchGiveCoupon_result result )->  null);
                
            }
            
          

        
          
            /**
            * 

          ### 查询客户可使用的优惠卷
          #### 业务描述
          查询客户可使用的优惠卷
          #### 接口依赖
          #### 边界异常说明
          #### 输入

          #### 前置检查

          #### 权限检查
          #### 逻辑处理

          #### 数据变更
          1.

          #### 事务处理
          #### 输出
          1.

            **/
            
              public CompletableFuture<java.util.List<com.isuwang.dapeng.json.demo.domain.TCouponDTO>> listAvaliableCoupons(com.isuwang.dapeng.json.demo.domain.ListAvaliableCouponsRequest request, long timeout) throws SoaException{

              String methodName = "listAvaliableCoupons";
              listAvaliableCoupons_args listAvaliableCoupons_args = new listAvaliableCoupons_args();
              listAvaliableCoupons_args.setRequest(request);
                

              CompletableFuture<listAvaliableCoupons_result> response = (CompletableFuture<listAvaliableCoupons_result>) pool.sendAsync(serviceName,version,"listAvaliableCoupons",listAvaliableCoupons_args, new ListAvaliableCoupons_argsSerializer(), new ListAvaliableCoupons_resultSerializer(),timeout);

              
                  
                      return response.thenApply((listAvaliableCoupons_result result )->  result.getSuccess());
                    
                
            }
            
          

        
          
            /**
            * 

    ### 查询最新的知心陪护订单
    #### 业务描述
       查询最新的知心陪护订单

    #### 接口依赖
    #### 边界异常说明
    #### 输入
       输入用户Id

    #### 前置检查

    #### 权限检查
     登陆的医生或者患者
    #### 逻辑处理

    #### 数据变更
        1.

    #### 事务处理
    #### 输出


            **/
            
              public CompletableFuture<java.util.List<com.isuwang.dapeng.json.demo.domain.OrderItem>> findAccompanyOrderByPatientId(Integer patientId, long timeout) throws SoaException{

              String methodName = "findAccompanyOrderByPatientId";
              findAccompanyOrderByPatientId_args findAccompanyOrderByPatientId_args = new findAccompanyOrderByPatientId_args();
              findAccompanyOrderByPatientId_args.setPatientId(patientId);
                

              CompletableFuture<findAccompanyOrderByPatientId_result> response = (CompletableFuture<findAccompanyOrderByPatientId_result>) pool.sendAsync(serviceName,version,"findAccompanyOrderByPatientId",findAccompanyOrderByPatientId_args, new FindAccompanyOrderByPatientId_argsSerializer(), new FindAccompanyOrderByPatientId_resultSerializer(),timeout);

              
                  
                      return response.thenApply((findAccompanyOrderByPatientId_result result )->  result.getSuccess());
                    
                
            }
            
          

        
          
            /**
            * 

    ### 创建知心陪护订单
    #### 业务描述
       创建的知心陪护订单

    #### 接口依赖
    #### 边界异常说明
    #### 输入
       输入用户Id

    #### 前置检查

    #### 权限检查
     登陆的医生或者患者
    #### 逻辑处理

    #### 数据变更
        1.

    #### 事务处理
    #### 输出


            **/
            
              public CompletableFuture<com.isuwang.dapeng.json.demo.domain.OrderItem> createAccompanyOrder(com.isuwang.dapeng.json.demo.domain.CreateAccompanyOrderRequest request, long timeout) throws SoaException{

              String methodName = "createAccompanyOrder";
              createAccompanyOrder_args createAccompanyOrder_args = new createAccompanyOrder_args();
              createAccompanyOrder_args.setRequest(request);
                

              CompletableFuture<createAccompanyOrder_result> response = (CompletableFuture<createAccompanyOrder_result>) pool.sendAsync(serviceName,version,"createAccompanyOrder",createAccompanyOrder_args, new CreateAccompanyOrder_argsSerializer(), new CreateAccompanyOrder_resultSerializer(),timeout);

              
                  
                      return response.thenApply((createAccompanyOrder_result result )->  result.getSuccess());
                    
                
            }
            
          

        
          
            /**
            * 

    ### 获取知心陪护订单的参数
    #### 业务描述
       下单页面，获取知心陪护订单的参数

    #### 接口依赖
    #### 边界异常说明
    #### 输入


    #### 前置检查

    #### 权限检查

    #### 逻辑处理

    #### 数据变更

    #### 事务处理
    #### 输出
        知心陪护下单参数


            **/
            
              public CompletableFuture<java.util.List<com.isuwang.dapeng.json.demo.domain.AccompanyOrderParam>> getAccompanyOrderParams(long timeout) throws SoaException{

              String methodName = "getAccompanyOrderParams";
              getAccompanyOrderParams_args getAccompanyOrderParams_args = new getAccompanyOrderParams_args();
              

              CompletableFuture<getAccompanyOrderParams_result> response = (CompletableFuture<getAccompanyOrderParams_result>) pool.sendAsync(serviceName,version,"getAccompanyOrderParams",getAccompanyOrderParams_args, new GetAccompanyOrderParams_argsSerializer(), new GetAccompanyOrderParams_resultSerializer(),timeout);

              
                  
                      return response.thenApply((getAccompanyOrderParams_result result )->  result.getSuccess());
                    
                
            }
            
          

        
          
            /**
            * 

        ### 获取心理保健套餐（优惠券）订单的参数
        #### 业务描述
           下单页面，获取心理保健套餐（优惠券）订单的参数

        #### 接口依赖
        #### 边界异常说明
        #### 输入


        #### 前置检查

        #### 权限检查

        #### 逻辑处理

        #### 数据变更

        #### 事务处理
        #### 输出
           心理保健套餐（优惠券）下单参数


            **/
            
              public CompletableFuture<com.isuwang.dapeng.json.demo.domain.CouponOrderParams> getCouponOrderParams(long timeout) throws SoaException{

              String methodName = "getCouponOrderParams";
              getCouponOrderParams_args getCouponOrderParams_args = new getCouponOrderParams_args();
              

              CompletableFuture<getCouponOrderParams_result> response = (CompletableFuture<getCouponOrderParams_result>) pool.sendAsync(serviceName,version,"getCouponOrderParams",getCouponOrderParams_args, new GetCouponOrderParams_argsSerializer(), new GetCouponOrderParams_resultSerializer(),timeout);

              
                  
                      return response.thenApply((getCouponOrderParams_result result )->  result.getSuccess());
                    
                
            }
            
          

        
          
            /**
            * 

    ### 获取知心陪护最新首页数据
    #### 业务描述
       获取知心陪护最新首页数据


    #### 接口依赖
    #### 边界异常说明
    #### 输入


    #### 前置检查

    #### 权限检查

    #### 逻辑处理

    #### 数据变更

    #### 事务处理
    #### 输出
       1.当前客服信息
       2.陪护结束日期
       3.消息数
       4.预约数

            **/
            
              public CompletableFuture<com.isuwang.dapeng.json.demo.domain.GetPatientCaregiverHomePageInfoResponse> getPatientCaregiverHomePageInfo(Integer patientId, long timeout) throws SoaException{

              String methodName = "getPatientCaregiverHomePageInfo";
              getPatientCaregiverHomePageInfo_args getPatientCaregiverHomePageInfo_args = new getPatientCaregiverHomePageInfo_args();
              getPatientCaregiverHomePageInfo_args.setPatientId(patientId);
                

              CompletableFuture<getPatientCaregiverHomePageInfo_result> response = (CompletableFuture<getPatientCaregiverHomePageInfo_result>) pool.sendAsync(serviceName,version,"getPatientCaregiverHomePageInfo",getPatientCaregiverHomePageInfo_args, new GetPatientCaregiverHomePageInfo_argsSerializer(), new GetPatientCaregiverHomePageInfo_resultSerializer(),timeout);

              
                  
                      return response.thenApply((getPatientCaregiverHomePageInfo_result result )->  result.getSuccess());
                    
                
            }
            
          

        
          
            /**
            * 

    ### 体验码 体验陪护七天
    #### 业务描述
       体验码 体验陪护七天

    #### 接口依赖
    #### 边界异常说明
    #### 输入


    #### 前置检查

    #### 权限检查

    #### 逻辑处理

    #### 数据变更

    #### 事务处理
    #### 输出
        知心陪护订单详情


            **/
            
              public CompletableFuture<com.isuwang.dapeng.json.demo.domain.OrderItem> createAccompanyOrderByCode(String code, long timeout) throws SoaException{

              String methodName = "createAccompanyOrderByCode";
              createAccompanyOrderByCode_args createAccompanyOrderByCode_args = new createAccompanyOrderByCode_args();
              createAccompanyOrderByCode_args.setCode(code);
                

              CompletableFuture<createAccompanyOrderByCode_result> response = (CompletableFuture<createAccompanyOrderByCode_result>) pool.sendAsync(serviceName,version,"createAccompanyOrderByCode",createAccompanyOrderByCode_args, new CreateAccompanyOrderByCode_argsSerializer(), new CreateAccompanyOrderByCode_resultSerializer(),timeout);

              
                  
                      return response.thenApply((createAccompanyOrderByCode_result result )->  result.getSuccess());
                    
                
            }
            
          

        
          
            /**
            * 

### 治疗心理咨询师推荐
#### 业务描述
治疗心理咨询师推荐
 1、自动匹配一个最近可预约的咨询师
 2、如果用户以前预约过，优先配预约过的
 3、点击换一换，按咨询是最近可以预约时间依次替换
#### 接口依赖

#### 边界异常说明
无

#### 输入


#### 前置检查


####  权限检查

####  逻辑处理


#### 数据库变更

####  事务处理


####  输出
1. 可预约医生列表

            **/
            
              public CompletableFuture<com.isuwang.dapeng.json.demo.domain.AppointmentDoctorsResponse> recommendTreatDoctors(com.isuwang.dapeng.json.demo.domain.PageRequest pageRequest, long timeout) throws SoaException{

              String methodName = "recommendTreatDoctors";
              recommendTreatDoctors_args recommendTreatDoctors_args = new recommendTreatDoctors_args();
              recommendTreatDoctors_args.setPageRequest(pageRequest);
                

              CompletableFuture<recommendTreatDoctors_result> response = (CompletableFuture<recommendTreatDoctors_result>) pool.sendAsync(serviceName,version,"recommendTreatDoctors",recommendTreatDoctors_args, new RecommendTreatDoctors_argsSerializer(), new RecommendTreatDoctors_resultSerializer(),timeout);

              
                  
                      return response.thenApply((recommendTreatDoctors_result result )->  result.getSuccess());
                    
                
            }
            
          

        
          
            /**
            * 

    ### 创建体验码
    #### 业务描述
       创建体验码

    #### 接口依赖
    #### 边界异常说明
    #### 输入
        输入生成多少个体验码

    #### 前置检查

    #### 权限检查

    #### 逻辑处理
        遇到生成失败的，即体验码已存在的，忽略处理

    #### 数据变更

    #### 事务处理
    #### 输出
        成功生成多少个


            **/
            
              public CompletableFuture<Integer> createExperienceCoupon(Integer number, long timeout) throws SoaException{

              String methodName = "createExperienceCoupon";
              createExperienceCoupon_args createExperienceCoupon_args = new createExperienceCoupon_args();
              createExperienceCoupon_args.setNumber(number);
                

              CompletableFuture<createExperienceCoupon_result> response = (CompletableFuture<createExperienceCoupon_result>) pool.sendAsync(serviceName,version,"createExperienceCoupon",createExperienceCoupon_args, new CreateExperienceCoupon_argsSerializer(), new CreateExperienceCoupon_resultSerializer(),timeout);

              
                  
                      return response.thenApply((createExperienceCoupon_result result )->  result.getSuccess());
                    
                
            }
            
          

        
          
            /**
            * 

    ### 体验码列表
    #### 业务描述
       体验码列表

    #### 接口依赖
    #### 边界异常说明
    #### 输入

    #### 前置检查

    #### 权限检查

    #### 逻辑处理

    #### 数据变更

    #### 事务处理
    #### 输出
        list


            **/
            
              public CompletableFuture<com.isuwang.dapeng.json.demo.domain.ListExperienceCouponResponse> listExperienceCoupon(com.isuwang.dapeng.json.demo.domain.ListExperienceCouponRequest request, long timeout) throws SoaException{

              String methodName = "listExperienceCoupon";
              listExperienceCoupon_args listExperienceCoupon_args = new listExperienceCoupon_args();
              listExperienceCoupon_args.setRequest(request);
                

              CompletableFuture<listExperienceCoupon_result> response = (CompletableFuture<listExperienceCoupon_result>) pool.sendAsync(serviceName,version,"listExperienceCoupon",listExperienceCoupon_args, new ListExperienceCoupon_argsSerializer(), new ListExperienceCoupon_resultSerializer(),timeout);

              
                  
                      return response.thenApply((listExperienceCoupon_result result )->  result.getSuccess());
                    
                
            }
            
          

        

      /**
      * getServiceMetadata
      **/
      public String getServiceMetadata() throws SoaException {
        String methodName = "getServiceMetadata";
        getServiceMetadata_args getServiceMetadata_args = new getServiceMetadata_args();
        getServiceMetadata_result response = pool.send(serviceName,version,methodName,getServiceMetadata_args, new GetServiceMetadata_argsSerializer(), new GetServiceMetadata_resultSerializer());
        return response.getSuccess();
      }

    }
    