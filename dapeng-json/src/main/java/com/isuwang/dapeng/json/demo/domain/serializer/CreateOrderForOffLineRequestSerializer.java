 package com.isuwang.dapeng.json.demo.domain.serializer;
        import com.isuwang.dapeng.json.demo.domain.serializer.*;

        import com.isuwang.dapeng.core.*;
        import com.isuwang.org.apache.thrift.*;
        import com.isuwang.org.apache.thrift.protocol.*;

        import java.util.Optional;
        import java.util.concurrent.CompletableFuture;
        import java.util.concurrent.Future;

        /**
        * Autogenerated by Dapeng-Code-Generator (1.2.2)
        *
        * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
        *  @generated
        **/
        public class CreateOrderForOffLineRequestSerializer implements BeanSerializer<com.isuwang.dapeng.json.demo.domain.CreateOrderForOffLineRequest>{
        
      @Override
      public com.isuwang.dapeng.json.demo.domain.CreateOrderForOffLineRequest read(TProtocol iprot) throws TException{

      com.isuwang.dapeng.json.demo.domain.CreateOrderForOffLineRequest bean = new com.isuwang.dapeng.json.demo.domain.CreateOrderForOffLineRequest();
      com.isuwang.org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();

      while(true){
        schemeField = iprot.readFieldBegin();
        if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

        switch(schemeField.id){
          
              case 1:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.I32){
               int elem0 = iprot.readI32();
       bean.setDoctorId(elem0);
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 2:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.I32){
               int elem0 = iprot.readI32();
       bean.setOfflinePatientId(elem0);
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 3:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRING){
              String elem0 = iprot.readString();
       bean.setOfflinePatientPhone(elem0);
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 4:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRING){
              String elem0 = iprot.readString();
       bean.setOfflinePatientName(elem0);
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 5:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.I32){
              com.isuwang.dapeng.json.demo.enums.Gender elem0 = com.isuwang.dapeng.json.demo.enums.Gender.findByValue(iprot.readI32());
       bean.setOfflinePatientGender(elem0);
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 6:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.I32){
               int elem0 = iprot.readI32();
       bean.setOfflinePatientAge(elem0);
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 7:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRING){
              String elem0 = iprot.readString();
       bean.setPatientInformationContent(elem0);
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 8:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.I32){
               int elem0 = iprot.readI32();
       bean.setAppointmentId(elem0);
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 9:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRING){
              String elem0 = iprot.readString();
       bean.setRemark(Optional.of(elem0));
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 10:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.I32){
              com.isuwang.dapeng.json.demo.enums.TOrderStatus elem0 = com.isuwang.dapeng.json.demo.enums.TOrderStatus.findByValue(iprot.readI32());
       bean.setStatus(Optional.of(elem0));
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 11:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.I32){
              com.isuwang.dapeng.json.demo.enums.TOrderTherapyMode elem0 = com.isuwang.dapeng.json.demo.enums.TOrderTherapyMode.findByValue(iprot.readI32());
       bean.setTherapyMode(elem0);
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
          
            default:
            com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate(bean);
      return bean;
    }
    
      @Override
      public void write(com.isuwang.dapeng.json.demo.domain.CreateOrderForOffLineRequest bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("CreateOrderForOffLineRequest"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("doctorId", com.isuwang.org.apache.thrift.protocol.TType.I32, (short) 1));
            Integer elem0 = bean.getDoctorId();
            oprot.writeI32(elem0);
            
            oprot.writeFieldEnd();
          
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("offlinePatientId", com.isuwang.org.apache.thrift.protocol.TType.I32, (short) 2));
            Integer elem1 = bean.getOfflinePatientId();
            oprot.writeI32(elem1);
            
            oprot.writeFieldEnd();
          
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("offlinePatientPhone", com.isuwang.org.apache.thrift.protocol.TType.STRING, (short) 3));
            String elem2 = bean.getOfflinePatientPhone();
            oprot.writeString(elem2);
            
            oprot.writeFieldEnd();
          
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("offlinePatientName", com.isuwang.org.apache.thrift.protocol.TType.STRING, (short) 4));
            String elem3 = bean.getOfflinePatientName();
            oprot.writeString(elem3);
            
            oprot.writeFieldEnd();
          
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("offlinePatientGender", com.isuwang.org.apache.thrift.protocol.TType.I32, (short) 5));
            com.isuwang.dapeng.json.demo.enums.Gender elem4 = bean.getOfflinePatientGender();
            oprot.writeI32(elem4.getValue());
            
            oprot.writeFieldEnd();
          
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("offlinePatientAge", com.isuwang.org.apache.thrift.protocol.TType.I32, (short) 6));
            Integer elem5 = bean.getOfflinePatientAge();
            oprot.writeI32(elem5);
            
            oprot.writeFieldEnd();
          
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("patientInformationContent", com.isuwang.org.apache.thrift.protocol.TType.STRING, (short) 7));
            String elem6 = bean.getPatientInformationContent();
            oprot.writeString(elem6);
            
            oprot.writeFieldEnd();
          
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("appointmentId", com.isuwang.org.apache.thrift.protocol.TType.I32, (short) 8));
            Integer elem7 = bean.getAppointmentId();
            oprot.writeI32(elem7);
            
            oprot.writeFieldEnd();
          if(bean.getRemark().isPresent()){
              oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("remark", com.isuwang.org.apache.thrift.protocol.TType.STRING, (short) 9));
              String elem8 = bean.getRemark().get();
              oprot.writeString(elem8);
              
            }
            if(bean.getStatus().isPresent()){
              oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("status", com.isuwang.org.apache.thrift.protocol.TType.I32, (short) 10));
              com.isuwang.dapeng.json.demo.enums.TOrderStatus elem9 = bean.getStatus().get();
              oprot.writeI32(elem9.getValue());
              
            }
            
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("therapyMode", com.isuwang.org.apache.thrift.protocol.TType.I32, (short) 11));
            com.isuwang.dapeng.json.demo.enums.TOrderTherapyMode elem10 = bean.getTherapyMode();
            oprot.writeI32(elem10.getValue());
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(com.isuwang.dapeng.json.demo.domain.CreateOrderForOffLineRequest bean) throws TException{
      
              if(bean.getOfflinePatientPhone() == null)
              throw new SoaException(SoaBaseCode.NotNull, "offlinePatientPhone字段不允许为空");
            
              if(bean.getOfflinePatientName() == null)
              throw new SoaException(SoaBaseCode.NotNull, "offlinePatientName字段不允许为空");
            
              if(bean.getOfflinePatientGender() == null)
              throw new SoaException(SoaBaseCode.NotNull, "offlinePatientGender字段不允许为空");
            
              if(bean.getPatientInformationContent() == null)
              throw new SoaException(SoaBaseCode.NotNull, "patientInformationContent字段不允许为空");
            
              if(bean.getTherapyMode() == null)
              throw new SoaException(SoaBaseCode.NotNull, "therapyMode字段不允许为空");
            
    }
    
        @Override
        public String toString(com.isuwang.dapeng.json.demo.domain.CreateOrderForOffLineRequest bean)
        {return bean == null ? "null" : bean.toString();}
      }
      

      