package com.isuwang.dapeng.json.demo;
        import com.isuwang.dapeng.json.demo.domain.serializer.*;

        import com.isuwang.dapeng.core.*;
        import com.isuwang.org.apache.thrift.*;
        import com.isuwang.org.apache.thrift.protocol.*;

        import com.isuwang.dapeng.core.definition.SoaServiceDefinition;
        import com.isuwang.dapeng.core.definition.SoaFunctionDefinition;

        import java.io.BufferedReader;
        import java.io.InputStreamReader;

        import java.util.Optional;
        import java.util.concurrent.CompletableFuture;
        import java.util.concurrent.Future;

        import com.isuwang.dapeng.json.demo.service.OrderServiceAsync;
        /**
        * Autogenerated by Dapeng-Code-Generator (1.2.2)
        *
        * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
        *  @generated
        **/
        public class OrderServiceAsyncCodec {

        
            public static class batchAppointment_args {
            
                private com.isuwang.dapeng.json.demo.domain.BatchAppointmentRequest request;
                public com.isuwang.dapeng.json.demo.domain.BatchAppointmentRequest getRequest(){
                return this.request;
              }
                public void setRequest(com.isuwang.dapeng.json.demo.domain.BatchAppointmentRequest request){
                this.request = request;
              }
              

            @Override
            public String toString(){
              StringBuilder stringBuilder = new StringBuilder("{");
                
      stringBuilder.append("\"").append("request").append("\":").append(this.request == null ? "null" : this.request.toString()).append(",");
    
                if(stringBuilder.lastIndexOf(",") > 0)
                stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                stringBuilder.append("}");

              return stringBuilder.toString();
            }

          }

            public static class batchAppointment_result {

            
                  @Override
                  public String toString(){
                  return "{}";
                }
                
          }

            public static class BatchAppointment_argsSerializer implements BeanSerializer<batchAppointment_args>{
            
      @Override
      public batchAppointment_args read(TProtocol iprot) throws TException{

      batchAppointment_args bean = new batchAppointment_args();
      com.isuwang.org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();

      while(true){
        schemeField = iprot.readFieldBegin();
        if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

        switch(schemeField.id){
          
              case 1:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRUCT){
              com.isuwang.dapeng.json.demo.domain.BatchAppointmentRequest elem0 = new com.isuwang.dapeng.json.demo.domain.BatchAppointmentRequest();
        elem0=new com.isuwang.dapeng.json.demo.domain.serializer.BatchAppointmentRequestSerializer().read(iprot);
       bean.setRequest(elem0);
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
          
            default:
            com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate(bean);
      return bean;
    }
    
      @Override
      public void write(batchAppointment_args bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("batchAppointment_args"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("request", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, (short) 1));
            com.isuwang.dapeng.json.demo.domain.BatchAppointmentRequest elem0 = bean.getRequest();
             new com.isuwang.dapeng.json.demo.domain.serializer.BatchAppointmentRequestSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(batchAppointment_args bean) throws TException{
      
              if(bean.getRequest() == null)
              throw new SoaException(SoaBaseCode.NotNull, "request字段不允许为空");
            
                if(bean.getRequest() != null)
                new com.isuwang.dapeng.json.demo.domain.serializer.BatchAppointmentRequestSerializer().validate(bean.getRequest());
              
    }
    

            @Override
            public String toString(batchAppointment_args bean) { return bean == null ? "null" : bean.toString(); }

          }

            public static class BatchAppointment_resultSerializer implements BeanSerializer<batchAppointment_result>{
            @Override
            public batchAppointment_result read(TProtocol iprot) throws TException{

              batchAppointment_result bean = new batchAppointment_result();
              com.isuwang.org.apache.thrift.protocol.TField schemeField;
              iprot.readStructBegin();

              while(true){
                schemeField = iprot.readFieldBegin();
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

                switch(schemeField.id){
                  case 0:  //SUCCESS
                  if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.VOID){
                    
      com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }else{
                    com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }
                  break;
                  /*
                  case 1: //ERROR
                  bean.setSoaException(new SoaException());
                  new SoaExceptionSerializer().read(bean.getSoaException(),iprot);
                  break A;
                  */
                  default:
                  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
              }
              iprot.readStructEnd();

              validate(bean);
              return bean;
            }
            
      @Override
      public void write(batchAppointment_result bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("batchAppointment_result"));

      
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
            
      public void validate(batchAppointment_result bean) throws TException{
      
    }
    

            @Override
            public String toString(batchAppointment_result bean) { return bean == null ? "null" : bean.toString(); }
          }

            public static class batchAppointment<I extends com.isuwang.dapeng.json.demo.service.OrderServiceAsync> extends SoaFunctionDefinition.Async<I, batchAppointment_args, batchAppointment_result>
            {
              public batchAppointment()
              {
                super("batchAppointment", new BatchAppointment_argsSerializer(),  new BatchAppointment_resultSerializer());
              }

              @Override
              public CompletableFuture<batchAppointment_result> apply(OrderServiceAsync iface, batchAppointment_args batchAppointment_args) throws SoaException
              {

                CompletableFuture<Void> result = (CompletableFuture<Void>) iface.batchAppointment(batchAppointment_args.request ,50000);

                return result.thenApply((Void) -> {
                  batchAppointment_result res = new batchAppointment_result();
                  
                  return res;
              });
              }

            }
          
            public static class batchAppointment4Doctor_args {
            
                private com.isuwang.dapeng.json.demo.domain.BatchAppointmentRequest request;
                public com.isuwang.dapeng.json.demo.domain.BatchAppointmentRequest getRequest(){
                return this.request;
              }
                public void setRequest(com.isuwang.dapeng.json.demo.domain.BatchAppointmentRequest request){
                this.request = request;
              }
              

            @Override
            public String toString(){
              StringBuilder stringBuilder = new StringBuilder("{");
                
      stringBuilder.append("\"").append("request").append("\":").append(this.request == null ? "null" : this.request.toString()).append(",");
    
                if(stringBuilder.lastIndexOf(",") > 0)
                stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                stringBuilder.append("}");

              return stringBuilder.toString();
            }

          }

            public static class batchAppointment4Doctor_result {

            
                  private java.util.List<com.isuwang.dapeng.json.demo.domain.AppointmentTimeItem> success;
                  public java.util.List<com.isuwang.dapeng.json.demo.domain.AppointmentTimeItem> getSuccess(){
                  return success;
                }

                  public void setSuccess(java.util.List<com.isuwang.dapeng.json.demo.domain.AppointmentTimeItem> success){
                  this.success = success;
                }


                  @Override
                  public String toString(){
                  StringBuilder stringBuilder = new StringBuilder("{");
                    
      stringBuilder.append("\"").append("success").append("\":").append(success).append(",");
    
                    stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                    stringBuilder.append("}");

                  return stringBuilder.toString();
                }

                
          }

            public static class BatchAppointment4Doctor_argsSerializer implements BeanSerializer<batchAppointment4Doctor_args>{
            
      @Override
      public batchAppointment4Doctor_args read(TProtocol iprot) throws TException{

      batchAppointment4Doctor_args bean = new batchAppointment4Doctor_args();
      com.isuwang.org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();

      while(true){
        schemeField = iprot.readFieldBegin();
        if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

        switch(schemeField.id){
          
              case 1:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRUCT){
              com.isuwang.dapeng.json.demo.domain.BatchAppointmentRequest elem0 = new com.isuwang.dapeng.json.demo.domain.BatchAppointmentRequest();
        elem0=new com.isuwang.dapeng.json.demo.domain.serializer.BatchAppointmentRequestSerializer().read(iprot);
       bean.setRequest(elem0);
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
          
            default:
            com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate(bean);
      return bean;
    }
    
      @Override
      public void write(batchAppointment4Doctor_args bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("batchAppointment4Doctor_args"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("request", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, (short) 1));
            com.isuwang.dapeng.json.demo.domain.BatchAppointmentRequest elem0 = bean.getRequest();
             new com.isuwang.dapeng.json.demo.domain.serializer.BatchAppointmentRequestSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(batchAppointment4Doctor_args bean) throws TException{
      
              if(bean.getRequest() == null)
              throw new SoaException(SoaBaseCode.NotNull, "request字段不允许为空");
            
                if(bean.getRequest() != null)
                new com.isuwang.dapeng.json.demo.domain.serializer.BatchAppointmentRequestSerializer().validate(bean.getRequest());
              
    }
    

            @Override
            public String toString(batchAppointment4Doctor_args bean) { return bean == null ? "null" : bean.toString(); }

          }

            public static class BatchAppointment4Doctor_resultSerializer implements BeanSerializer<batchAppointment4Doctor_result>{
            @Override
            public batchAppointment4Doctor_result read(TProtocol iprot) throws TException{

              batchAppointment4Doctor_result bean = new batchAppointment4Doctor_result();
              com.isuwang.org.apache.thrift.protocol.TField schemeField;
              iprot.readStructBegin();

              while(true){
                schemeField = iprot.readFieldBegin();
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

                switch(schemeField.id){
                  case 0:  //SUCCESS
                  if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.LIST){
                     com.isuwang.org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
        java.util.List<com.isuwang.dapeng.json.demo.domain.AppointmentTimeItem> elem0 = new java.util.ArrayList<>(_list0.size);
        for(int _i0 = 0; _i0 < _list0.size; ++ _i0){
          com.isuwang.dapeng.json.demo.domain.AppointmentTimeItem elem1 = new com.isuwang.dapeng.json.demo.domain.AppointmentTimeItem();
        elem1=new com.isuwang.dapeng.json.demo.domain.serializer.AppointmentTimeItemSerializer().read(iprot);
          elem0.add(elem1);
        }
        iprot.readListEnd();
       bean.setSuccess(elem0);
                  }else{
                    com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }
                  break;
                  /*
                  case 1: //ERROR
                  bean.setSoaException(new SoaException());
                  new SoaExceptionSerializer().read(bean.getSoaException(),iprot);
                  break A;
                  */
                  default:
                  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
              }
              iprot.readStructEnd();

              validate(bean);
              return bean;
            }
            
      @Override
      public void write(batchAppointment4Doctor_result bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("batchAppointment4Doctor_result"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("success", com.isuwang.org.apache.thrift.protocol.TType.LIST, (short) 0));
            java.util.List<com.isuwang.dapeng.json.demo.domain.AppointmentTimeItem> elem0 = bean.getSuccess();
            
          oprot.writeListBegin(new com.isuwang.org.apache.thrift.protocol.TList(com.isuwang.org.apache.thrift.protocol.TType.STRUCT, elem0.size()));
          for(com.isuwang.dapeng.json.demo.domain.AppointmentTimeItem elem1 : elem0){
           new com.isuwang.dapeng.json.demo.domain.serializer.AppointmentTimeItemSerializer().write(elem1, oprot);
        }
          oprot.writeListEnd();
        
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
            
      public void validate(batchAppointment4Doctor_result bean) throws TException{
      
              if(bean.getSuccess() == null)
              throw new SoaException(SoaBaseCode.NotNull, "success字段不允许为空");
            
    }
    

            @Override
            public String toString(batchAppointment4Doctor_result bean) { return bean == null ? "null" : bean.toString(); }
          }

            public static class batchAppointment4Doctor<I extends com.isuwang.dapeng.json.demo.service.OrderServiceAsync> extends SoaFunctionDefinition.Async<I, batchAppointment4Doctor_args, batchAppointment4Doctor_result>
            {
              public batchAppointment4Doctor()
              {
                super("batchAppointment4Doctor", new BatchAppointment4Doctor_argsSerializer(),  new BatchAppointment4Doctor_resultSerializer());
              }

              @Override
              public CompletableFuture<batchAppointment4Doctor_result> apply(OrderServiceAsync iface, batchAppointment4Doctor_args batchAppointment4Doctor_args) throws SoaException
              {

                CompletableFuture<java.util.List<com.isuwang.dapeng.json.demo.domain.AppointmentTimeItem>> result = (CompletableFuture<java.util.List<com.isuwang.dapeng.json.demo.domain.AppointmentTimeItem>>) iface.batchAppointment4Doctor(batchAppointment4Doctor_args.request ,50000);

                return result.thenApply(( java.util.List<com.isuwang.dapeng.json.demo.domain.AppointmentTimeItem> i) -> {
                  batchAppointment4Doctor_result res = new batchAppointment4Doctor_result();
                  res.setSuccess(i);
                  return res;
              });
              }

            }
          
            public static class listAppointments_args {
            
                private com.isuwang.dapeng.json.demo.domain.ListAppointmentsRequest request;
                public com.isuwang.dapeng.json.demo.domain.ListAppointmentsRequest getRequest(){
                return this.request;
              }
                public void setRequest(com.isuwang.dapeng.json.demo.domain.ListAppointmentsRequest request){
                this.request = request;
              }
              

            @Override
            public String toString(){
              StringBuilder stringBuilder = new StringBuilder("{");
                
      stringBuilder.append("\"").append("request").append("\":").append(this.request == null ? "null" : this.request.toString()).append(",");
    
                if(stringBuilder.lastIndexOf(",") > 0)
                stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                stringBuilder.append("}");

              return stringBuilder.toString();
            }

          }

            public static class listAppointments_result {

            
                  private com.isuwang.dapeng.json.demo.domain.ListAppointmentsResponse success;
                  public com.isuwang.dapeng.json.demo.domain.ListAppointmentsResponse getSuccess(){
                  return success;
                }

                  public void setSuccess(com.isuwang.dapeng.json.demo.domain.ListAppointmentsResponse success){
                  this.success = success;
                }


                  @Override
                  public String toString(){
                  StringBuilder stringBuilder = new StringBuilder("{");
                    
      stringBuilder.append("\"").append("success").append("\":").append(this.success == null ? "null" : this.success.toString()).append(",");
    
                    stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                    stringBuilder.append("}");

                  return stringBuilder.toString();
                }

                
          }

            public static class ListAppointments_argsSerializer implements BeanSerializer<listAppointments_args>{
            
      @Override
      public listAppointments_args read(TProtocol iprot) throws TException{

      listAppointments_args bean = new listAppointments_args();
      com.isuwang.org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();

      while(true){
        schemeField = iprot.readFieldBegin();
        if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

        switch(schemeField.id){
          
              case 1:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRUCT){
              com.isuwang.dapeng.json.demo.domain.ListAppointmentsRequest elem0 = new com.isuwang.dapeng.json.demo.domain.ListAppointmentsRequest();
        elem0=new com.isuwang.dapeng.json.demo.domain.serializer.ListAppointmentsRequestSerializer().read(iprot);
       bean.setRequest(elem0);
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
          
            default:
            com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate(bean);
      return bean;
    }
    
      @Override
      public void write(listAppointments_args bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("listAppointments_args"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("request", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, (short) 1));
            com.isuwang.dapeng.json.demo.domain.ListAppointmentsRequest elem0 = bean.getRequest();
             new com.isuwang.dapeng.json.demo.domain.serializer.ListAppointmentsRequestSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(listAppointments_args bean) throws TException{
      
              if(bean.getRequest() == null)
              throw new SoaException(SoaBaseCode.NotNull, "request字段不允许为空");
            
                if(bean.getRequest() != null)
                new com.isuwang.dapeng.json.demo.domain.serializer.ListAppointmentsRequestSerializer().validate(bean.getRequest());
              
    }
    

            @Override
            public String toString(listAppointments_args bean) { return bean == null ? "null" : bean.toString(); }

          }

            public static class ListAppointments_resultSerializer implements BeanSerializer<listAppointments_result>{
            @Override
            public listAppointments_result read(TProtocol iprot) throws TException{

              listAppointments_result bean = new listAppointments_result();
              com.isuwang.org.apache.thrift.protocol.TField schemeField;
              iprot.readStructBegin();

              while(true){
                schemeField = iprot.readFieldBegin();
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

                switch(schemeField.id){
                  case 0:  //SUCCESS
                  if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRUCT){
                    com.isuwang.dapeng.json.demo.domain.ListAppointmentsResponse elem0 = new com.isuwang.dapeng.json.demo.domain.ListAppointmentsResponse();
        elem0=new com.isuwang.dapeng.json.demo.domain.serializer.ListAppointmentsResponseSerializer().read(iprot);
       bean.setSuccess(elem0);
                  }else{
                    com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }
                  break;
                  /*
                  case 1: //ERROR
                  bean.setSoaException(new SoaException());
                  new SoaExceptionSerializer().read(bean.getSoaException(),iprot);
                  break A;
                  */
                  default:
                  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
              }
              iprot.readStructEnd();

              validate(bean);
              return bean;
            }
            
      @Override
      public void write(listAppointments_result bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("listAppointments_result"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("success", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, (short) 0));
            com.isuwang.dapeng.json.demo.domain.ListAppointmentsResponse elem0 = bean.getSuccess();
             new com.isuwang.dapeng.json.demo.domain.serializer.ListAppointmentsResponseSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
            
      public void validate(listAppointments_result bean) throws TException{
      
              if(bean.getSuccess() == null)
              throw new SoaException(SoaBaseCode.NotNull, "success字段不允许为空");
            
                if(bean.getSuccess() != null)
                new com.isuwang.dapeng.json.demo.domain.serializer.ListAppointmentsResponseSerializer().validate(bean.getSuccess());
              
    }
    

            @Override
            public String toString(listAppointments_result bean) { return bean == null ? "null" : bean.toString(); }
          }

            public static class listAppointments<I extends com.isuwang.dapeng.json.demo.service.OrderServiceAsync> extends SoaFunctionDefinition.Async<I, listAppointments_args, listAppointments_result>
            {
              public listAppointments()
              {
                super("listAppointments", new ListAppointments_argsSerializer(),  new ListAppointments_resultSerializer());
              }

              @Override
              public CompletableFuture<listAppointments_result> apply(OrderServiceAsync iface, listAppointments_args listAppointments_args) throws SoaException
              {

                CompletableFuture<com.isuwang.dapeng.json.demo.domain.ListAppointmentsResponse> result = (CompletableFuture<com.isuwang.dapeng.json.demo.domain.ListAppointmentsResponse>) iface.listAppointments(listAppointments_args.request ,50000);

                return result.thenApply(( com.isuwang.dapeng.json.demo.domain.ListAppointmentsResponse i) -> {
                  listAppointments_result res = new listAppointments_result();
                  res.setSuccess(i);
                  return res;
              });
              }

            }
          
            public static class createAppointmentForAvailable_args {
            
                private com.isuwang.dapeng.json.demo.domain.CreateAppointmentForAvailableRequest request;
                public com.isuwang.dapeng.json.demo.domain.CreateAppointmentForAvailableRequest getRequest(){
                return this.request;
              }
                public void setRequest(com.isuwang.dapeng.json.demo.domain.CreateAppointmentForAvailableRequest request){
                this.request = request;
              }
              

            @Override
            public String toString(){
              StringBuilder stringBuilder = new StringBuilder("{");
                
      stringBuilder.append("\"").append("request").append("\":").append(this.request == null ? "null" : this.request.toString()).append(",");
    
                if(stringBuilder.lastIndexOf(",") > 0)
                stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                stringBuilder.append("}");

              return stringBuilder.toString();
            }

          }

            public static class createAppointmentForAvailable_result {

            
                  @Override
                  public String toString(){
                  return "{}";
                }
                
          }

            public static class CreateAppointmentForAvailable_argsSerializer implements BeanSerializer<createAppointmentForAvailable_args>{
            
      @Override
      public createAppointmentForAvailable_args read(TProtocol iprot) throws TException{

      createAppointmentForAvailable_args bean = new createAppointmentForAvailable_args();
      com.isuwang.org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();

      while(true){
        schemeField = iprot.readFieldBegin();
        if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

        switch(schemeField.id){
          
              case 1:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRUCT){
              com.isuwang.dapeng.json.demo.domain.CreateAppointmentForAvailableRequest elem0 = new com.isuwang.dapeng.json.demo.domain.CreateAppointmentForAvailableRequest();
        elem0=new com.isuwang.dapeng.json.demo.domain.serializer.CreateAppointmentForAvailableRequestSerializer().read(iprot);
       bean.setRequest(elem0);
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
          
            default:
            com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate(bean);
      return bean;
    }
    
      @Override
      public void write(createAppointmentForAvailable_args bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("createAppointmentForAvailable_args"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("request", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, (short) 1));
            com.isuwang.dapeng.json.demo.domain.CreateAppointmentForAvailableRequest elem0 = bean.getRequest();
             new com.isuwang.dapeng.json.demo.domain.serializer.CreateAppointmentForAvailableRequestSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(createAppointmentForAvailable_args bean) throws TException{
      
              if(bean.getRequest() == null)
              throw new SoaException(SoaBaseCode.NotNull, "request字段不允许为空");
            
                if(bean.getRequest() != null)
                new com.isuwang.dapeng.json.demo.domain.serializer.CreateAppointmentForAvailableRequestSerializer().validate(bean.getRequest());
              
    }
    

            @Override
            public String toString(createAppointmentForAvailable_args bean) { return bean == null ? "null" : bean.toString(); }

          }

            public static class CreateAppointmentForAvailable_resultSerializer implements BeanSerializer<createAppointmentForAvailable_result>{
            @Override
            public createAppointmentForAvailable_result read(TProtocol iprot) throws TException{

              createAppointmentForAvailable_result bean = new createAppointmentForAvailable_result();
              com.isuwang.org.apache.thrift.protocol.TField schemeField;
              iprot.readStructBegin();

              while(true){
                schemeField = iprot.readFieldBegin();
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

                switch(schemeField.id){
                  case 0:  //SUCCESS
                  if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.VOID){
                    
      com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }else{
                    com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }
                  break;
                  /*
                  case 1: //ERROR
                  bean.setSoaException(new SoaException());
                  new SoaExceptionSerializer().read(bean.getSoaException(),iprot);
                  break A;
                  */
                  default:
                  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
              }
              iprot.readStructEnd();

              validate(bean);
              return bean;
            }
            
      @Override
      public void write(createAppointmentForAvailable_result bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("createAppointmentForAvailable_result"));

      
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
            
      public void validate(createAppointmentForAvailable_result bean) throws TException{
      
    }
    

            @Override
            public String toString(createAppointmentForAvailable_result bean) { return bean == null ? "null" : bean.toString(); }
          }

            public static class createAppointmentForAvailable<I extends com.isuwang.dapeng.json.demo.service.OrderServiceAsync> extends SoaFunctionDefinition.Async<I, createAppointmentForAvailable_args, createAppointmentForAvailable_result>
            {
              public createAppointmentForAvailable()
              {
                super("createAppointmentForAvailable", new CreateAppointmentForAvailable_argsSerializer(),  new CreateAppointmentForAvailable_resultSerializer());
              }

              @Override
              public CompletableFuture<createAppointmentForAvailable_result> apply(OrderServiceAsync iface, createAppointmentForAvailable_args createAppointmentForAvailable_args) throws SoaException
              {

                CompletableFuture<Void> result = (CompletableFuture<Void>) iface.createAppointmentForAvailable(createAppointmentForAvailable_args.request ,50000);

                return result.thenApply((Void) -> {
                  createAppointmentForAvailable_result res = new createAppointmentForAvailable_result();
                  
                  return res;
              });
              }

            }
          
            public static class getLastTreatDoctor_args {
            
                private Integer patientId;
                public Integer getPatientId(){
                return this.patientId;
              }
                public void setPatientId(Integer patientId){
                this.patientId = patientId;
              }
              

            @Override
            public String toString(){
              StringBuilder stringBuilder = new StringBuilder("{");
                
      stringBuilder.append("\"").append("patientId").append("\":").append(patientId).append(",");
    
                if(stringBuilder.lastIndexOf(",") > 0)
                stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                stringBuilder.append("}");

              return stringBuilder.toString();
            }

          }

            public static class getLastTreatDoctor_result {

            
                  private com.isuwang.dapeng.json.demo.domain.GetLastTreatDoctorResponse success;
                  public com.isuwang.dapeng.json.demo.domain.GetLastTreatDoctorResponse getSuccess(){
                  return success;
                }

                  public void setSuccess(com.isuwang.dapeng.json.demo.domain.GetLastTreatDoctorResponse success){
                  this.success = success;
                }


                  @Override
                  public String toString(){
                  StringBuilder stringBuilder = new StringBuilder("{");
                    
      stringBuilder.append("\"").append("success").append("\":").append(this.success == null ? "null" : this.success.toString()).append(",");
    
                    stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                    stringBuilder.append("}");

                  return stringBuilder.toString();
                }

                
          }

            public static class GetLastTreatDoctor_argsSerializer implements BeanSerializer<getLastTreatDoctor_args>{
            
      @Override
      public getLastTreatDoctor_args read(TProtocol iprot) throws TException{

      getLastTreatDoctor_args bean = new getLastTreatDoctor_args();
      com.isuwang.org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();

      while(true){
        schemeField = iprot.readFieldBegin();
        if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

        switch(schemeField.id){
          
              case 1:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.I32){
               int elem0 = iprot.readI32();
       bean.setPatientId(elem0);
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
          
            default:
            com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate(bean);
      return bean;
    }
    
      @Override
      public void write(getLastTreatDoctor_args bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("getLastTreatDoctor_args"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("patientId", com.isuwang.org.apache.thrift.protocol.TType.I32, (short) 1));
            Integer elem0 = bean.getPatientId();
            oprot.writeI32(elem0);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(getLastTreatDoctor_args bean) throws TException{
      
    }
    

            @Override
            public String toString(getLastTreatDoctor_args bean) { return bean == null ? "null" : bean.toString(); }

          }

            public static class GetLastTreatDoctor_resultSerializer implements BeanSerializer<getLastTreatDoctor_result>{
            @Override
            public getLastTreatDoctor_result read(TProtocol iprot) throws TException{

              getLastTreatDoctor_result bean = new getLastTreatDoctor_result();
              com.isuwang.org.apache.thrift.protocol.TField schemeField;
              iprot.readStructBegin();

              while(true){
                schemeField = iprot.readFieldBegin();
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

                switch(schemeField.id){
                  case 0:  //SUCCESS
                  if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRUCT){
                    com.isuwang.dapeng.json.demo.domain.GetLastTreatDoctorResponse elem0 = new com.isuwang.dapeng.json.demo.domain.GetLastTreatDoctorResponse();
        elem0=new com.isuwang.dapeng.json.demo.domain.serializer.GetLastTreatDoctorResponseSerializer().read(iprot);
       bean.setSuccess(elem0);
                  }else{
                    com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }
                  break;
                  /*
                  case 1: //ERROR
                  bean.setSoaException(new SoaException());
                  new SoaExceptionSerializer().read(bean.getSoaException(),iprot);
                  break A;
                  */
                  default:
                  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
              }
              iprot.readStructEnd();

              validate(bean);
              return bean;
            }
            
      @Override
      public void write(getLastTreatDoctor_result bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("getLastTreatDoctor_result"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("success", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, (short) 0));
            com.isuwang.dapeng.json.demo.domain.GetLastTreatDoctorResponse elem0 = bean.getSuccess();
             new com.isuwang.dapeng.json.demo.domain.serializer.GetLastTreatDoctorResponseSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
            
      public void validate(getLastTreatDoctor_result bean) throws TException{
      
              if(bean.getSuccess() == null)
              throw new SoaException(SoaBaseCode.NotNull, "success字段不允许为空");
            
                if(bean.getSuccess() != null)
                new com.isuwang.dapeng.json.demo.domain.serializer.GetLastTreatDoctorResponseSerializer().validate(bean.getSuccess());
              
    }
    

            @Override
            public String toString(getLastTreatDoctor_result bean) { return bean == null ? "null" : bean.toString(); }
          }

            public static class getLastTreatDoctor<I extends com.isuwang.dapeng.json.demo.service.OrderServiceAsync> extends SoaFunctionDefinition.Async<I, getLastTreatDoctor_args, getLastTreatDoctor_result>
            {
              public getLastTreatDoctor()
              {
                super("getLastTreatDoctor", new GetLastTreatDoctor_argsSerializer(),  new GetLastTreatDoctor_resultSerializer());
              }

              @Override
              public CompletableFuture<getLastTreatDoctor_result> apply(OrderServiceAsync iface, getLastTreatDoctor_args getLastTreatDoctor_args) throws SoaException
              {

                CompletableFuture<com.isuwang.dapeng.json.demo.domain.GetLastTreatDoctorResponse> result = (CompletableFuture<com.isuwang.dapeng.json.demo.domain.GetLastTreatDoctorResponse>) iface.getLastTreatDoctor(getLastTreatDoctor_args.patientId ,50000);

                return result.thenApply(( com.isuwang.dapeng.json.demo.domain.GetLastTreatDoctorResponse i) -> {
                  getLastTreatDoctor_result res = new getLastTreatDoctor_result();
                  res.setSuccess(i);
                  return res;
              });
              }

            }
          
            public static class createOrder_args {
            
                private com.isuwang.dapeng.json.demo.domain.CreateOrderRequest request;
                public com.isuwang.dapeng.json.demo.domain.CreateOrderRequest getRequest(){
                return this.request;
              }
                public void setRequest(com.isuwang.dapeng.json.demo.domain.CreateOrderRequest request){
                this.request = request;
              }
              

            @Override
            public String toString(){
              StringBuilder stringBuilder = new StringBuilder("{");
                
      stringBuilder.append("\"").append("request").append("\":").append(this.request == null ? "null" : this.request.toString()).append(",");
    
                if(stringBuilder.lastIndexOf(",") > 0)
                stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                stringBuilder.append("}");

              return stringBuilder.toString();
            }

          }

            public static class createOrder_result {

            
                  private com.isuwang.dapeng.json.demo.domain.OrderItem success;
                  public com.isuwang.dapeng.json.demo.domain.OrderItem getSuccess(){
                  return success;
                }

                  public void setSuccess(com.isuwang.dapeng.json.demo.domain.OrderItem success){
                  this.success = success;
                }


                  @Override
                  public String toString(){
                  StringBuilder stringBuilder = new StringBuilder("{");
                    
      stringBuilder.append("\"").append("success").append("\":").append(this.success == null ? "null" : this.success.toString()).append(",");
    
                    stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                    stringBuilder.append("}");

                  return stringBuilder.toString();
                }

                
          }

            public static class CreateOrder_argsSerializer implements BeanSerializer<createOrder_args>{
            
      @Override
      public createOrder_args read(TProtocol iprot) throws TException{

      createOrder_args bean = new createOrder_args();
      com.isuwang.org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();

      while(true){
        schemeField = iprot.readFieldBegin();
        if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

        switch(schemeField.id){
          
              case 1:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRUCT){
              com.isuwang.dapeng.json.demo.domain.CreateOrderRequest elem0 = new com.isuwang.dapeng.json.demo.domain.CreateOrderRequest();
        elem0=new com.isuwang.dapeng.json.demo.domain.serializer.CreateOrderRequestSerializer().read(iprot);
       bean.setRequest(elem0);
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
          
            default:
            com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate(bean);
      return bean;
    }
    
      @Override
      public void write(createOrder_args bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("createOrder_args"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("request", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, (short) 1));
            com.isuwang.dapeng.json.demo.domain.CreateOrderRequest elem0 = bean.getRequest();
             new com.isuwang.dapeng.json.demo.domain.serializer.CreateOrderRequestSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(createOrder_args bean) throws TException{
      
              if(bean.getRequest() == null)
              throw new SoaException(SoaBaseCode.NotNull, "request字段不允许为空");
            
                if(bean.getRequest() != null)
                new com.isuwang.dapeng.json.demo.domain.serializer.CreateOrderRequestSerializer().validate(bean.getRequest());
              
    }
    

            @Override
            public String toString(createOrder_args bean) { return bean == null ? "null" : bean.toString(); }

          }

            public static class CreateOrder_resultSerializer implements BeanSerializer<createOrder_result>{
            @Override
            public createOrder_result read(TProtocol iprot) throws TException{

              createOrder_result bean = new createOrder_result();
              com.isuwang.org.apache.thrift.protocol.TField schemeField;
              iprot.readStructBegin();

              while(true){
                schemeField = iprot.readFieldBegin();
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

                switch(schemeField.id){
                  case 0:  //SUCCESS
                  if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRUCT){
                    com.isuwang.dapeng.json.demo.domain.OrderItem elem0 = new com.isuwang.dapeng.json.demo.domain.OrderItem();
        elem0=new com.isuwang.dapeng.json.demo.domain.serializer.OrderItemSerializer().read(iprot);
       bean.setSuccess(elem0);
                  }else{
                    com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }
                  break;
                  /*
                  case 1: //ERROR
                  bean.setSoaException(new SoaException());
                  new SoaExceptionSerializer().read(bean.getSoaException(),iprot);
                  break A;
                  */
                  default:
                  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
              }
              iprot.readStructEnd();

              validate(bean);
              return bean;
            }
            
      @Override
      public void write(createOrder_result bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("createOrder_result"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("success", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, (short) 0));
            com.isuwang.dapeng.json.demo.domain.OrderItem elem0 = bean.getSuccess();
             new com.isuwang.dapeng.json.demo.domain.serializer.OrderItemSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
            
      public void validate(createOrder_result bean) throws TException{
      
              if(bean.getSuccess() == null)
              throw new SoaException(SoaBaseCode.NotNull, "success字段不允许为空");
            
                if(bean.getSuccess() != null)
                new com.isuwang.dapeng.json.demo.domain.serializer.OrderItemSerializer().validate(bean.getSuccess());
              
    }
    

            @Override
            public String toString(createOrder_result bean) { return bean == null ? "null" : bean.toString(); }
          }

            public static class createOrder<I extends com.isuwang.dapeng.json.demo.service.OrderServiceAsync> extends SoaFunctionDefinition.Async<I, createOrder_args, createOrder_result>
            {
              public createOrder()
              {
                super("createOrder", new CreateOrder_argsSerializer(),  new CreateOrder_resultSerializer());
              }

              @Override
              public CompletableFuture<createOrder_result> apply(OrderServiceAsync iface, createOrder_args createOrder_args) throws SoaException
              {

                CompletableFuture<com.isuwang.dapeng.json.demo.domain.OrderItem> result = (CompletableFuture<com.isuwang.dapeng.json.demo.domain.OrderItem>) iface.createOrder(createOrder_args.request ,50000);

                return result.thenApply(( com.isuwang.dapeng.json.demo.domain.OrderItem i) -> {
                  createOrder_result res = new createOrder_result();
                  res.setSuccess(i);
                  return res;
              });
              }

            }
          
            public static class listOrders_args {
            
                private com.isuwang.dapeng.json.demo.domain.ListOrderRequest request;
                public com.isuwang.dapeng.json.demo.domain.ListOrderRequest getRequest(){
                return this.request;
              }
                public void setRequest(com.isuwang.dapeng.json.demo.domain.ListOrderRequest request){
                this.request = request;
              }
              

            @Override
            public String toString(){
              StringBuilder stringBuilder = new StringBuilder("{");
                
      stringBuilder.append("\"").append("request").append("\":").append(this.request == null ? "null" : this.request.toString()).append(",");
    
                if(stringBuilder.lastIndexOf(",") > 0)
                stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                stringBuilder.append("}");

              return stringBuilder.toString();
            }

          }

            public static class listOrders_result {

            
                  private com.isuwang.dapeng.json.demo.domain.ListOrderResponse success;
                  public com.isuwang.dapeng.json.demo.domain.ListOrderResponse getSuccess(){
                  return success;
                }

                  public void setSuccess(com.isuwang.dapeng.json.demo.domain.ListOrderResponse success){
                  this.success = success;
                }


                  @Override
                  public String toString(){
                  StringBuilder stringBuilder = new StringBuilder("{");
                    
      stringBuilder.append("\"").append("success").append("\":").append(this.success == null ? "null" : this.success.toString()).append(",");
    
                    stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                    stringBuilder.append("}");

                  return stringBuilder.toString();
                }

                
          }

            public static class ListOrders_argsSerializer implements BeanSerializer<listOrders_args>{
            
      @Override
      public listOrders_args read(TProtocol iprot) throws TException{

      listOrders_args bean = new listOrders_args();
      com.isuwang.org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();

      while(true){
        schemeField = iprot.readFieldBegin();
        if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

        switch(schemeField.id){
          
              case 1:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRUCT){
              com.isuwang.dapeng.json.demo.domain.ListOrderRequest elem0 = new com.isuwang.dapeng.json.demo.domain.ListOrderRequest();
        elem0=new com.isuwang.dapeng.json.demo.domain.serializer.ListOrderRequestSerializer().read(iprot);
       bean.setRequest(elem0);
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
          
            default:
            com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate(bean);
      return bean;
    }
    
      @Override
      public void write(listOrders_args bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("listOrders_args"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("request", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, (short) 1));
            com.isuwang.dapeng.json.demo.domain.ListOrderRequest elem0 = bean.getRequest();
             new com.isuwang.dapeng.json.demo.domain.serializer.ListOrderRequestSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(listOrders_args bean) throws TException{
      
              if(bean.getRequest() == null)
              throw new SoaException(SoaBaseCode.NotNull, "request字段不允许为空");
            
                if(bean.getRequest() != null)
                new com.isuwang.dapeng.json.demo.domain.serializer.ListOrderRequestSerializer().validate(bean.getRequest());
              
    }
    

            @Override
            public String toString(listOrders_args bean) { return bean == null ? "null" : bean.toString(); }

          }

            public static class ListOrders_resultSerializer implements BeanSerializer<listOrders_result>{
            @Override
            public listOrders_result read(TProtocol iprot) throws TException{

              listOrders_result bean = new listOrders_result();
              com.isuwang.org.apache.thrift.protocol.TField schemeField;
              iprot.readStructBegin();

              while(true){
                schemeField = iprot.readFieldBegin();
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

                switch(schemeField.id){
                  case 0:  //SUCCESS
                  if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRUCT){
                    com.isuwang.dapeng.json.demo.domain.ListOrderResponse elem0 = new com.isuwang.dapeng.json.demo.domain.ListOrderResponse();
        elem0=new com.isuwang.dapeng.json.demo.domain.serializer.ListOrderResponseSerializer().read(iprot);
       bean.setSuccess(elem0);
                  }else{
                    com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }
                  break;
                  /*
                  case 1: //ERROR
                  bean.setSoaException(new SoaException());
                  new SoaExceptionSerializer().read(bean.getSoaException(),iprot);
                  break A;
                  */
                  default:
                  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
              }
              iprot.readStructEnd();

              validate(bean);
              return bean;
            }
            
      @Override
      public void write(listOrders_result bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("listOrders_result"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("success", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, (short) 0));
            com.isuwang.dapeng.json.demo.domain.ListOrderResponse elem0 = bean.getSuccess();
             new com.isuwang.dapeng.json.demo.domain.serializer.ListOrderResponseSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
            
      public void validate(listOrders_result bean) throws TException{
      
              if(bean.getSuccess() == null)
              throw new SoaException(SoaBaseCode.NotNull, "success字段不允许为空");
            
                if(bean.getSuccess() != null)
                new com.isuwang.dapeng.json.demo.domain.serializer.ListOrderResponseSerializer().validate(bean.getSuccess());
              
    }
    

            @Override
            public String toString(listOrders_result bean) { return bean == null ? "null" : bean.toString(); }
          }

            public static class listOrders<I extends com.isuwang.dapeng.json.demo.service.OrderServiceAsync> extends SoaFunctionDefinition.Async<I, listOrders_args, listOrders_result>
            {
              public listOrders()
              {
                super("listOrders", new ListOrders_argsSerializer(),  new ListOrders_resultSerializer());
              }

              @Override
              public CompletableFuture<listOrders_result> apply(OrderServiceAsync iface, listOrders_args listOrders_args) throws SoaException
              {

                CompletableFuture<com.isuwang.dapeng.json.demo.domain.ListOrderResponse> result = (CompletableFuture<com.isuwang.dapeng.json.demo.domain.ListOrderResponse>) iface.listOrders(listOrders_args.request ,50000);

                return result.thenApply(( com.isuwang.dapeng.json.demo.domain.ListOrderResponse i) -> {
                  listOrders_result res = new listOrders_result();
                  res.setSuccess(i);
                  return res;
              });
              }

            }
          
            public static class getOrder_args {
            
                private Integer orderId;
                public Integer getOrderId(){
                return this.orderId;
              }
                public void setOrderId(Integer orderId){
                this.orderId = orderId;
              }
              

            @Override
            public String toString(){
              StringBuilder stringBuilder = new StringBuilder("{");
                
      stringBuilder.append("\"").append("orderId").append("\":").append(orderId).append(",");
    
                if(stringBuilder.lastIndexOf(",") > 0)
                stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                stringBuilder.append("}");

              return stringBuilder.toString();
            }

          }

            public static class getOrder_result {

            
                  private com.isuwang.dapeng.json.demo.domain.OrderItem success;
                  public com.isuwang.dapeng.json.demo.domain.OrderItem getSuccess(){
                  return success;
                }

                  public void setSuccess(com.isuwang.dapeng.json.demo.domain.OrderItem success){
                  this.success = success;
                }


                  @Override
                  public String toString(){
                  StringBuilder stringBuilder = new StringBuilder("{");
                    
      stringBuilder.append("\"").append("success").append("\":").append(this.success == null ? "null" : this.success.toString()).append(",");
    
                    stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                    stringBuilder.append("}");

                  return stringBuilder.toString();
                }

                
          }

            public static class GetOrder_argsSerializer implements BeanSerializer<getOrder_args>{
            
      @Override
      public getOrder_args read(TProtocol iprot) throws TException{

      getOrder_args bean = new getOrder_args();
      com.isuwang.org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();

      while(true){
        schemeField = iprot.readFieldBegin();
        if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

        switch(schemeField.id){
          
              case 1:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.I32){
               int elem0 = iprot.readI32();
       bean.setOrderId(elem0);
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
          
            default:
            com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate(bean);
      return bean;
    }
    
      @Override
      public void write(getOrder_args bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("getOrder_args"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("orderId", com.isuwang.org.apache.thrift.protocol.TType.I32, (short) 1));
            Integer elem0 = bean.getOrderId();
            oprot.writeI32(elem0);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(getOrder_args bean) throws TException{
      
    }
    

            @Override
            public String toString(getOrder_args bean) { return bean == null ? "null" : bean.toString(); }

          }

            public static class GetOrder_resultSerializer implements BeanSerializer<getOrder_result>{
            @Override
            public getOrder_result read(TProtocol iprot) throws TException{

              getOrder_result bean = new getOrder_result();
              com.isuwang.org.apache.thrift.protocol.TField schemeField;
              iprot.readStructBegin();

              while(true){
                schemeField = iprot.readFieldBegin();
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

                switch(schemeField.id){
                  case 0:  //SUCCESS
                  if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRUCT){
                    com.isuwang.dapeng.json.demo.domain.OrderItem elem0 = new com.isuwang.dapeng.json.demo.domain.OrderItem();
        elem0=new com.isuwang.dapeng.json.demo.domain.serializer.OrderItemSerializer().read(iprot);
       bean.setSuccess(elem0);
                  }else{
                    com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }
                  break;
                  /*
                  case 1: //ERROR
                  bean.setSoaException(new SoaException());
                  new SoaExceptionSerializer().read(bean.getSoaException(),iprot);
                  break A;
                  */
                  default:
                  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
              }
              iprot.readStructEnd();

              validate(bean);
              return bean;
            }
            
      @Override
      public void write(getOrder_result bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("getOrder_result"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("success", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, (short) 0));
            com.isuwang.dapeng.json.demo.domain.OrderItem elem0 = bean.getSuccess();
             new com.isuwang.dapeng.json.demo.domain.serializer.OrderItemSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
            
      public void validate(getOrder_result bean) throws TException{
      
              if(bean.getSuccess() == null)
              throw new SoaException(SoaBaseCode.NotNull, "success字段不允许为空");
            
                if(bean.getSuccess() != null)
                new com.isuwang.dapeng.json.demo.domain.serializer.OrderItemSerializer().validate(bean.getSuccess());
              
    }
    

            @Override
            public String toString(getOrder_result bean) { return bean == null ? "null" : bean.toString(); }
          }

            public static class getOrder<I extends com.isuwang.dapeng.json.demo.service.OrderServiceAsync> extends SoaFunctionDefinition.Async<I, getOrder_args, getOrder_result>
            {
              public getOrder()
              {
                super("getOrder", new GetOrder_argsSerializer(),  new GetOrder_resultSerializer());
              }

              @Override
              public CompletableFuture<getOrder_result> apply(OrderServiceAsync iface, getOrder_args getOrder_args) throws SoaException
              {

                CompletableFuture<com.isuwang.dapeng.json.demo.domain.OrderItem> result = (CompletableFuture<com.isuwang.dapeng.json.demo.domain.OrderItem>) iface.getOrder(getOrder_args.orderId ,50000);

                return result.thenApply(( com.isuwang.dapeng.json.demo.domain.OrderItem i) -> {
                  getOrder_result res = new getOrder_result();
                  res.setSuccess(i);
                  return res;
              });
              }

            }
          
            public static class modifyOrderStatus_args {
            
                private com.isuwang.dapeng.json.demo.domain.ModifyOrderStatusRequest request;
                public com.isuwang.dapeng.json.demo.domain.ModifyOrderStatusRequest getRequest(){
                return this.request;
              }
                public void setRequest(com.isuwang.dapeng.json.demo.domain.ModifyOrderStatusRequest request){
                this.request = request;
              }
              

            @Override
            public String toString(){
              StringBuilder stringBuilder = new StringBuilder("{");
                
      stringBuilder.append("\"").append("request").append("\":").append(this.request == null ? "null" : this.request.toString()).append(",");
    
                if(stringBuilder.lastIndexOf(",") > 0)
                stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                stringBuilder.append("}");

              return stringBuilder.toString();
            }

          }

            public static class modifyOrderStatus_result {

            
                  @Override
                  public String toString(){
                  return "{}";
                }
                
          }

            public static class ModifyOrderStatus_argsSerializer implements BeanSerializer<modifyOrderStatus_args>{
            
      @Override
      public modifyOrderStatus_args read(TProtocol iprot) throws TException{

      modifyOrderStatus_args bean = new modifyOrderStatus_args();
      com.isuwang.org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();

      while(true){
        schemeField = iprot.readFieldBegin();
        if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

        switch(schemeField.id){
          
              case 1:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRUCT){
              com.isuwang.dapeng.json.demo.domain.ModifyOrderStatusRequest elem0 = new com.isuwang.dapeng.json.demo.domain.ModifyOrderStatusRequest();
        elem0=new com.isuwang.dapeng.json.demo.domain.serializer.ModifyOrderStatusRequestSerializer().read(iprot);
       bean.setRequest(elem0);
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
          
            default:
            com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate(bean);
      return bean;
    }
    
      @Override
      public void write(modifyOrderStatus_args bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("modifyOrderStatus_args"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("request", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, (short) 1));
            com.isuwang.dapeng.json.demo.domain.ModifyOrderStatusRequest elem0 = bean.getRequest();
             new com.isuwang.dapeng.json.demo.domain.serializer.ModifyOrderStatusRequestSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(modifyOrderStatus_args bean) throws TException{
      
              if(bean.getRequest() == null)
              throw new SoaException(SoaBaseCode.NotNull, "request字段不允许为空");
            
                if(bean.getRequest() != null)
                new com.isuwang.dapeng.json.demo.domain.serializer.ModifyOrderStatusRequestSerializer().validate(bean.getRequest());
              
    }
    

            @Override
            public String toString(modifyOrderStatus_args bean) { return bean == null ? "null" : bean.toString(); }

          }

            public static class ModifyOrderStatus_resultSerializer implements BeanSerializer<modifyOrderStatus_result>{
            @Override
            public modifyOrderStatus_result read(TProtocol iprot) throws TException{

              modifyOrderStatus_result bean = new modifyOrderStatus_result();
              com.isuwang.org.apache.thrift.protocol.TField schemeField;
              iprot.readStructBegin();

              while(true){
                schemeField = iprot.readFieldBegin();
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

                switch(schemeField.id){
                  case 0:  //SUCCESS
                  if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.VOID){
                    
      com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }else{
                    com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }
                  break;
                  /*
                  case 1: //ERROR
                  bean.setSoaException(new SoaException());
                  new SoaExceptionSerializer().read(bean.getSoaException(),iprot);
                  break A;
                  */
                  default:
                  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
              }
              iprot.readStructEnd();

              validate(bean);
              return bean;
            }
            
      @Override
      public void write(modifyOrderStatus_result bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("modifyOrderStatus_result"));

      
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
            
      public void validate(modifyOrderStatus_result bean) throws TException{
      
    }
    

            @Override
            public String toString(modifyOrderStatus_result bean) { return bean == null ? "null" : bean.toString(); }
          }

            public static class modifyOrderStatus<I extends com.isuwang.dapeng.json.demo.service.OrderServiceAsync> extends SoaFunctionDefinition.Async<I, modifyOrderStatus_args, modifyOrderStatus_result>
            {
              public modifyOrderStatus()
              {
                super("modifyOrderStatus", new ModifyOrderStatus_argsSerializer(),  new ModifyOrderStatus_resultSerializer());
              }

              @Override
              public CompletableFuture<modifyOrderStatus_result> apply(OrderServiceAsync iface, modifyOrderStatus_args modifyOrderStatus_args) throws SoaException
              {

                CompletableFuture<Void> result = (CompletableFuture<Void>) iface.modifyOrderStatus(modifyOrderStatus_args.request ,50000);

                return result.thenApply((Void) -> {
                  modifyOrderStatus_result res = new modifyOrderStatus_result();
                  
                  return res;
              });
              }

            }
          
            public static class payNotify_args {
            
                private com.isuwang.dapeng.json.demo.domain.PayNotifyRequest payNotifyRequest;
                public com.isuwang.dapeng.json.demo.domain.PayNotifyRequest getPayNotifyRequest(){
                return this.payNotifyRequest;
              }
                public void setPayNotifyRequest(com.isuwang.dapeng.json.demo.domain.PayNotifyRequest payNotifyRequest){
                this.payNotifyRequest = payNotifyRequest;
              }
              

            @Override
            public String toString(){
              StringBuilder stringBuilder = new StringBuilder("{");
                
      stringBuilder.append("\"").append("payNotifyRequest").append("\":").append(this.payNotifyRequest == null ? "null" : this.payNotifyRequest.toString()).append(",");
    
                if(stringBuilder.lastIndexOf(",") > 0)
                stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                stringBuilder.append("}");

              return stringBuilder.toString();
            }

          }

            public static class payNotify_result {

            
                  private Boolean success;
                  public Boolean getSuccess(){
                  return success;
                }

                  public void setSuccess(Boolean success){
                  this.success = success;
                }


                  @Override
                  public String toString(){
                  StringBuilder stringBuilder = new StringBuilder("{");
                    
      stringBuilder.append("\"").append("success").append("\":").append(success).append(",");
    
                    stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                    stringBuilder.append("}");

                  return stringBuilder.toString();
                }

                
          }

            public static class PayNotify_argsSerializer implements BeanSerializer<payNotify_args>{
            
      @Override
      public payNotify_args read(TProtocol iprot) throws TException{

      payNotify_args bean = new payNotify_args();
      com.isuwang.org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();

      while(true){
        schemeField = iprot.readFieldBegin();
        if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

        switch(schemeField.id){
          
              case 1:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRUCT){
              com.isuwang.dapeng.json.demo.domain.PayNotifyRequest elem0 = new com.isuwang.dapeng.json.demo.domain.PayNotifyRequest();
        elem0=new com.isuwang.dapeng.json.demo.domain.serializer.PayNotifyRequestSerializer().read(iprot);
       bean.setPayNotifyRequest(elem0);
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
          
            default:
            com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate(bean);
      return bean;
    }
    
      @Override
      public void write(payNotify_args bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("payNotify_args"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("payNotifyRequest", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, (short) 1));
            com.isuwang.dapeng.json.demo.domain.PayNotifyRequest elem0 = bean.getPayNotifyRequest();
             new com.isuwang.dapeng.json.demo.domain.serializer.PayNotifyRequestSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(payNotify_args bean) throws TException{
      
              if(bean.getPayNotifyRequest() == null)
              throw new SoaException(SoaBaseCode.NotNull, "payNotifyRequest字段不允许为空");
            
                if(bean.getPayNotifyRequest() != null)
                new com.isuwang.dapeng.json.demo.domain.serializer.PayNotifyRequestSerializer().validate(bean.getPayNotifyRequest());
              
    }
    

            @Override
            public String toString(payNotify_args bean) { return bean == null ? "null" : bean.toString(); }

          }

            public static class PayNotify_resultSerializer implements BeanSerializer<payNotify_result>{
            @Override
            public payNotify_result read(TProtocol iprot) throws TException{

              payNotify_result bean = new payNotify_result();
              com.isuwang.org.apache.thrift.protocol.TField schemeField;
              iprot.readStructBegin();

              while(true){
                schemeField = iprot.readFieldBegin();
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

                switch(schemeField.id){
                  case 0:  //SUCCESS
                  if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.BOOL){
                    boolean elem0 = iprot.readBool();
       bean.setSuccess(elem0);
                  }else{
                    com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }
                  break;
                  /*
                  case 1: //ERROR
                  bean.setSoaException(new SoaException());
                  new SoaExceptionSerializer().read(bean.getSoaException(),iprot);
                  break A;
                  */
                  default:
                  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
              }
              iprot.readStructEnd();

              validate(bean);
              return bean;
            }
            
      @Override
      public void write(payNotify_result bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("payNotify_result"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("success", com.isuwang.org.apache.thrift.protocol.TType.BOOL, (short) 0));
            Boolean elem0 = bean.getSuccess();
            oprot.writeBool(elem0);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
            
      public void validate(payNotify_result bean) throws TException{
      
    }
    

            @Override
            public String toString(payNotify_result bean) { return bean == null ? "null" : bean.toString(); }
          }

            public static class payNotify<I extends com.isuwang.dapeng.json.demo.service.OrderServiceAsync> extends SoaFunctionDefinition.Async<I, payNotify_args, payNotify_result>
            {
              public payNotify()
              {
                super("payNotify", new PayNotify_argsSerializer(),  new PayNotify_resultSerializer());
              }

              @Override
              public CompletableFuture<payNotify_result> apply(OrderServiceAsync iface, payNotify_args payNotify_args) throws SoaException
              {

                CompletableFuture<Boolean> result = (CompletableFuture<Boolean>) iface.payNotify(payNotify_args.payNotifyRequest ,50000);

                return result.thenApply(( Boolean i) -> {
                  payNotify_result res = new payNotify_result();
                  res.setSuccess(i);
                  return res;
              });
              }

            }
          
            public static class createDiagnose_args {
            
                private com.isuwang.dapeng.json.demo.domain.CreateDiagnoseRequest createDiagnoseRequest;
                public com.isuwang.dapeng.json.demo.domain.CreateDiagnoseRequest getCreateDiagnoseRequest(){
                return this.createDiagnoseRequest;
              }
                public void setCreateDiagnoseRequest(com.isuwang.dapeng.json.demo.domain.CreateDiagnoseRequest createDiagnoseRequest){
                this.createDiagnoseRequest = createDiagnoseRequest;
              }
              

            @Override
            public String toString(){
              StringBuilder stringBuilder = new StringBuilder("{");
                
      stringBuilder.append("\"").append("createDiagnoseRequest").append("\":").append(this.createDiagnoseRequest == null ? "null" : this.createDiagnoseRequest.toString()).append(",");
    
                if(stringBuilder.lastIndexOf(",") > 0)
                stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                stringBuilder.append("}");

              return stringBuilder.toString();
            }

          }

            public static class createDiagnose_result {

            
                  private Integer success;
                  public Integer getSuccess(){
                  return success;
                }

                  public void setSuccess(Integer success){
                  this.success = success;
                }


                  @Override
                  public String toString(){
                  StringBuilder stringBuilder = new StringBuilder("{");
                    
      stringBuilder.append("\"").append("success").append("\":").append(success).append(",");
    
                    stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                    stringBuilder.append("}");

                  return stringBuilder.toString();
                }

                
          }

            public static class CreateDiagnose_argsSerializer implements BeanSerializer<createDiagnose_args>{
            
      @Override
      public createDiagnose_args read(TProtocol iprot) throws TException{

      createDiagnose_args bean = new createDiagnose_args();
      com.isuwang.org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();

      while(true){
        schemeField = iprot.readFieldBegin();
        if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

        switch(schemeField.id){
          
              case 1:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRUCT){
              com.isuwang.dapeng.json.demo.domain.CreateDiagnoseRequest elem0 = new com.isuwang.dapeng.json.demo.domain.CreateDiagnoseRequest();
        elem0=new com.isuwang.dapeng.json.demo.domain.serializer.CreateDiagnoseRequestSerializer().read(iprot);
       bean.setCreateDiagnoseRequest(elem0);
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
          
            default:
            com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate(bean);
      return bean;
    }
    
      @Override
      public void write(createDiagnose_args bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("createDiagnose_args"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("createDiagnoseRequest", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, (short) 1));
            com.isuwang.dapeng.json.demo.domain.CreateDiagnoseRequest elem0 = bean.getCreateDiagnoseRequest();
             new com.isuwang.dapeng.json.demo.domain.serializer.CreateDiagnoseRequestSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(createDiagnose_args bean) throws TException{
      
              if(bean.getCreateDiagnoseRequest() == null)
              throw new SoaException(SoaBaseCode.NotNull, "createDiagnoseRequest字段不允许为空");
            
                if(bean.getCreateDiagnoseRequest() != null)
                new com.isuwang.dapeng.json.demo.domain.serializer.CreateDiagnoseRequestSerializer().validate(bean.getCreateDiagnoseRequest());
              
    }
    

            @Override
            public String toString(createDiagnose_args bean) { return bean == null ? "null" : bean.toString(); }

          }

            public static class CreateDiagnose_resultSerializer implements BeanSerializer<createDiagnose_result>{
            @Override
            public createDiagnose_result read(TProtocol iprot) throws TException{

              createDiagnose_result bean = new createDiagnose_result();
              com.isuwang.org.apache.thrift.protocol.TField schemeField;
              iprot.readStructBegin();

              while(true){
                schemeField = iprot.readFieldBegin();
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

                switch(schemeField.id){
                  case 0:  //SUCCESS
                  if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.I32){
                     int elem0 = iprot.readI32();
       bean.setSuccess(elem0);
                  }else{
                    com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }
                  break;
                  /*
                  case 1: //ERROR
                  bean.setSoaException(new SoaException());
                  new SoaExceptionSerializer().read(bean.getSoaException(),iprot);
                  break A;
                  */
                  default:
                  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
              }
              iprot.readStructEnd();

              validate(bean);
              return bean;
            }
            
      @Override
      public void write(createDiagnose_result bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("createDiagnose_result"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("success", com.isuwang.org.apache.thrift.protocol.TType.I32, (short) 0));
            Integer elem0 = bean.getSuccess();
            oprot.writeI32(elem0);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
            
      public void validate(createDiagnose_result bean) throws TException{
      
    }
    

            @Override
            public String toString(createDiagnose_result bean) { return bean == null ? "null" : bean.toString(); }
          }

            public static class createDiagnose<I extends com.isuwang.dapeng.json.demo.service.OrderServiceAsync> extends SoaFunctionDefinition.Async<I, createDiagnose_args, createDiagnose_result>
            {
              public createDiagnose()
              {
                super("createDiagnose", new CreateDiagnose_argsSerializer(),  new CreateDiagnose_resultSerializer());
              }

              @Override
              public CompletableFuture<createDiagnose_result> apply(OrderServiceAsync iface, createDiagnose_args createDiagnose_args) throws SoaException
              {

                CompletableFuture<Integer> result = (CompletableFuture<Integer>) iface.createDiagnose(createDiagnose_args.createDiagnoseRequest ,50000);

                return result.thenApply(( Integer i) -> {
                  createDiagnose_result res = new createDiagnose_result();
                  res.setSuccess(i);
                  return res;
              });
              }

            }
          
            public static class listDiagnoses_args {
            
                private com.isuwang.dapeng.json.demo.domain.ListDiagnoseRequest listDiagnoseRequest;
                public com.isuwang.dapeng.json.demo.domain.ListDiagnoseRequest getListDiagnoseRequest(){
                return this.listDiagnoseRequest;
              }
                public void setListDiagnoseRequest(com.isuwang.dapeng.json.demo.domain.ListDiagnoseRequest listDiagnoseRequest){
                this.listDiagnoseRequest = listDiagnoseRequest;
              }
              

            @Override
            public String toString(){
              StringBuilder stringBuilder = new StringBuilder("{");
                
      stringBuilder.append("\"").append("listDiagnoseRequest").append("\":").append(this.listDiagnoseRequest == null ? "null" : this.listDiagnoseRequest.toString()).append(",");
    
                if(stringBuilder.lastIndexOf(",") > 0)
                stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                stringBuilder.append("}");

              return stringBuilder.toString();
            }

          }

            public static class listDiagnoses_result {

            
                  private com.isuwang.dapeng.json.demo.domain.ListDiagnoseResponse success;
                  public com.isuwang.dapeng.json.demo.domain.ListDiagnoseResponse getSuccess(){
                  return success;
                }

                  public void setSuccess(com.isuwang.dapeng.json.demo.domain.ListDiagnoseResponse success){
                  this.success = success;
                }


                  @Override
                  public String toString(){
                  StringBuilder stringBuilder = new StringBuilder("{");
                    
      stringBuilder.append("\"").append("success").append("\":").append(this.success == null ? "null" : this.success.toString()).append(",");
    
                    stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                    stringBuilder.append("}");

                  return stringBuilder.toString();
                }

                
          }

            public static class ListDiagnoses_argsSerializer implements BeanSerializer<listDiagnoses_args>{
            
      @Override
      public listDiagnoses_args read(TProtocol iprot) throws TException{

      listDiagnoses_args bean = new listDiagnoses_args();
      com.isuwang.org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();

      while(true){
        schemeField = iprot.readFieldBegin();
        if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

        switch(schemeField.id){
          
              case 1:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRUCT){
              com.isuwang.dapeng.json.demo.domain.ListDiagnoseRequest elem0 = new com.isuwang.dapeng.json.demo.domain.ListDiagnoseRequest();
        elem0=new com.isuwang.dapeng.json.demo.domain.serializer.ListDiagnoseRequestSerializer().read(iprot);
       bean.setListDiagnoseRequest(elem0);
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
          
            default:
            com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate(bean);
      return bean;
    }
    
      @Override
      public void write(listDiagnoses_args bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("listDiagnoses_args"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("listDiagnoseRequest", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, (short) 1));
            com.isuwang.dapeng.json.demo.domain.ListDiagnoseRequest elem0 = bean.getListDiagnoseRequest();
             new com.isuwang.dapeng.json.demo.domain.serializer.ListDiagnoseRequestSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(listDiagnoses_args bean) throws TException{
      
              if(bean.getListDiagnoseRequest() == null)
              throw new SoaException(SoaBaseCode.NotNull, "listDiagnoseRequest字段不允许为空");
            
                if(bean.getListDiagnoseRequest() != null)
                new com.isuwang.dapeng.json.demo.domain.serializer.ListDiagnoseRequestSerializer().validate(bean.getListDiagnoseRequest());
              
    }
    

            @Override
            public String toString(listDiagnoses_args bean) { return bean == null ? "null" : bean.toString(); }

          }

            public static class ListDiagnoses_resultSerializer implements BeanSerializer<listDiagnoses_result>{
            @Override
            public listDiagnoses_result read(TProtocol iprot) throws TException{

              listDiagnoses_result bean = new listDiagnoses_result();
              com.isuwang.org.apache.thrift.protocol.TField schemeField;
              iprot.readStructBegin();

              while(true){
                schemeField = iprot.readFieldBegin();
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

                switch(schemeField.id){
                  case 0:  //SUCCESS
                  if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRUCT){
                    com.isuwang.dapeng.json.demo.domain.ListDiagnoseResponse elem0 = new com.isuwang.dapeng.json.demo.domain.ListDiagnoseResponse();
        elem0=new com.isuwang.dapeng.json.demo.domain.serializer.ListDiagnoseResponseSerializer().read(iprot);
       bean.setSuccess(elem0);
                  }else{
                    com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }
                  break;
                  /*
                  case 1: //ERROR
                  bean.setSoaException(new SoaException());
                  new SoaExceptionSerializer().read(bean.getSoaException(),iprot);
                  break A;
                  */
                  default:
                  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
              }
              iprot.readStructEnd();

              validate(bean);
              return bean;
            }
            
      @Override
      public void write(listDiagnoses_result bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("listDiagnoses_result"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("success", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, (short) 0));
            com.isuwang.dapeng.json.demo.domain.ListDiagnoseResponse elem0 = bean.getSuccess();
             new com.isuwang.dapeng.json.demo.domain.serializer.ListDiagnoseResponseSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
            
      public void validate(listDiagnoses_result bean) throws TException{
      
              if(bean.getSuccess() == null)
              throw new SoaException(SoaBaseCode.NotNull, "success字段不允许为空");
            
                if(bean.getSuccess() != null)
                new com.isuwang.dapeng.json.demo.domain.serializer.ListDiagnoseResponseSerializer().validate(bean.getSuccess());
              
    }
    

            @Override
            public String toString(listDiagnoses_result bean) { return bean == null ? "null" : bean.toString(); }
          }

            public static class listDiagnoses<I extends com.isuwang.dapeng.json.demo.service.OrderServiceAsync> extends SoaFunctionDefinition.Async<I, listDiagnoses_args, listDiagnoses_result>
            {
              public listDiagnoses()
              {
                super("listDiagnoses", new ListDiagnoses_argsSerializer(),  new ListDiagnoses_resultSerializer());
              }

              @Override
              public CompletableFuture<listDiagnoses_result> apply(OrderServiceAsync iface, listDiagnoses_args listDiagnoses_args) throws SoaException
              {

                CompletableFuture<com.isuwang.dapeng.json.demo.domain.ListDiagnoseResponse> result = (CompletableFuture<com.isuwang.dapeng.json.demo.domain.ListDiagnoseResponse>) iface.listDiagnoses(listDiagnoses_args.listDiagnoseRequest ,50000);

                return result.thenApply(( com.isuwang.dapeng.json.demo.domain.ListDiagnoseResponse i) -> {
                  listDiagnoses_result res = new listDiagnoses_result();
                  res.setSuccess(i);
                  return res;
              });
              }

            }
          
            public static class listTreatPlans_args {
            

            @Override
            public String toString(){
              StringBuilder stringBuilder = new StringBuilder("{");
                
                if(stringBuilder.lastIndexOf(",") > 0)
                stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                stringBuilder.append("}");

              return stringBuilder.toString();
            }

          }

            public static class listTreatPlans_result {

            
                  private com.isuwang.dapeng.json.demo.domain.ListTreatPlansResponse success;
                  public com.isuwang.dapeng.json.demo.domain.ListTreatPlansResponse getSuccess(){
                  return success;
                }

                  public void setSuccess(com.isuwang.dapeng.json.demo.domain.ListTreatPlansResponse success){
                  this.success = success;
                }


                  @Override
                  public String toString(){
                  StringBuilder stringBuilder = new StringBuilder("{");
                    
      stringBuilder.append("\"").append("success").append("\":").append(this.success == null ? "null" : this.success.toString()).append(",");
    
                    stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                    stringBuilder.append("}");

                  return stringBuilder.toString();
                }

                
          }

            public static class ListTreatPlans_argsSerializer implements BeanSerializer<listTreatPlans_args>{
            
      @Override
      public listTreatPlans_args read(TProtocol iprot) throws TException{

      listTreatPlans_args bean = new listTreatPlans_args();
      com.isuwang.org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();

      while(true){
        schemeField = iprot.readFieldBegin();
        if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

        switch(schemeField.id){
          
          
            default:
            com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate(bean);
      return bean;
    }
    
      @Override
      public void write(listTreatPlans_args bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("listTreatPlans_args"));

      
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(listTreatPlans_args bean) throws TException{
      
    }
    

            @Override
            public String toString(listTreatPlans_args bean) { return bean == null ? "null" : bean.toString(); }

          }

            public static class ListTreatPlans_resultSerializer implements BeanSerializer<listTreatPlans_result>{
            @Override
            public listTreatPlans_result read(TProtocol iprot) throws TException{

              listTreatPlans_result bean = new listTreatPlans_result();
              com.isuwang.org.apache.thrift.protocol.TField schemeField;
              iprot.readStructBegin();

              while(true){
                schemeField = iprot.readFieldBegin();
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

                switch(schemeField.id){
                  case 0:  //SUCCESS
                  if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRUCT){
                    com.isuwang.dapeng.json.demo.domain.ListTreatPlansResponse elem0 = new com.isuwang.dapeng.json.demo.domain.ListTreatPlansResponse();
        elem0=new com.isuwang.dapeng.json.demo.domain.serializer.ListTreatPlansResponseSerializer().read(iprot);
       bean.setSuccess(elem0);
                  }else{
                    com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }
                  break;
                  /*
                  case 1: //ERROR
                  bean.setSoaException(new SoaException());
                  new SoaExceptionSerializer().read(bean.getSoaException(),iprot);
                  break A;
                  */
                  default:
                  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
              }
              iprot.readStructEnd();

              validate(bean);
              return bean;
            }
            
      @Override
      public void write(listTreatPlans_result bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("listTreatPlans_result"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("success", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, (short) 0));
            com.isuwang.dapeng.json.demo.domain.ListTreatPlansResponse elem0 = bean.getSuccess();
             new com.isuwang.dapeng.json.demo.domain.serializer.ListTreatPlansResponseSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
            
      public void validate(listTreatPlans_result bean) throws TException{
      
              if(bean.getSuccess() == null)
              throw new SoaException(SoaBaseCode.NotNull, "success字段不允许为空");
            
                if(bean.getSuccess() != null)
                new com.isuwang.dapeng.json.demo.domain.serializer.ListTreatPlansResponseSerializer().validate(bean.getSuccess());
              
    }
    

            @Override
            public String toString(listTreatPlans_result bean) { return bean == null ? "null" : bean.toString(); }
          }

            public static class listTreatPlans<I extends com.isuwang.dapeng.json.demo.service.OrderServiceAsync> extends SoaFunctionDefinition.Async<I, listTreatPlans_args, listTreatPlans_result>
            {
              public listTreatPlans()
              {
                super("listTreatPlans", new ListTreatPlans_argsSerializer(),  new ListTreatPlans_resultSerializer());
              }

              @Override
              public CompletableFuture<listTreatPlans_result> apply(OrderServiceAsync iface, listTreatPlans_args listTreatPlans_args) throws SoaException
              {

                CompletableFuture<com.isuwang.dapeng.json.demo.domain.ListTreatPlansResponse> result = (CompletableFuture<com.isuwang.dapeng.json.demo.domain.ListTreatPlansResponse>) iface.listTreatPlans( 50000);

                return result.thenApply(( com.isuwang.dapeng.json.demo.domain.ListTreatPlansResponse i) -> {
                  listTreatPlans_result res = new listTreatPlans_result();
                  res.setSuccess(i);
                  return res;
              });
              }

            }
          
            public static class listAppointmentDoctors_args {
            
                private com.isuwang.dapeng.json.demo.domain.ListAppointmentDoctorsRequest request;
                public com.isuwang.dapeng.json.demo.domain.ListAppointmentDoctorsRequest getRequest(){
                return this.request;
              }
                public void setRequest(com.isuwang.dapeng.json.demo.domain.ListAppointmentDoctorsRequest request){
                this.request = request;
              }
              

            @Override
            public String toString(){
              StringBuilder stringBuilder = new StringBuilder("{");
                
      stringBuilder.append("\"").append("request").append("\":").append(this.request == null ? "null" : this.request.toString()).append(",");
    
                if(stringBuilder.lastIndexOf(",") > 0)
                stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                stringBuilder.append("}");

              return stringBuilder.toString();
            }

          }

            public static class listAppointmentDoctors_result {

            
                  private com.isuwang.dapeng.json.demo.domain.AppointmentDoctorsResponse success;
                  public com.isuwang.dapeng.json.demo.domain.AppointmentDoctorsResponse getSuccess(){
                  return success;
                }

                  public void setSuccess(com.isuwang.dapeng.json.demo.domain.AppointmentDoctorsResponse success){
                  this.success = success;
                }


                  @Override
                  public String toString(){
                  StringBuilder stringBuilder = new StringBuilder("{");
                    
      stringBuilder.append("\"").append("success").append("\":").append(this.success == null ? "null" : this.success.toString()).append(",");
    
                    stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                    stringBuilder.append("}");

                  return stringBuilder.toString();
                }

                
          }

            public static class ListAppointmentDoctors_argsSerializer implements BeanSerializer<listAppointmentDoctors_args>{
            
      @Override
      public listAppointmentDoctors_args read(TProtocol iprot) throws TException{

      listAppointmentDoctors_args bean = new listAppointmentDoctors_args();
      com.isuwang.org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();

      while(true){
        schemeField = iprot.readFieldBegin();
        if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

        switch(schemeField.id){
          
              case 1:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRUCT){
              com.isuwang.dapeng.json.demo.domain.ListAppointmentDoctorsRequest elem0 = new com.isuwang.dapeng.json.demo.domain.ListAppointmentDoctorsRequest();
        elem0=new com.isuwang.dapeng.json.demo.domain.serializer.ListAppointmentDoctorsRequestSerializer().read(iprot);
       bean.setRequest(elem0);
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
          
            default:
            com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate(bean);
      return bean;
    }
    
      @Override
      public void write(listAppointmentDoctors_args bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("listAppointmentDoctors_args"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("request", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, (short) 1));
            com.isuwang.dapeng.json.demo.domain.ListAppointmentDoctorsRequest elem0 = bean.getRequest();
             new com.isuwang.dapeng.json.demo.domain.serializer.ListAppointmentDoctorsRequestSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(listAppointmentDoctors_args bean) throws TException{
      
              if(bean.getRequest() == null)
              throw new SoaException(SoaBaseCode.NotNull, "request字段不允许为空");
            
                if(bean.getRequest() != null)
                new com.isuwang.dapeng.json.demo.domain.serializer.ListAppointmentDoctorsRequestSerializer().validate(bean.getRequest());
              
    }
    

            @Override
            public String toString(listAppointmentDoctors_args bean) { return bean == null ? "null" : bean.toString(); }

          }

            public static class ListAppointmentDoctors_resultSerializer implements BeanSerializer<listAppointmentDoctors_result>{
            @Override
            public listAppointmentDoctors_result read(TProtocol iprot) throws TException{

              listAppointmentDoctors_result bean = new listAppointmentDoctors_result();
              com.isuwang.org.apache.thrift.protocol.TField schemeField;
              iprot.readStructBegin();

              while(true){
                schemeField = iprot.readFieldBegin();
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

                switch(schemeField.id){
                  case 0:  //SUCCESS
                  if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRUCT){
                    com.isuwang.dapeng.json.demo.domain.AppointmentDoctorsResponse elem0 = new com.isuwang.dapeng.json.demo.domain.AppointmentDoctorsResponse();
        elem0=new com.isuwang.dapeng.json.demo.domain.serializer.AppointmentDoctorsResponseSerializer().read(iprot);
       bean.setSuccess(elem0);
                  }else{
                    com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }
                  break;
                  /*
                  case 1: //ERROR
                  bean.setSoaException(new SoaException());
                  new SoaExceptionSerializer().read(bean.getSoaException(),iprot);
                  break A;
                  */
                  default:
                  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
              }
              iprot.readStructEnd();

              validate(bean);
              return bean;
            }
            
      @Override
      public void write(listAppointmentDoctors_result bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("listAppointmentDoctors_result"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("success", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, (short) 0));
            com.isuwang.dapeng.json.demo.domain.AppointmentDoctorsResponse elem0 = bean.getSuccess();
             new com.isuwang.dapeng.json.demo.domain.serializer.AppointmentDoctorsResponseSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
            
      public void validate(listAppointmentDoctors_result bean) throws TException{
      
              if(bean.getSuccess() == null)
              throw new SoaException(SoaBaseCode.NotNull, "success字段不允许为空");
            
                if(bean.getSuccess() != null)
                new com.isuwang.dapeng.json.demo.domain.serializer.AppointmentDoctorsResponseSerializer().validate(bean.getSuccess());
              
    }
    

            @Override
            public String toString(listAppointmentDoctors_result bean) { return bean == null ? "null" : bean.toString(); }
          }

            public static class listAppointmentDoctors<I extends com.isuwang.dapeng.json.demo.service.OrderServiceAsync> extends SoaFunctionDefinition.Async<I, listAppointmentDoctors_args, listAppointmentDoctors_result>
            {
              public listAppointmentDoctors()
              {
                super("listAppointmentDoctors", new ListAppointmentDoctors_argsSerializer(),  new ListAppointmentDoctors_resultSerializer());
              }

              @Override
              public CompletableFuture<listAppointmentDoctors_result> apply(OrderServiceAsync iface, listAppointmentDoctors_args listAppointmentDoctors_args) throws SoaException
              {

                CompletableFuture<com.isuwang.dapeng.json.demo.domain.AppointmentDoctorsResponse> result = (CompletableFuture<com.isuwang.dapeng.json.demo.domain.AppointmentDoctorsResponse>) iface.listAppointmentDoctors(listAppointmentDoctors_args.request ,50000);

                return result.thenApply(( com.isuwang.dapeng.json.demo.domain.AppointmentDoctorsResponse i) -> {
                  listAppointmentDoctors_result res = new listAppointmentDoctors_result();
                  res.setSuccess(i);
                  return res;
              });
              }

            }
          
            public static class listAppointmentForDoctorName_args {
            
                private com.isuwang.dapeng.json.demo.domain.ListAppointmentForDoctorNameRequest listAppointmentForDoctorNameRequest;
                public com.isuwang.dapeng.json.demo.domain.ListAppointmentForDoctorNameRequest getListAppointmentForDoctorNameRequest(){
                return this.listAppointmentForDoctorNameRequest;
              }
                public void setListAppointmentForDoctorNameRequest(com.isuwang.dapeng.json.demo.domain.ListAppointmentForDoctorNameRequest listAppointmentForDoctorNameRequest){
                this.listAppointmentForDoctorNameRequest = listAppointmentForDoctorNameRequest;
              }
              

            @Override
            public String toString(){
              StringBuilder stringBuilder = new StringBuilder("{");
                
      stringBuilder.append("\"").append("listAppointmentForDoctorNameRequest").append("\":").append(this.listAppointmentForDoctorNameRequest == null ? "null" : this.listAppointmentForDoctorNameRequest.toString()).append(",");
    
                if(stringBuilder.lastIndexOf(",") > 0)
                stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                stringBuilder.append("}");

              return stringBuilder.toString();
            }

          }

            public static class listAppointmentForDoctorName_result {

            
                  private com.isuwang.dapeng.json.demo.domain.AppointmentDoctorsResponse success;
                  public com.isuwang.dapeng.json.demo.domain.AppointmentDoctorsResponse getSuccess(){
                  return success;
                }

                  public void setSuccess(com.isuwang.dapeng.json.demo.domain.AppointmentDoctorsResponse success){
                  this.success = success;
                }


                  @Override
                  public String toString(){
                  StringBuilder stringBuilder = new StringBuilder("{");
                    
      stringBuilder.append("\"").append("success").append("\":").append(this.success == null ? "null" : this.success.toString()).append(",");
    
                    stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                    stringBuilder.append("}");

                  return stringBuilder.toString();
                }

                
          }

            public static class ListAppointmentForDoctorName_argsSerializer implements BeanSerializer<listAppointmentForDoctorName_args>{
            
      @Override
      public listAppointmentForDoctorName_args read(TProtocol iprot) throws TException{

      listAppointmentForDoctorName_args bean = new listAppointmentForDoctorName_args();
      com.isuwang.org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();

      while(true){
        schemeField = iprot.readFieldBegin();
        if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

        switch(schemeField.id){
          
              case 1:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRUCT){
              com.isuwang.dapeng.json.demo.domain.ListAppointmentForDoctorNameRequest elem0 = new com.isuwang.dapeng.json.demo.domain.ListAppointmentForDoctorNameRequest();
        elem0=new com.isuwang.dapeng.json.demo.domain.serializer.ListAppointmentForDoctorNameRequestSerializer().read(iprot);
       bean.setListAppointmentForDoctorNameRequest(elem0);
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
          
            default:
            com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate(bean);
      return bean;
    }
    
      @Override
      public void write(listAppointmentForDoctorName_args bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("listAppointmentForDoctorName_args"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("listAppointmentForDoctorNameRequest", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, (short) 1));
            com.isuwang.dapeng.json.demo.domain.ListAppointmentForDoctorNameRequest elem0 = bean.getListAppointmentForDoctorNameRequest();
             new com.isuwang.dapeng.json.demo.domain.serializer.ListAppointmentForDoctorNameRequestSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(listAppointmentForDoctorName_args bean) throws TException{
      
              if(bean.getListAppointmentForDoctorNameRequest() == null)
              throw new SoaException(SoaBaseCode.NotNull, "listAppointmentForDoctorNameRequest字段不允许为空");
            
                if(bean.getListAppointmentForDoctorNameRequest() != null)
                new com.isuwang.dapeng.json.demo.domain.serializer.ListAppointmentForDoctorNameRequestSerializer().validate(bean.getListAppointmentForDoctorNameRequest());
              
    }
    

            @Override
            public String toString(listAppointmentForDoctorName_args bean) { return bean == null ? "null" : bean.toString(); }

          }

            public static class ListAppointmentForDoctorName_resultSerializer implements BeanSerializer<listAppointmentForDoctorName_result>{
            @Override
            public listAppointmentForDoctorName_result read(TProtocol iprot) throws TException{

              listAppointmentForDoctorName_result bean = new listAppointmentForDoctorName_result();
              com.isuwang.org.apache.thrift.protocol.TField schemeField;
              iprot.readStructBegin();

              while(true){
                schemeField = iprot.readFieldBegin();
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

                switch(schemeField.id){
                  case 0:  //SUCCESS
                  if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRUCT){
                    com.isuwang.dapeng.json.demo.domain.AppointmentDoctorsResponse elem0 = new com.isuwang.dapeng.json.demo.domain.AppointmentDoctorsResponse();
        elem0=new com.isuwang.dapeng.json.demo.domain.serializer.AppointmentDoctorsResponseSerializer().read(iprot);
       bean.setSuccess(elem0);
                  }else{
                    com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }
                  break;
                  /*
                  case 1: //ERROR
                  bean.setSoaException(new SoaException());
                  new SoaExceptionSerializer().read(bean.getSoaException(),iprot);
                  break A;
                  */
                  default:
                  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
              }
              iprot.readStructEnd();

              validate(bean);
              return bean;
            }
            
      @Override
      public void write(listAppointmentForDoctorName_result bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("listAppointmentForDoctorName_result"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("success", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, (short) 0));
            com.isuwang.dapeng.json.demo.domain.AppointmentDoctorsResponse elem0 = bean.getSuccess();
             new com.isuwang.dapeng.json.demo.domain.serializer.AppointmentDoctorsResponseSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
            
      public void validate(listAppointmentForDoctorName_result bean) throws TException{
      
              if(bean.getSuccess() == null)
              throw new SoaException(SoaBaseCode.NotNull, "success字段不允许为空");
            
                if(bean.getSuccess() != null)
                new com.isuwang.dapeng.json.demo.domain.serializer.AppointmentDoctorsResponseSerializer().validate(bean.getSuccess());
              
    }
    

            @Override
            public String toString(listAppointmentForDoctorName_result bean) { return bean == null ? "null" : bean.toString(); }
          }

            public static class listAppointmentForDoctorName<I extends com.isuwang.dapeng.json.demo.service.OrderServiceAsync> extends SoaFunctionDefinition.Async<I, listAppointmentForDoctorName_args, listAppointmentForDoctorName_result>
            {
              public listAppointmentForDoctorName()
              {
                super("listAppointmentForDoctorName", new ListAppointmentForDoctorName_argsSerializer(),  new ListAppointmentForDoctorName_resultSerializer());
              }

              @Override
              public CompletableFuture<listAppointmentForDoctorName_result> apply(OrderServiceAsync iface, listAppointmentForDoctorName_args listAppointmentForDoctorName_args) throws SoaException
              {

                CompletableFuture<com.isuwang.dapeng.json.demo.domain.AppointmentDoctorsResponse> result = (CompletableFuture<com.isuwang.dapeng.json.demo.domain.AppointmentDoctorsResponse>) iface.listAppointmentForDoctorName(listAppointmentForDoctorName_args.listAppointmentForDoctorNameRequest ,50000);

                return result.thenApply(( com.isuwang.dapeng.json.demo.domain.AppointmentDoctorsResponse i) -> {
                  listAppointmentForDoctorName_result res = new listAppointmentForDoctorName_result();
                  res.setSuccess(i);
                  return res;
              });
              }

            }
          
            public static class listAppointmentDoctorsByDate_args {
            
                private com.isuwang.dapeng.json.demo.domain.AppointmentDoctorsByDateRequest request;
                public com.isuwang.dapeng.json.demo.domain.AppointmentDoctorsByDateRequest getRequest(){
                return this.request;
              }
                public void setRequest(com.isuwang.dapeng.json.demo.domain.AppointmentDoctorsByDateRequest request){
                this.request = request;
              }
              

            @Override
            public String toString(){
              StringBuilder stringBuilder = new StringBuilder("{");
                
      stringBuilder.append("\"").append("request").append("\":").append(this.request == null ? "null" : this.request.toString()).append(",");
    
                if(stringBuilder.lastIndexOf(",") > 0)
                stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                stringBuilder.append("}");

              return stringBuilder.toString();
            }

          }

            public static class listAppointmentDoctorsByDate_result {

            
                  private com.isuwang.dapeng.json.demo.domain.AppointmentDoctorsByDateResponse success;
                  public com.isuwang.dapeng.json.demo.domain.AppointmentDoctorsByDateResponse getSuccess(){
                  return success;
                }

                  public void setSuccess(com.isuwang.dapeng.json.demo.domain.AppointmentDoctorsByDateResponse success){
                  this.success = success;
                }


                  @Override
                  public String toString(){
                  StringBuilder stringBuilder = new StringBuilder("{");
                    
      stringBuilder.append("\"").append("success").append("\":").append(this.success == null ? "null" : this.success.toString()).append(",");
    
                    stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                    stringBuilder.append("}");

                  return stringBuilder.toString();
                }

                
          }

            public static class ListAppointmentDoctorsByDate_argsSerializer implements BeanSerializer<listAppointmentDoctorsByDate_args>{
            
      @Override
      public listAppointmentDoctorsByDate_args read(TProtocol iprot) throws TException{

      listAppointmentDoctorsByDate_args bean = new listAppointmentDoctorsByDate_args();
      com.isuwang.org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();

      while(true){
        schemeField = iprot.readFieldBegin();
        if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

        switch(schemeField.id){
          
              case 1:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRUCT){
              com.isuwang.dapeng.json.demo.domain.AppointmentDoctorsByDateRequest elem0 = new com.isuwang.dapeng.json.demo.domain.AppointmentDoctorsByDateRequest();
        elem0=new com.isuwang.dapeng.json.demo.domain.serializer.AppointmentDoctorsByDateRequestSerializer().read(iprot);
       bean.setRequest(elem0);
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
          
            default:
            com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate(bean);
      return bean;
    }
    
      @Override
      public void write(listAppointmentDoctorsByDate_args bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("listAppointmentDoctorsByDate_args"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("request", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, (short) 1));
            com.isuwang.dapeng.json.demo.domain.AppointmentDoctorsByDateRequest elem0 = bean.getRequest();
             new com.isuwang.dapeng.json.demo.domain.serializer.AppointmentDoctorsByDateRequestSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(listAppointmentDoctorsByDate_args bean) throws TException{
      
              if(bean.getRequest() == null)
              throw new SoaException(SoaBaseCode.NotNull, "request字段不允许为空");
            
                if(bean.getRequest() != null)
                new com.isuwang.dapeng.json.demo.domain.serializer.AppointmentDoctorsByDateRequestSerializer().validate(bean.getRequest());
              
    }
    

            @Override
            public String toString(listAppointmentDoctorsByDate_args bean) { return bean == null ? "null" : bean.toString(); }

          }

            public static class ListAppointmentDoctorsByDate_resultSerializer implements BeanSerializer<listAppointmentDoctorsByDate_result>{
            @Override
            public listAppointmentDoctorsByDate_result read(TProtocol iprot) throws TException{

              listAppointmentDoctorsByDate_result bean = new listAppointmentDoctorsByDate_result();
              com.isuwang.org.apache.thrift.protocol.TField schemeField;
              iprot.readStructBegin();

              while(true){
                schemeField = iprot.readFieldBegin();
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

                switch(schemeField.id){
                  case 0:  //SUCCESS
                  if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRUCT){
                    com.isuwang.dapeng.json.demo.domain.AppointmentDoctorsByDateResponse elem0 = new com.isuwang.dapeng.json.demo.domain.AppointmentDoctorsByDateResponse();
        elem0=new com.isuwang.dapeng.json.demo.domain.serializer.AppointmentDoctorsByDateResponseSerializer().read(iprot);
       bean.setSuccess(elem0);
                  }else{
                    com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }
                  break;
                  /*
                  case 1: //ERROR
                  bean.setSoaException(new SoaException());
                  new SoaExceptionSerializer().read(bean.getSoaException(),iprot);
                  break A;
                  */
                  default:
                  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
              }
              iprot.readStructEnd();

              validate(bean);
              return bean;
            }
            
      @Override
      public void write(listAppointmentDoctorsByDate_result bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("listAppointmentDoctorsByDate_result"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("success", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, (short) 0));
            com.isuwang.dapeng.json.demo.domain.AppointmentDoctorsByDateResponse elem0 = bean.getSuccess();
             new com.isuwang.dapeng.json.demo.domain.serializer.AppointmentDoctorsByDateResponseSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
            
      public void validate(listAppointmentDoctorsByDate_result bean) throws TException{
      
              if(bean.getSuccess() == null)
              throw new SoaException(SoaBaseCode.NotNull, "success字段不允许为空");
            
                if(bean.getSuccess() != null)
                new com.isuwang.dapeng.json.demo.domain.serializer.AppointmentDoctorsByDateResponseSerializer().validate(bean.getSuccess());
              
    }
    

            @Override
            public String toString(listAppointmentDoctorsByDate_result bean) { return bean == null ? "null" : bean.toString(); }
          }

            public static class listAppointmentDoctorsByDate<I extends com.isuwang.dapeng.json.demo.service.OrderServiceAsync> extends SoaFunctionDefinition.Async<I, listAppointmentDoctorsByDate_args, listAppointmentDoctorsByDate_result>
            {
              public listAppointmentDoctorsByDate()
              {
                super("listAppointmentDoctorsByDate", new ListAppointmentDoctorsByDate_argsSerializer(),  new ListAppointmentDoctorsByDate_resultSerializer());
              }

              @Override
              public CompletableFuture<listAppointmentDoctorsByDate_result> apply(OrderServiceAsync iface, listAppointmentDoctorsByDate_args listAppointmentDoctorsByDate_args) throws SoaException
              {

                CompletableFuture<com.isuwang.dapeng.json.demo.domain.AppointmentDoctorsByDateResponse> result = (CompletableFuture<com.isuwang.dapeng.json.demo.domain.AppointmentDoctorsByDateResponse>) iface.listAppointmentDoctorsByDate(listAppointmentDoctorsByDate_args.request ,50000);

                return result.thenApply(( com.isuwang.dapeng.json.demo.domain.AppointmentDoctorsByDateResponse i) -> {
                  listAppointmentDoctorsByDate_result res = new listAppointmentDoctorsByDate_result();
                  res.setSuccess(i);
                  return res;
              });
              }

            }
          
            public static class listAppointmentPatients_args {
            
                private com.isuwang.dapeng.json.demo.domain.ListAppointmentPatientRequest request;
                public com.isuwang.dapeng.json.demo.domain.ListAppointmentPatientRequest getRequest(){
                return this.request;
              }
                public void setRequest(com.isuwang.dapeng.json.demo.domain.ListAppointmentPatientRequest request){
                this.request = request;
              }
              

            @Override
            public String toString(){
              StringBuilder stringBuilder = new StringBuilder("{");
                
      stringBuilder.append("\"").append("request").append("\":").append(this.request == null ? "null" : this.request.toString()).append(",");
    
                if(stringBuilder.lastIndexOf(",") > 0)
                stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                stringBuilder.append("}");

              return stringBuilder.toString();
            }

          }

            public static class listAppointmentPatients_result {

            
                  private com.isuwang.dapeng.json.demo.domain.ListAppointmentPatientResponse success;
                  public com.isuwang.dapeng.json.demo.domain.ListAppointmentPatientResponse getSuccess(){
                  return success;
                }

                  public void setSuccess(com.isuwang.dapeng.json.demo.domain.ListAppointmentPatientResponse success){
                  this.success = success;
                }


                  @Override
                  public String toString(){
                  StringBuilder stringBuilder = new StringBuilder("{");
                    
      stringBuilder.append("\"").append("success").append("\":").append(this.success == null ? "null" : this.success.toString()).append(",");
    
                    stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                    stringBuilder.append("}");

                  return stringBuilder.toString();
                }

                
          }

            public static class ListAppointmentPatients_argsSerializer implements BeanSerializer<listAppointmentPatients_args>{
            
      @Override
      public listAppointmentPatients_args read(TProtocol iprot) throws TException{

      listAppointmentPatients_args bean = new listAppointmentPatients_args();
      com.isuwang.org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();

      while(true){
        schemeField = iprot.readFieldBegin();
        if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

        switch(schemeField.id){
          
              case 1:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRUCT){
              com.isuwang.dapeng.json.demo.domain.ListAppointmentPatientRequest elem0 = new com.isuwang.dapeng.json.demo.domain.ListAppointmentPatientRequest();
        elem0=new com.isuwang.dapeng.json.demo.domain.serializer.ListAppointmentPatientRequestSerializer().read(iprot);
       bean.setRequest(elem0);
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
          
            default:
            com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate(bean);
      return bean;
    }
    
      @Override
      public void write(listAppointmentPatients_args bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("listAppointmentPatients_args"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("request", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, (short) 1));
            com.isuwang.dapeng.json.demo.domain.ListAppointmentPatientRequest elem0 = bean.getRequest();
             new com.isuwang.dapeng.json.demo.domain.serializer.ListAppointmentPatientRequestSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(listAppointmentPatients_args bean) throws TException{
      
              if(bean.getRequest() == null)
              throw new SoaException(SoaBaseCode.NotNull, "request字段不允许为空");
            
                if(bean.getRequest() != null)
                new com.isuwang.dapeng.json.demo.domain.serializer.ListAppointmentPatientRequestSerializer().validate(bean.getRequest());
              
    }
    

            @Override
            public String toString(listAppointmentPatients_args bean) { return bean == null ? "null" : bean.toString(); }

          }

            public static class ListAppointmentPatients_resultSerializer implements BeanSerializer<listAppointmentPatients_result>{
            @Override
            public listAppointmentPatients_result read(TProtocol iprot) throws TException{

              listAppointmentPatients_result bean = new listAppointmentPatients_result();
              com.isuwang.org.apache.thrift.protocol.TField schemeField;
              iprot.readStructBegin();

              while(true){
                schemeField = iprot.readFieldBegin();
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

                switch(schemeField.id){
                  case 0:  //SUCCESS
                  if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRUCT){
                    com.isuwang.dapeng.json.demo.domain.ListAppointmentPatientResponse elem0 = new com.isuwang.dapeng.json.demo.domain.ListAppointmentPatientResponse();
        elem0=new com.isuwang.dapeng.json.demo.domain.serializer.ListAppointmentPatientResponseSerializer().read(iprot);
       bean.setSuccess(elem0);
                  }else{
                    com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }
                  break;
                  /*
                  case 1: //ERROR
                  bean.setSoaException(new SoaException());
                  new SoaExceptionSerializer().read(bean.getSoaException(),iprot);
                  break A;
                  */
                  default:
                  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
              }
              iprot.readStructEnd();

              validate(bean);
              return bean;
            }
            
      @Override
      public void write(listAppointmentPatients_result bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("listAppointmentPatients_result"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("success", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, (short) 0));
            com.isuwang.dapeng.json.demo.domain.ListAppointmentPatientResponse elem0 = bean.getSuccess();
             new com.isuwang.dapeng.json.demo.domain.serializer.ListAppointmentPatientResponseSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
            
      public void validate(listAppointmentPatients_result bean) throws TException{
      
              if(bean.getSuccess() == null)
              throw new SoaException(SoaBaseCode.NotNull, "success字段不允许为空");
            
                if(bean.getSuccess() != null)
                new com.isuwang.dapeng.json.demo.domain.serializer.ListAppointmentPatientResponseSerializer().validate(bean.getSuccess());
              
    }
    

            @Override
            public String toString(listAppointmentPatients_result bean) { return bean == null ? "null" : bean.toString(); }
          }

            public static class listAppointmentPatients<I extends com.isuwang.dapeng.json.demo.service.OrderServiceAsync> extends SoaFunctionDefinition.Async<I, listAppointmentPatients_args, listAppointmentPatients_result>
            {
              public listAppointmentPatients()
              {
                super("listAppointmentPatients", new ListAppointmentPatients_argsSerializer(),  new ListAppointmentPatients_resultSerializer());
              }

              @Override
              public CompletableFuture<listAppointmentPatients_result> apply(OrderServiceAsync iface, listAppointmentPatients_args listAppointmentPatients_args) throws SoaException
              {

                CompletableFuture<com.isuwang.dapeng.json.demo.domain.ListAppointmentPatientResponse> result = (CompletableFuture<com.isuwang.dapeng.json.demo.domain.ListAppointmentPatientResponse>) iface.listAppointmentPatients(listAppointmentPatients_args.request ,50000);

                return result.thenApply(( com.isuwang.dapeng.json.demo.domain.ListAppointmentPatientResponse i) -> {
                  listAppointmentPatients_result res = new listAppointmentPatients_result();
                  res.setSuccess(i);
                  return res;
              });
              }

            }
          
            public static class listDoctorOnDuty_args {
            
                private com.isuwang.dapeng.json.demo.domain.PageRequest pageRequest;
                public com.isuwang.dapeng.json.demo.domain.PageRequest getPageRequest(){
                return this.pageRequest;
              }
                public void setPageRequest(com.isuwang.dapeng.json.demo.domain.PageRequest pageRequest){
                this.pageRequest = pageRequest;
              }
              

            @Override
            public String toString(){
              StringBuilder stringBuilder = new StringBuilder("{");
                
      stringBuilder.append("\"").append("pageRequest").append("\":").append(this.pageRequest == null ? "null" : this.pageRequest.toString()).append(",");
    
                if(stringBuilder.lastIndexOf(",") > 0)
                stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                stringBuilder.append("}");

              return stringBuilder.toString();
            }

          }

            public static class listDoctorOnDuty_result {

            
                  private com.isuwang.dapeng.json.demo.domain.ListDoctorOnDutyResponse success;
                  public com.isuwang.dapeng.json.demo.domain.ListDoctorOnDutyResponse getSuccess(){
                  return success;
                }

                  public void setSuccess(com.isuwang.dapeng.json.demo.domain.ListDoctorOnDutyResponse success){
                  this.success = success;
                }


                  @Override
                  public String toString(){
                  StringBuilder stringBuilder = new StringBuilder("{");
                    
      stringBuilder.append("\"").append("success").append("\":").append(this.success == null ? "null" : this.success.toString()).append(",");
    
                    stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                    stringBuilder.append("}");

                  return stringBuilder.toString();
                }

                
          }

            public static class ListDoctorOnDuty_argsSerializer implements BeanSerializer<listDoctorOnDuty_args>{
            
      @Override
      public listDoctorOnDuty_args read(TProtocol iprot) throws TException{

      listDoctorOnDuty_args bean = new listDoctorOnDuty_args();
      com.isuwang.org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();

      while(true){
        schemeField = iprot.readFieldBegin();
        if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

        switch(schemeField.id){
          
              case 1:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRUCT){
              com.isuwang.dapeng.json.demo.domain.PageRequest elem0 = new com.isuwang.dapeng.json.demo.domain.PageRequest();
        elem0=new com.isuwang.dapeng.json.demo.domain.serializer.PageRequestSerializer().read(iprot);
       bean.setPageRequest(elem0);
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
          
            default:
            com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate(bean);
      return bean;
    }
    
      @Override
      public void write(listDoctorOnDuty_args bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("listDoctorOnDuty_args"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("pageRequest", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, (short) 1));
            com.isuwang.dapeng.json.demo.domain.PageRequest elem0 = bean.getPageRequest();
             new com.isuwang.dapeng.json.demo.domain.serializer.PageRequestSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(listDoctorOnDuty_args bean) throws TException{
      
              if(bean.getPageRequest() == null)
              throw new SoaException(SoaBaseCode.NotNull, "pageRequest字段不允许为空");
            
                if(bean.getPageRequest() != null)
                new com.isuwang.dapeng.json.demo.domain.serializer.PageRequestSerializer().validate(bean.getPageRequest());
              
    }
    

            @Override
            public String toString(listDoctorOnDuty_args bean) { return bean == null ? "null" : bean.toString(); }

          }

            public static class ListDoctorOnDuty_resultSerializer implements BeanSerializer<listDoctorOnDuty_result>{
            @Override
            public listDoctorOnDuty_result read(TProtocol iprot) throws TException{

              listDoctorOnDuty_result bean = new listDoctorOnDuty_result();
              com.isuwang.org.apache.thrift.protocol.TField schemeField;
              iprot.readStructBegin();

              while(true){
                schemeField = iprot.readFieldBegin();
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

                switch(schemeField.id){
                  case 0:  //SUCCESS
                  if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRUCT){
                    com.isuwang.dapeng.json.demo.domain.ListDoctorOnDutyResponse elem0 = new com.isuwang.dapeng.json.demo.domain.ListDoctorOnDutyResponse();
        elem0=new com.isuwang.dapeng.json.demo.domain.serializer.ListDoctorOnDutyResponseSerializer().read(iprot);
       bean.setSuccess(elem0);
                  }else{
                    com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }
                  break;
                  /*
                  case 1: //ERROR
                  bean.setSoaException(new SoaException());
                  new SoaExceptionSerializer().read(bean.getSoaException(),iprot);
                  break A;
                  */
                  default:
                  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
              }
              iprot.readStructEnd();

              validate(bean);
              return bean;
            }
            
      @Override
      public void write(listDoctorOnDuty_result bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("listDoctorOnDuty_result"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("success", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, (short) 0));
            com.isuwang.dapeng.json.demo.domain.ListDoctorOnDutyResponse elem0 = bean.getSuccess();
             new com.isuwang.dapeng.json.demo.domain.serializer.ListDoctorOnDutyResponseSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
            
      public void validate(listDoctorOnDuty_result bean) throws TException{
      
              if(bean.getSuccess() == null)
              throw new SoaException(SoaBaseCode.NotNull, "success字段不允许为空");
            
                if(bean.getSuccess() != null)
                new com.isuwang.dapeng.json.demo.domain.serializer.ListDoctorOnDutyResponseSerializer().validate(bean.getSuccess());
              
    }
    

            @Override
            public String toString(listDoctorOnDuty_result bean) { return bean == null ? "null" : bean.toString(); }
          }

            public static class listDoctorOnDuty<I extends com.isuwang.dapeng.json.demo.service.OrderServiceAsync> extends SoaFunctionDefinition.Async<I, listDoctorOnDuty_args, listDoctorOnDuty_result>
            {
              public listDoctorOnDuty()
              {
                super("listDoctorOnDuty", new ListDoctorOnDuty_argsSerializer(),  new ListDoctorOnDuty_resultSerializer());
              }

              @Override
              public CompletableFuture<listDoctorOnDuty_result> apply(OrderServiceAsync iface, listDoctorOnDuty_args listDoctorOnDuty_args) throws SoaException
              {

                CompletableFuture<com.isuwang.dapeng.json.demo.domain.ListDoctorOnDutyResponse> result = (CompletableFuture<com.isuwang.dapeng.json.demo.domain.ListDoctorOnDutyResponse>) iface.listDoctorOnDuty(listDoctorOnDuty_args.pageRequest ,50000);

                return result.thenApply(( com.isuwang.dapeng.json.demo.domain.ListDoctorOnDutyResponse i) -> {
                  listDoctorOnDuty_result res = new listDoctorOnDuty_result();
                  res.setSuccess(i);
                  return res;
              });
              }

            }
          
            public static class listAppointmentCalendar_args {
            
                private com.isuwang.dapeng.json.demo.domain.ListAppointmentCalendarRequest request;
                public com.isuwang.dapeng.json.demo.domain.ListAppointmentCalendarRequest getRequest(){
                return this.request;
              }
                public void setRequest(com.isuwang.dapeng.json.demo.domain.ListAppointmentCalendarRequest request){
                this.request = request;
              }
              

            @Override
            public String toString(){
              StringBuilder stringBuilder = new StringBuilder("{");
                
      stringBuilder.append("\"").append("request").append("\":").append(this.request == null ? "null" : this.request.toString()).append(",");
    
                if(stringBuilder.lastIndexOf(",") > 0)
                stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                stringBuilder.append("}");

              return stringBuilder.toString();
            }

          }

            public static class listAppointmentCalendar_result {

            
                  private java.util.List<String> success;
                  public java.util.List<String> getSuccess(){
                  return success;
                }

                  public void setSuccess(java.util.List<String> success){
                  this.success = success;
                }


                  @Override
                  public String toString(){
                  StringBuilder stringBuilder = new StringBuilder("{");
                    
      stringBuilder.append("\"").append("success").append("\":").append(success).append(",");
    
                    stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                    stringBuilder.append("}");

                  return stringBuilder.toString();
                }

                
          }

            public static class ListAppointmentCalendar_argsSerializer implements BeanSerializer<listAppointmentCalendar_args>{
            
      @Override
      public listAppointmentCalendar_args read(TProtocol iprot) throws TException{

      listAppointmentCalendar_args bean = new listAppointmentCalendar_args();
      com.isuwang.org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();

      while(true){
        schemeField = iprot.readFieldBegin();
        if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

        switch(schemeField.id){
          
              case 1:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRUCT){
              com.isuwang.dapeng.json.demo.domain.ListAppointmentCalendarRequest elem0 = new com.isuwang.dapeng.json.demo.domain.ListAppointmentCalendarRequest();
        elem0=new com.isuwang.dapeng.json.demo.domain.serializer.ListAppointmentCalendarRequestSerializer().read(iprot);
       bean.setRequest(elem0);
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
          
            default:
            com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate(bean);
      return bean;
    }
    
      @Override
      public void write(listAppointmentCalendar_args bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("listAppointmentCalendar_args"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("request", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, (short) 1));
            com.isuwang.dapeng.json.demo.domain.ListAppointmentCalendarRequest elem0 = bean.getRequest();
             new com.isuwang.dapeng.json.demo.domain.serializer.ListAppointmentCalendarRequestSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(listAppointmentCalendar_args bean) throws TException{
      
              if(bean.getRequest() == null)
              throw new SoaException(SoaBaseCode.NotNull, "request字段不允许为空");
            
                if(bean.getRequest() != null)
                new com.isuwang.dapeng.json.demo.domain.serializer.ListAppointmentCalendarRequestSerializer().validate(bean.getRequest());
              
    }
    

            @Override
            public String toString(listAppointmentCalendar_args bean) { return bean == null ? "null" : bean.toString(); }

          }

            public static class ListAppointmentCalendar_resultSerializer implements BeanSerializer<listAppointmentCalendar_result>{
            @Override
            public listAppointmentCalendar_result read(TProtocol iprot) throws TException{

              listAppointmentCalendar_result bean = new listAppointmentCalendar_result();
              com.isuwang.org.apache.thrift.protocol.TField schemeField;
              iprot.readStructBegin();

              while(true){
                schemeField = iprot.readFieldBegin();
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

                switch(schemeField.id){
                  case 0:  //SUCCESS
                  if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.LIST){
                     com.isuwang.org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
        java.util.List<String> elem0 = new java.util.ArrayList<>(_list0.size);
        for(int _i0 = 0; _i0 < _list0.size; ++ _i0){
          String elem1 = iprot.readString();
          elem0.add(elem1);
        }
        iprot.readListEnd();
       bean.setSuccess(elem0);
                  }else{
                    com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }
                  break;
                  /*
                  case 1: //ERROR
                  bean.setSoaException(new SoaException());
                  new SoaExceptionSerializer().read(bean.getSoaException(),iprot);
                  break A;
                  */
                  default:
                  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
              }
              iprot.readStructEnd();

              validate(bean);
              return bean;
            }
            
      @Override
      public void write(listAppointmentCalendar_result bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("listAppointmentCalendar_result"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("success", com.isuwang.org.apache.thrift.protocol.TType.LIST, (short) 0));
            java.util.List<String> elem0 = bean.getSuccess();
            
          oprot.writeListBegin(new com.isuwang.org.apache.thrift.protocol.TList(com.isuwang.org.apache.thrift.protocol.TType.STRING, elem0.size()));
          for(String elem1 : elem0){
          oprot.writeString(elem1);
        }
          oprot.writeListEnd();
        
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
            
      public void validate(listAppointmentCalendar_result bean) throws TException{
      
              if(bean.getSuccess() == null)
              throw new SoaException(SoaBaseCode.NotNull, "success字段不允许为空");
            
    }
    

            @Override
            public String toString(listAppointmentCalendar_result bean) { return bean == null ? "null" : bean.toString(); }
          }

            public static class listAppointmentCalendar<I extends com.isuwang.dapeng.json.demo.service.OrderServiceAsync> extends SoaFunctionDefinition.Async<I, listAppointmentCalendar_args, listAppointmentCalendar_result>
            {
              public listAppointmentCalendar()
              {
                super("listAppointmentCalendar", new ListAppointmentCalendar_argsSerializer(),  new ListAppointmentCalendar_resultSerializer());
              }

              @Override
              public CompletableFuture<listAppointmentCalendar_result> apply(OrderServiceAsync iface, listAppointmentCalendar_args listAppointmentCalendar_args) throws SoaException
              {

                CompletableFuture<java.util.List<String>> result = (CompletableFuture<java.util.List<String>>) iface.listAppointmentCalendar(listAppointmentCalendar_args.request ,50000);

                return result.thenApply(( java.util.List<String> i) -> {
                  listAppointmentCalendar_result res = new listAppointmentCalendar_result();
                  res.setSuccess(i);
                  return res;
              });
              }

            }
          
            public static class listAppointmentCalendarForDoctor_args {
            

            @Override
            public String toString(){
              StringBuilder stringBuilder = new StringBuilder("{");
                
                if(stringBuilder.lastIndexOf(",") > 0)
                stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                stringBuilder.append("}");

              return stringBuilder.toString();
            }

          }

            public static class listAppointmentCalendarForDoctor_result {

            
                  private java.util.List<String> success;
                  public java.util.List<String> getSuccess(){
                  return success;
                }

                  public void setSuccess(java.util.List<String> success){
                  this.success = success;
                }


                  @Override
                  public String toString(){
                  StringBuilder stringBuilder = new StringBuilder("{");
                    
      stringBuilder.append("\"").append("success").append("\":").append(success).append(",");
    
                    stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                    stringBuilder.append("}");

                  return stringBuilder.toString();
                }

                
          }

            public static class ListAppointmentCalendarForDoctor_argsSerializer implements BeanSerializer<listAppointmentCalendarForDoctor_args>{
            
      @Override
      public listAppointmentCalendarForDoctor_args read(TProtocol iprot) throws TException{

      listAppointmentCalendarForDoctor_args bean = new listAppointmentCalendarForDoctor_args();
      com.isuwang.org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();

      while(true){
        schemeField = iprot.readFieldBegin();
        if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

        switch(schemeField.id){
          
          
            default:
            com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate(bean);
      return bean;
    }
    
      @Override
      public void write(listAppointmentCalendarForDoctor_args bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("listAppointmentCalendarForDoctor_args"));

      
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(listAppointmentCalendarForDoctor_args bean) throws TException{
      
    }
    

            @Override
            public String toString(listAppointmentCalendarForDoctor_args bean) { return bean == null ? "null" : bean.toString(); }

          }

            public static class ListAppointmentCalendarForDoctor_resultSerializer implements BeanSerializer<listAppointmentCalendarForDoctor_result>{
            @Override
            public listAppointmentCalendarForDoctor_result read(TProtocol iprot) throws TException{

              listAppointmentCalendarForDoctor_result bean = new listAppointmentCalendarForDoctor_result();
              com.isuwang.org.apache.thrift.protocol.TField schemeField;
              iprot.readStructBegin();

              while(true){
                schemeField = iprot.readFieldBegin();
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

                switch(schemeField.id){
                  case 0:  //SUCCESS
                  if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.LIST){
                     com.isuwang.org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
        java.util.List<String> elem0 = new java.util.ArrayList<>(_list0.size);
        for(int _i0 = 0; _i0 < _list0.size; ++ _i0){
          String elem1 = iprot.readString();
          elem0.add(elem1);
        }
        iprot.readListEnd();
       bean.setSuccess(elem0);
                  }else{
                    com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }
                  break;
                  /*
                  case 1: //ERROR
                  bean.setSoaException(new SoaException());
                  new SoaExceptionSerializer().read(bean.getSoaException(),iprot);
                  break A;
                  */
                  default:
                  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
              }
              iprot.readStructEnd();

              validate(bean);
              return bean;
            }
            
      @Override
      public void write(listAppointmentCalendarForDoctor_result bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("listAppointmentCalendarForDoctor_result"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("success", com.isuwang.org.apache.thrift.protocol.TType.LIST, (short) 0));
            java.util.List<String> elem0 = bean.getSuccess();
            
          oprot.writeListBegin(new com.isuwang.org.apache.thrift.protocol.TList(com.isuwang.org.apache.thrift.protocol.TType.STRING, elem0.size()));
          for(String elem1 : elem0){
          oprot.writeString(elem1);
        }
          oprot.writeListEnd();
        
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
            
      public void validate(listAppointmentCalendarForDoctor_result bean) throws TException{
      
              if(bean.getSuccess() == null)
              throw new SoaException(SoaBaseCode.NotNull, "success字段不允许为空");
            
    }
    

            @Override
            public String toString(listAppointmentCalendarForDoctor_result bean) { return bean == null ? "null" : bean.toString(); }
          }

            public static class listAppointmentCalendarForDoctor<I extends com.isuwang.dapeng.json.demo.service.OrderServiceAsync> extends SoaFunctionDefinition.Async<I, listAppointmentCalendarForDoctor_args, listAppointmentCalendarForDoctor_result>
            {
              public listAppointmentCalendarForDoctor()
              {
                super("listAppointmentCalendarForDoctor", new ListAppointmentCalendarForDoctor_argsSerializer(),  new ListAppointmentCalendarForDoctor_resultSerializer());
              }

              @Override
              public CompletableFuture<listAppointmentCalendarForDoctor_result> apply(OrderServiceAsync iface, listAppointmentCalendarForDoctor_args listAppointmentCalendarForDoctor_args) throws SoaException
              {

                CompletableFuture<java.util.List<String>> result = (CompletableFuture<java.util.List<String>>) iface.listAppointmentCalendarForDoctor( 50000);

                return result.thenApply(( java.util.List<String> i) -> {
                  listAppointmentCalendarForDoctor_result res = new listAppointmentCalendarForDoctor_result();
                  res.setSuccess(i);
                  return res;
              });
              }

            }
          
            public static class listAppointmentsByDoctorId_args {
            
                private com.isuwang.dapeng.json.demo.domain.ListAppointmentsByDoctorIdRequest request;
                public com.isuwang.dapeng.json.demo.domain.ListAppointmentsByDoctorIdRequest getRequest(){
                return this.request;
              }
                public void setRequest(com.isuwang.dapeng.json.demo.domain.ListAppointmentsByDoctorIdRequest request){
                this.request = request;
              }
              

            @Override
            public String toString(){
              StringBuilder stringBuilder = new StringBuilder("{");
                
      stringBuilder.append("\"").append("request").append("\":").append(this.request == null ? "null" : this.request.toString()).append(",");
    
                if(stringBuilder.lastIndexOf(",") > 0)
                stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                stringBuilder.append("}");

              return stringBuilder.toString();
            }

          }

            public static class listAppointmentsByDoctorId_result {

            
                  private com.isuwang.dapeng.json.demo.domain.ListAppointmentsByDoctorIdResponse success;
                  public com.isuwang.dapeng.json.demo.domain.ListAppointmentsByDoctorIdResponse getSuccess(){
                  return success;
                }

                  public void setSuccess(com.isuwang.dapeng.json.demo.domain.ListAppointmentsByDoctorIdResponse success){
                  this.success = success;
                }


                  @Override
                  public String toString(){
                  StringBuilder stringBuilder = new StringBuilder("{");
                    
      stringBuilder.append("\"").append("success").append("\":").append(this.success == null ? "null" : this.success.toString()).append(",");
    
                    stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                    stringBuilder.append("}");

                  return stringBuilder.toString();
                }

                
          }

            public static class ListAppointmentsByDoctorId_argsSerializer implements BeanSerializer<listAppointmentsByDoctorId_args>{
            
      @Override
      public listAppointmentsByDoctorId_args read(TProtocol iprot) throws TException{

      listAppointmentsByDoctorId_args bean = new listAppointmentsByDoctorId_args();
      com.isuwang.org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();

      while(true){
        schemeField = iprot.readFieldBegin();
        if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

        switch(schemeField.id){
          
              case 1:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRUCT){
              com.isuwang.dapeng.json.demo.domain.ListAppointmentsByDoctorIdRequest elem0 = new com.isuwang.dapeng.json.demo.domain.ListAppointmentsByDoctorIdRequest();
        elem0=new com.isuwang.dapeng.json.demo.domain.serializer.ListAppointmentsByDoctorIdRequestSerializer().read(iprot);
       bean.setRequest(elem0);
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
          
            default:
            com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate(bean);
      return bean;
    }
    
      @Override
      public void write(listAppointmentsByDoctorId_args bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("listAppointmentsByDoctorId_args"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("request", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, (short) 1));
            com.isuwang.dapeng.json.demo.domain.ListAppointmentsByDoctorIdRequest elem0 = bean.getRequest();
             new com.isuwang.dapeng.json.demo.domain.serializer.ListAppointmentsByDoctorIdRequestSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(listAppointmentsByDoctorId_args bean) throws TException{
      
              if(bean.getRequest() == null)
              throw new SoaException(SoaBaseCode.NotNull, "request字段不允许为空");
            
                if(bean.getRequest() != null)
                new com.isuwang.dapeng.json.demo.domain.serializer.ListAppointmentsByDoctorIdRequestSerializer().validate(bean.getRequest());
              
    }
    

            @Override
            public String toString(listAppointmentsByDoctorId_args bean) { return bean == null ? "null" : bean.toString(); }

          }

            public static class ListAppointmentsByDoctorId_resultSerializer implements BeanSerializer<listAppointmentsByDoctorId_result>{
            @Override
            public listAppointmentsByDoctorId_result read(TProtocol iprot) throws TException{

              listAppointmentsByDoctorId_result bean = new listAppointmentsByDoctorId_result();
              com.isuwang.org.apache.thrift.protocol.TField schemeField;
              iprot.readStructBegin();

              while(true){
                schemeField = iprot.readFieldBegin();
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

                switch(schemeField.id){
                  case 0:  //SUCCESS
                  if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRUCT){
                    com.isuwang.dapeng.json.demo.domain.ListAppointmentsByDoctorIdResponse elem0 = new com.isuwang.dapeng.json.demo.domain.ListAppointmentsByDoctorIdResponse();
        elem0=new com.isuwang.dapeng.json.demo.domain.serializer.ListAppointmentsByDoctorIdResponseSerializer().read(iprot);
       bean.setSuccess(elem0);
                  }else{
                    com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }
                  break;
                  /*
                  case 1: //ERROR
                  bean.setSoaException(new SoaException());
                  new SoaExceptionSerializer().read(bean.getSoaException(),iprot);
                  break A;
                  */
                  default:
                  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
              }
              iprot.readStructEnd();

              validate(bean);
              return bean;
            }
            
      @Override
      public void write(listAppointmentsByDoctorId_result bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("listAppointmentsByDoctorId_result"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("success", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, (short) 0));
            com.isuwang.dapeng.json.demo.domain.ListAppointmentsByDoctorIdResponse elem0 = bean.getSuccess();
             new com.isuwang.dapeng.json.demo.domain.serializer.ListAppointmentsByDoctorIdResponseSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
            
      public void validate(listAppointmentsByDoctorId_result bean) throws TException{
      
              if(bean.getSuccess() == null)
              throw new SoaException(SoaBaseCode.NotNull, "success字段不允许为空");
            
                if(bean.getSuccess() != null)
                new com.isuwang.dapeng.json.demo.domain.serializer.ListAppointmentsByDoctorIdResponseSerializer().validate(bean.getSuccess());
              
    }
    

            @Override
            public String toString(listAppointmentsByDoctorId_result bean) { return bean == null ? "null" : bean.toString(); }
          }

            public static class listAppointmentsByDoctorId<I extends com.isuwang.dapeng.json.demo.service.OrderServiceAsync> extends SoaFunctionDefinition.Async<I, listAppointmentsByDoctorId_args, listAppointmentsByDoctorId_result>
            {
              public listAppointmentsByDoctorId()
              {
                super("listAppointmentsByDoctorId", new ListAppointmentsByDoctorId_argsSerializer(),  new ListAppointmentsByDoctorId_resultSerializer());
              }

              @Override
              public CompletableFuture<listAppointmentsByDoctorId_result> apply(OrderServiceAsync iface, listAppointmentsByDoctorId_args listAppointmentsByDoctorId_args) throws SoaException
              {

                CompletableFuture<com.isuwang.dapeng.json.demo.domain.ListAppointmentsByDoctorIdResponse> result = (CompletableFuture<com.isuwang.dapeng.json.demo.domain.ListAppointmentsByDoctorIdResponse>) iface.listAppointmentsByDoctorId(listAppointmentsByDoctorId_args.request ,50000);

                return result.thenApply(( com.isuwang.dapeng.json.demo.domain.ListAppointmentsByDoctorIdResponse i) -> {
                  listAppointmentsByDoctorId_result res = new listAppointmentsByDoctorId_result();
                  res.setSuccess(i);
                  return res;
              });
              }

            }
          
            public static class getAppointmentItem_args {
            
                private Integer appointmentId;
                public Integer getAppointmentId(){
                return this.appointmentId;
              }
                public void setAppointmentId(Integer appointmentId){
                this.appointmentId = appointmentId;
              }
              

            @Override
            public String toString(){
              StringBuilder stringBuilder = new StringBuilder("{");
                
      stringBuilder.append("\"").append("appointmentId").append("\":").append(appointmentId).append(",");
    
                if(stringBuilder.lastIndexOf(",") > 0)
                stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                stringBuilder.append("}");

              return stringBuilder.toString();
            }

          }

            public static class getAppointmentItem_result {

            
                  private com.isuwang.dapeng.json.demo.domain.AppointmentItem success;
                  public com.isuwang.dapeng.json.demo.domain.AppointmentItem getSuccess(){
                  return success;
                }

                  public void setSuccess(com.isuwang.dapeng.json.demo.domain.AppointmentItem success){
                  this.success = success;
                }


                  @Override
                  public String toString(){
                  StringBuilder stringBuilder = new StringBuilder("{");
                    
      stringBuilder.append("\"").append("success").append("\":").append(this.success == null ? "null" : this.success.toString()).append(",");
    
                    stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                    stringBuilder.append("}");

                  return stringBuilder.toString();
                }

                
          }

            public static class GetAppointmentItem_argsSerializer implements BeanSerializer<getAppointmentItem_args>{
            
      @Override
      public getAppointmentItem_args read(TProtocol iprot) throws TException{

      getAppointmentItem_args bean = new getAppointmentItem_args();
      com.isuwang.org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();

      while(true){
        schemeField = iprot.readFieldBegin();
        if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

        switch(schemeField.id){
          
              case 1:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.I32){
               int elem0 = iprot.readI32();
       bean.setAppointmentId(elem0);
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
          
            default:
            com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate(bean);
      return bean;
    }
    
      @Override
      public void write(getAppointmentItem_args bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("getAppointmentItem_args"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("appointmentId", com.isuwang.org.apache.thrift.protocol.TType.I32, (short) 1));
            Integer elem0 = bean.getAppointmentId();
            oprot.writeI32(elem0);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(getAppointmentItem_args bean) throws TException{
      
    }
    

            @Override
            public String toString(getAppointmentItem_args bean) { return bean == null ? "null" : bean.toString(); }

          }

            public static class GetAppointmentItem_resultSerializer implements BeanSerializer<getAppointmentItem_result>{
            @Override
            public getAppointmentItem_result read(TProtocol iprot) throws TException{

              getAppointmentItem_result bean = new getAppointmentItem_result();
              com.isuwang.org.apache.thrift.protocol.TField schemeField;
              iprot.readStructBegin();

              while(true){
                schemeField = iprot.readFieldBegin();
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

                switch(schemeField.id){
                  case 0:  //SUCCESS
                  if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRUCT){
                    com.isuwang.dapeng.json.demo.domain.AppointmentItem elem0 = new com.isuwang.dapeng.json.demo.domain.AppointmentItem();
        elem0=new com.isuwang.dapeng.json.demo.domain.serializer.AppointmentItemSerializer().read(iprot);
       bean.setSuccess(elem0);
                  }else{
                    com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }
                  break;
                  /*
                  case 1: //ERROR
                  bean.setSoaException(new SoaException());
                  new SoaExceptionSerializer().read(bean.getSoaException(),iprot);
                  break A;
                  */
                  default:
                  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
              }
              iprot.readStructEnd();

              validate(bean);
              return bean;
            }
            
      @Override
      public void write(getAppointmentItem_result bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("getAppointmentItem_result"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("success", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, (short) 0));
            com.isuwang.dapeng.json.demo.domain.AppointmentItem elem0 = bean.getSuccess();
             new com.isuwang.dapeng.json.demo.domain.serializer.AppointmentItemSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
            
      public void validate(getAppointmentItem_result bean) throws TException{
      
              if(bean.getSuccess() == null)
              throw new SoaException(SoaBaseCode.NotNull, "success字段不允许为空");
            
                if(bean.getSuccess() != null)
                new com.isuwang.dapeng.json.demo.domain.serializer.AppointmentItemSerializer().validate(bean.getSuccess());
              
    }
    

            @Override
            public String toString(getAppointmentItem_result bean) { return bean == null ? "null" : bean.toString(); }
          }

            public static class getAppointmentItem<I extends com.isuwang.dapeng.json.demo.service.OrderServiceAsync> extends SoaFunctionDefinition.Async<I, getAppointmentItem_args, getAppointmentItem_result>
            {
              public getAppointmentItem()
              {
                super("getAppointmentItem", new GetAppointmentItem_argsSerializer(),  new GetAppointmentItem_resultSerializer());
              }

              @Override
              public CompletableFuture<getAppointmentItem_result> apply(OrderServiceAsync iface, getAppointmentItem_args getAppointmentItem_args) throws SoaException
              {

                CompletableFuture<com.isuwang.dapeng.json.demo.domain.AppointmentItem> result = (CompletableFuture<com.isuwang.dapeng.json.demo.domain.AppointmentItem>) iface.getAppointmentItem(getAppointmentItem_args.appointmentId ,50000);

                return result.thenApply(( com.isuwang.dapeng.json.demo.domain.AppointmentItem i) -> {
                  getAppointmentItem_result res = new getAppointmentItem_result();
                  res.setSuccess(i);
                  return res;
              });
              }

            }
          
            public static class listAppointmentTimeForDoctor_args {
            
                private com.isuwang.dapeng.json.demo.domain.ListAppointmentTimeForDoctorRequest request;
                public com.isuwang.dapeng.json.demo.domain.ListAppointmentTimeForDoctorRequest getRequest(){
                return this.request;
              }
                public void setRequest(com.isuwang.dapeng.json.demo.domain.ListAppointmentTimeForDoctorRequest request){
                this.request = request;
              }
              

            @Override
            public String toString(){
              StringBuilder stringBuilder = new StringBuilder("{");
                
      stringBuilder.append("\"").append("request").append("\":").append(this.request == null ? "null" : this.request.toString()).append(",");
    
                if(stringBuilder.lastIndexOf(",") > 0)
                stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                stringBuilder.append("}");

              return stringBuilder.toString();
            }

          }

            public static class listAppointmentTimeForDoctor_result {

            
                  private java.util.List<com.isuwang.dapeng.json.demo.domain.AppointmentTimeItem> success;
                  public java.util.List<com.isuwang.dapeng.json.demo.domain.AppointmentTimeItem> getSuccess(){
                  return success;
                }

                  public void setSuccess(java.util.List<com.isuwang.dapeng.json.demo.domain.AppointmentTimeItem> success){
                  this.success = success;
                }


                  @Override
                  public String toString(){
                  StringBuilder stringBuilder = new StringBuilder("{");
                    
      stringBuilder.append("\"").append("success").append("\":").append(success).append(",");
    
                    stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                    stringBuilder.append("}");

                  return stringBuilder.toString();
                }

                
          }

            public static class ListAppointmentTimeForDoctor_argsSerializer implements BeanSerializer<listAppointmentTimeForDoctor_args>{
            
      @Override
      public listAppointmentTimeForDoctor_args read(TProtocol iprot) throws TException{

      listAppointmentTimeForDoctor_args bean = new listAppointmentTimeForDoctor_args();
      com.isuwang.org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();

      while(true){
        schemeField = iprot.readFieldBegin();
        if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

        switch(schemeField.id){
          
              case 1:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRUCT){
              com.isuwang.dapeng.json.demo.domain.ListAppointmentTimeForDoctorRequest elem0 = new com.isuwang.dapeng.json.demo.domain.ListAppointmentTimeForDoctorRequest();
        elem0=new com.isuwang.dapeng.json.demo.domain.serializer.ListAppointmentTimeForDoctorRequestSerializer().read(iprot);
       bean.setRequest(elem0);
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
          
            default:
            com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate(bean);
      return bean;
    }
    
      @Override
      public void write(listAppointmentTimeForDoctor_args bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("listAppointmentTimeForDoctor_args"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("request", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, (short) 1));
            com.isuwang.dapeng.json.demo.domain.ListAppointmentTimeForDoctorRequest elem0 = bean.getRequest();
             new com.isuwang.dapeng.json.demo.domain.serializer.ListAppointmentTimeForDoctorRequestSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(listAppointmentTimeForDoctor_args bean) throws TException{
      
              if(bean.getRequest() == null)
              throw new SoaException(SoaBaseCode.NotNull, "request字段不允许为空");
            
                if(bean.getRequest() != null)
                new com.isuwang.dapeng.json.demo.domain.serializer.ListAppointmentTimeForDoctorRequestSerializer().validate(bean.getRequest());
              
    }
    

            @Override
            public String toString(listAppointmentTimeForDoctor_args bean) { return bean == null ? "null" : bean.toString(); }

          }

            public static class ListAppointmentTimeForDoctor_resultSerializer implements BeanSerializer<listAppointmentTimeForDoctor_result>{
            @Override
            public listAppointmentTimeForDoctor_result read(TProtocol iprot) throws TException{

              listAppointmentTimeForDoctor_result bean = new listAppointmentTimeForDoctor_result();
              com.isuwang.org.apache.thrift.protocol.TField schemeField;
              iprot.readStructBegin();

              while(true){
                schemeField = iprot.readFieldBegin();
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

                switch(schemeField.id){
                  case 0:  //SUCCESS
                  if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.LIST){
                     com.isuwang.org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
        java.util.List<com.isuwang.dapeng.json.demo.domain.AppointmentTimeItem> elem0 = new java.util.ArrayList<>(_list0.size);
        for(int _i0 = 0; _i0 < _list0.size; ++ _i0){
          com.isuwang.dapeng.json.demo.domain.AppointmentTimeItem elem1 = new com.isuwang.dapeng.json.demo.domain.AppointmentTimeItem();
        elem1=new com.isuwang.dapeng.json.demo.domain.serializer.AppointmentTimeItemSerializer().read(iprot);
          elem0.add(elem1);
        }
        iprot.readListEnd();
       bean.setSuccess(elem0);
                  }else{
                    com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }
                  break;
                  /*
                  case 1: //ERROR
                  bean.setSoaException(new SoaException());
                  new SoaExceptionSerializer().read(bean.getSoaException(),iprot);
                  break A;
                  */
                  default:
                  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
              }
              iprot.readStructEnd();

              validate(bean);
              return bean;
            }
            
      @Override
      public void write(listAppointmentTimeForDoctor_result bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("listAppointmentTimeForDoctor_result"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("success", com.isuwang.org.apache.thrift.protocol.TType.LIST, (short) 0));
            java.util.List<com.isuwang.dapeng.json.demo.domain.AppointmentTimeItem> elem0 = bean.getSuccess();
            
          oprot.writeListBegin(new com.isuwang.org.apache.thrift.protocol.TList(com.isuwang.org.apache.thrift.protocol.TType.STRUCT, elem0.size()));
          for(com.isuwang.dapeng.json.demo.domain.AppointmentTimeItem elem1 : elem0){
           new com.isuwang.dapeng.json.demo.domain.serializer.AppointmentTimeItemSerializer().write(elem1, oprot);
        }
          oprot.writeListEnd();
        
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
            
      public void validate(listAppointmentTimeForDoctor_result bean) throws TException{
      
              if(bean.getSuccess() == null)
              throw new SoaException(SoaBaseCode.NotNull, "success字段不允许为空");
            
    }
    

            @Override
            public String toString(listAppointmentTimeForDoctor_result bean) { return bean == null ? "null" : bean.toString(); }
          }

            public static class listAppointmentTimeForDoctor<I extends com.isuwang.dapeng.json.demo.service.OrderServiceAsync> extends SoaFunctionDefinition.Async<I, listAppointmentTimeForDoctor_args, listAppointmentTimeForDoctor_result>
            {
              public listAppointmentTimeForDoctor()
              {
                super("listAppointmentTimeForDoctor", new ListAppointmentTimeForDoctor_argsSerializer(),  new ListAppointmentTimeForDoctor_resultSerializer());
              }

              @Override
              public CompletableFuture<listAppointmentTimeForDoctor_result> apply(OrderServiceAsync iface, listAppointmentTimeForDoctor_args listAppointmentTimeForDoctor_args) throws SoaException
              {

                CompletableFuture<java.util.List<com.isuwang.dapeng.json.demo.domain.AppointmentTimeItem>> result = (CompletableFuture<java.util.List<com.isuwang.dapeng.json.demo.domain.AppointmentTimeItem>>) iface.listAppointmentTimeForDoctor(listAppointmentTimeForDoctor_args.request ,50000);

                return result.thenApply(( java.util.List<com.isuwang.dapeng.json.demo.domain.AppointmentTimeItem> i) -> {
                  listAppointmentTimeForDoctor_result res = new listAppointmentTimeForDoctor_result();
                  res.setSuccess(i);
                  return res;
              });
              }

            }
          
            public static class getDoctorHomePageNotice_args {
            

            @Override
            public String toString(){
              StringBuilder stringBuilder = new StringBuilder("{");
                
                if(stringBuilder.lastIndexOf(",") > 0)
                stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                stringBuilder.append("}");

              return stringBuilder.toString();
            }

          }

            public static class getDoctorHomePageNotice_result {

            
                  private com.isuwang.dapeng.json.demo.domain.DoctorHomePageNotice success;
                  public com.isuwang.dapeng.json.demo.domain.DoctorHomePageNotice getSuccess(){
                  return success;
                }

                  public void setSuccess(com.isuwang.dapeng.json.demo.domain.DoctorHomePageNotice success){
                  this.success = success;
                }


                  @Override
                  public String toString(){
                  StringBuilder stringBuilder = new StringBuilder("{");
                    
      stringBuilder.append("\"").append("success").append("\":").append(this.success == null ? "null" : this.success.toString()).append(",");
    
                    stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                    stringBuilder.append("}");

                  return stringBuilder.toString();
                }

                
          }

            public static class GetDoctorHomePageNotice_argsSerializer implements BeanSerializer<getDoctorHomePageNotice_args>{
            
      @Override
      public getDoctorHomePageNotice_args read(TProtocol iprot) throws TException{

      getDoctorHomePageNotice_args bean = new getDoctorHomePageNotice_args();
      com.isuwang.org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();

      while(true){
        schemeField = iprot.readFieldBegin();
        if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

        switch(schemeField.id){
          
          
            default:
            com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate(bean);
      return bean;
    }
    
      @Override
      public void write(getDoctorHomePageNotice_args bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("getDoctorHomePageNotice_args"));

      
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(getDoctorHomePageNotice_args bean) throws TException{
      
    }
    

            @Override
            public String toString(getDoctorHomePageNotice_args bean) { return bean == null ? "null" : bean.toString(); }

          }

            public static class GetDoctorHomePageNotice_resultSerializer implements BeanSerializer<getDoctorHomePageNotice_result>{
            @Override
            public getDoctorHomePageNotice_result read(TProtocol iprot) throws TException{

              getDoctorHomePageNotice_result bean = new getDoctorHomePageNotice_result();
              com.isuwang.org.apache.thrift.protocol.TField schemeField;
              iprot.readStructBegin();

              while(true){
                schemeField = iprot.readFieldBegin();
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

                switch(schemeField.id){
                  case 0:  //SUCCESS
                  if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRUCT){
                    com.isuwang.dapeng.json.demo.domain.DoctorHomePageNotice elem0 = new com.isuwang.dapeng.json.demo.domain.DoctorHomePageNotice();
        elem0=new com.isuwang.dapeng.json.demo.domain.serializer.DoctorHomePageNoticeSerializer().read(iprot);
       bean.setSuccess(elem0);
                  }else{
                    com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }
                  break;
                  /*
                  case 1: //ERROR
                  bean.setSoaException(new SoaException());
                  new SoaExceptionSerializer().read(bean.getSoaException(),iprot);
                  break A;
                  */
                  default:
                  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
              }
              iprot.readStructEnd();

              validate(bean);
              return bean;
            }
            
      @Override
      public void write(getDoctorHomePageNotice_result bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("getDoctorHomePageNotice_result"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("success", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, (short) 0));
            com.isuwang.dapeng.json.demo.domain.DoctorHomePageNotice elem0 = bean.getSuccess();
             new com.isuwang.dapeng.json.demo.domain.serializer.DoctorHomePageNoticeSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
            
      public void validate(getDoctorHomePageNotice_result bean) throws TException{
      
              if(bean.getSuccess() == null)
              throw new SoaException(SoaBaseCode.NotNull, "success字段不允许为空");
            
                if(bean.getSuccess() != null)
                new com.isuwang.dapeng.json.demo.domain.serializer.DoctorHomePageNoticeSerializer().validate(bean.getSuccess());
              
    }
    

            @Override
            public String toString(getDoctorHomePageNotice_result bean) { return bean == null ? "null" : bean.toString(); }
          }

            public static class getDoctorHomePageNotice<I extends com.isuwang.dapeng.json.demo.service.OrderServiceAsync> extends SoaFunctionDefinition.Async<I, getDoctorHomePageNotice_args, getDoctorHomePageNotice_result>
            {
              public getDoctorHomePageNotice()
              {
                super("getDoctorHomePageNotice", new GetDoctorHomePageNotice_argsSerializer(),  new GetDoctorHomePageNotice_resultSerializer());
              }

              @Override
              public CompletableFuture<getDoctorHomePageNotice_result> apply(OrderServiceAsync iface, getDoctorHomePageNotice_args getDoctorHomePageNotice_args) throws SoaException
              {

                CompletableFuture<com.isuwang.dapeng.json.demo.domain.DoctorHomePageNotice> result = (CompletableFuture<com.isuwang.dapeng.json.demo.domain.DoctorHomePageNotice>) iface.getDoctorHomePageNotice( 50000);

                return result.thenApply(( com.isuwang.dapeng.json.demo.domain.DoctorHomePageNotice i) -> {
                  getDoctorHomePageNotice_result res = new getDoctorHomePageNotice_result();
                  res.setSuccess(i);
                  return res;
              });
              }

            }
          
            public static class getPatientHomePageNotice_args {
            

            @Override
            public String toString(){
              StringBuilder stringBuilder = new StringBuilder("{");
                
                if(stringBuilder.lastIndexOf(",") > 0)
                stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                stringBuilder.append("}");

              return stringBuilder.toString();
            }

          }

            public static class getPatientHomePageNotice_result {

            
                  private com.isuwang.dapeng.json.demo.domain.PatientHomePageNotice success;
                  public com.isuwang.dapeng.json.demo.domain.PatientHomePageNotice getSuccess(){
                  return success;
                }

                  public void setSuccess(com.isuwang.dapeng.json.demo.domain.PatientHomePageNotice success){
                  this.success = success;
                }


                  @Override
                  public String toString(){
                  StringBuilder stringBuilder = new StringBuilder("{");
                    
      stringBuilder.append("\"").append("success").append("\":").append(this.success == null ? "null" : this.success.toString()).append(",");
    
                    stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                    stringBuilder.append("}");

                  return stringBuilder.toString();
                }

                
          }

            public static class GetPatientHomePageNotice_argsSerializer implements BeanSerializer<getPatientHomePageNotice_args>{
            
      @Override
      public getPatientHomePageNotice_args read(TProtocol iprot) throws TException{

      getPatientHomePageNotice_args bean = new getPatientHomePageNotice_args();
      com.isuwang.org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();

      while(true){
        schemeField = iprot.readFieldBegin();
        if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

        switch(schemeField.id){
          
          
            default:
            com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate(bean);
      return bean;
    }
    
      @Override
      public void write(getPatientHomePageNotice_args bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("getPatientHomePageNotice_args"));

      
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(getPatientHomePageNotice_args bean) throws TException{
      
    }
    

            @Override
            public String toString(getPatientHomePageNotice_args bean) { return bean == null ? "null" : bean.toString(); }

          }

            public static class GetPatientHomePageNotice_resultSerializer implements BeanSerializer<getPatientHomePageNotice_result>{
            @Override
            public getPatientHomePageNotice_result read(TProtocol iprot) throws TException{

              getPatientHomePageNotice_result bean = new getPatientHomePageNotice_result();
              com.isuwang.org.apache.thrift.protocol.TField schemeField;
              iprot.readStructBegin();

              while(true){
                schemeField = iprot.readFieldBegin();
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

                switch(schemeField.id){
                  case 0:  //SUCCESS
                  if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRUCT){
                    com.isuwang.dapeng.json.demo.domain.PatientHomePageNotice elem0 = new com.isuwang.dapeng.json.demo.domain.PatientHomePageNotice();
        elem0=new com.isuwang.dapeng.json.demo.domain.serializer.PatientHomePageNoticeSerializer().read(iprot);
       bean.setSuccess(elem0);
                  }else{
                    com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }
                  break;
                  /*
                  case 1: //ERROR
                  bean.setSoaException(new SoaException());
                  new SoaExceptionSerializer().read(bean.getSoaException(),iprot);
                  break A;
                  */
                  default:
                  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
              }
              iprot.readStructEnd();

              validate(bean);
              return bean;
            }
            
      @Override
      public void write(getPatientHomePageNotice_result bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("getPatientHomePageNotice_result"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("success", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, (short) 0));
            com.isuwang.dapeng.json.demo.domain.PatientHomePageNotice elem0 = bean.getSuccess();
             new com.isuwang.dapeng.json.demo.domain.serializer.PatientHomePageNoticeSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
            
      public void validate(getPatientHomePageNotice_result bean) throws TException{
      
              if(bean.getSuccess() == null)
              throw new SoaException(SoaBaseCode.NotNull, "success字段不允许为空");
            
                if(bean.getSuccess() != null)
                new com.isuwang.dapeng.json.demo.domain.serializer.PatientHomePageNoticeSerializer().validate(bean.getSuccess());
              
    }
    

            @Override
            public String toString(getPatientHomePageNotice_result bean) { return bean == null ? "null" : bean.toString(); }
          }

            public static class getPatientHomePageNotice<I extends com.isuwang.dapeng.json.demo.service.OrderServiceAsync> extends SoaFunctionDefinition.Async<I, getPatientHomePageNotice_args, getPatientHomePageNotice_result>
            {
              public getPatientHomePageNotice()
              {
                super("getPatientHomePageNotice", new GetPatientHomePageNotice_argsSerializer(),  new GetPatientHomePageNotice_resultSerializer());
              }

              @Override
              public CompletableFuture<getPatientHomePageNotice_result> apply(OrderServiceAsync iface, getPatientHomePageNotice_args getPatientHomePageNotice_args) throws SoaException
              {

                CompletableFuture<com.isuwang.dapeng.json.demo.domain.PatientHomePageNotice> result = (CompletableFuture<com.isuwang.dapeng.json.demo.domain.PatientHomePageNotice>) iface.getPatientHomePageNotice( 50000);

                return result.thenApply(( com.isuwang.dapeng.json.demo.domain.PatientHomePageNotice i) -> {
                  getPatientHomePageNotice_result res = new getPatientHomePageNotice_result();
                  res.setSuccess(i);
                  return res;
              });
              }

            }
          
            public static class readDiagnose_args {
            
                private Integer diagnoseId;
                public Integer getDiagnoseId(){
                return this.diagnoseId;
              }
                public void setDiagnoseId(Integer diagnoseId){
                this.diagnoseId = diagnoseId;
              }
              

            @Override
            public String toString(){
              StringBuilder stringBuilder = new StringBuilder("{");
                
      stringBuilder.append("\"").append("diagnoseId").append("\":").append(diagnoseId).append(",");
    
                if(stringBuilder.lastIndexOf(",") > 0)
                stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                stringBuilder.append("}");

              return stringBuilder.toString();
            }

          }

            public static class readDiagnose_result {

            
                  @Override
                  public String toString(){
                  return "{}";
                }
                
          }

            public static class ReadDiagnose_argsSerializer implements BeanSerializer<readDiagnose_args>{
            
      @Override
      public readDiagnose_args read(TProtocol iprot) throws TException{

      readDiagnose_args bean = new readDiagnose_args();
      com.isuwang.org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();

      while(true){
        schemeField = iprot.readFieldBegin();
        if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

        switch(schemeField.id){
          
              case 1:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.I32){
               int elem0 = iprot.readI32();
       bean.setDiagnoseId(elem0);
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
          
            default:
            com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate(bean);
      return bean;
    }
    
      @Override
      public void write(readDiagnose_args bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("readDiagnose_args"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("diagnoseId", com.isuwang.org.apache.thrift.protocol.TType.I32, (short) 1));
            Integer elem0 = bean.getDiagnoseId();
            oprot.writeI32(elem0);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(readDiagnose_args bean) throws TException{
      
    }
    

            @Override
            public String toString(readDiagnose_args bean) { return bean == null ? "null" : bean.toString(); }

          }

            public static class ReadDiagnose_resultSerializer implements BeanSerializer<readDiagnose_result>{
            @Override
            public readDiagnose_result read(TProtocol iprot) throws TException{

              readDiagnose_result bean = new readDiagnose_result();
              com.isuwang.org.apache.thrift.protocol.TField schemeField;
              iprot.readStructBegin();

              while(true){
                schemeField = iprot.readFieldBegin();
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

                switch(schemeField.id){
                  case 0:  //SUCCESS
                  if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.VOID){
                    
      com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }else{
                    com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }
                  break;
                  /*
                  case 1: //ERROR
                  bean.setSoaException(new SoaException());
                  new SoaExceptionSerializer().read(bean.getSoaException(),iprot);
                  break A;
                  */
                  default:
                  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
              }
              iprot.readStructEnd();

              validate(bean);
              return bean;
            }
            
      @Override
      public void write(readDiagnose_result bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("readDiagnose_result"));

      
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
            
      public void validate(readDiagnose_result bean) throws TException{
      
    }
    

            @Override
            public String toString(readDiagnose_result bean) { return bean == null ? "null" : bean.toString(); }
          }

            public static class readDiagnose<I extends com.isuwang.dapeng.json.demo.service.OrderServiceAsync> extends SoaFunctionDefinition.Async<I, readDiagnose_args, readDiagnose_result>
            {
              public readDiagnose()
              {
                super("readDiagnose", new ReadDiagnose_argsSerializer(),  new ReadDiagnose_resultSerializer());
              }

              @Override
              public CompletableFuture<readDiagnose_result> apply(OrderServiceAsync iface, readDiagnose_args readDiagnose_args) throws SoaException
              {

                CompletableFuture<Void> result = (CompletableFuture<Void>) iface.readDiagnose(readDiagnose_args.diagnoseId ,50000);

                return result.thenApply((Void) -> {
                  readDiagnose_result res = new readDiagnose_result();
                  
                  return res;
              });
              }

            }
          
            public static class getDiagnoseItem_args {
            
                private Integer diagnoseId;
                public Integer getDiagnoseId(){
                return this.diagnoseId;
              }
                public void setDiagnoseId(Integer diagnoseId){
                this.diagnoseId = diagnoseId;
              }
              

            @Override
            public String toString(){
              StringBuilder stringBuilder = new StringBuilder("{");
                
      stringBuilder.append("\"").append("diagnoseId").append("\":").append(diagnoseId).append(",");
    
                if(stringBuilder.lastIndexOf(",") > 0)
                stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                stringBuilder.append("}");

              return stringBuilder.toString();
            }

          }

            public static class getDiagnoseItem_result {

            
                  private com.isuwang.dapeng.json.demo.domain.DiagnoseItem success;
                  public com.isuwang.dapeng.json.demo.domain.DiagnoseItem getSuccess(){
                  return success;
                }

                  public void setSuccess(com.isuwang.dapeng.json.demo.domain.DiagnoseItem success){
                  this.success = success;
                }


                  @Override
                  public String toString(){
                  StringBuilder stringBuilder = new StringBuilder("{");
                    
      stringBuilder.append("\"").append("success").append("\":").append(this.success == null ? "null" : this.success.toString()).append(",");
    
                    stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                    stringBuilder.append("}");

                  return stringBuilder.toString();
                }

                
          }

            public static class GetDiagnoseItem_argsSerializer implements BeanSerializer<getDiagnoseItem_args>{
            
      @Override
      public getDiagnoseItem_args read(TProtocol iprot) throws TException{

      getDiagnoseItem_args bean = new getDiagnoseItem_args();
      com.isuwang.org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();

      while(true){
        schemeField = iprot.readFieldBegin();
        if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

        switch(schemeField.id){
          
              case 1:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.I32){
               int elem0 = iprot.readI32();
       bean.setDiagnoseId(elem0);
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
          
            default:
            com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate(bean);
      return bean;
    }
    
      @Override
      public void write(getDiagnoseItem_args bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("getDiagnoseItem_args"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("diagnoseId", com.isuwang.org.apache.thrift.protocol.TType.I32, (short) 1));
            Integer elem0 = bean.getDiagnoseId();
            oprot.writeI32(elem0);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(getDiagnoseItem_args bean) throws TException{
      
    }
    

            @Override
            public String toString(getDiagnoseItem_args bean) { return bean == null ? "null" : bean.toString(); }

          }

            public static class GetDiagnoseItem_resultSerializer implements BeanSerializer<getDiagnoseItem_result>{
            @Override
            public getDiagnoseItem_result read(TProtocol iprot) throws TException{

              getDiagnoseItem_result bean = new getDiagnoseItem_result();
              com.isuwang.org.apache.thrift.protocol.TField schemeField;
              iprot.readStructBegin();

              while(true){
                schemeField = iprot.readFieldBegin();
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

                switch(schemeField.id){
                  case 0:  //SUCCESS
                  if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRUCT){
                    com.isuwang.dapeng.json.demo.domain.DiagnoseItem elem0 = new com.isuwang.dapeng.json.demo.domain.DiagnoseItem();
        elem0=new com.isuwang.dapeng.json.demo.domain.serializer.DiagnoseItemSerializer().read(iprot);
       bean.setSuccess(elem0);
                  }else{
                    com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }
                  break;
                  /*
                  case 1: //ERROR
                  bean.setSoaException(new SoaException());
                  new SoaExceptionSerializer().read(bean.getSoaException(),iprot);
                  break A;
                  */
                  default:
                  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
              }
              iprot.readStructEnd();

              validate(bean);
              return bean;
            }
            
      @Override
      public void write(getDiagnoseItem_result bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("getDiagnoseItem_result"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("success", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, (short) 0));
            com.isuwang.dapeng.json.demo.domain.DiagnoseItem elem0 = bean.getSuccess();
             new com.isuwang.dapeng.json.demo.domain.serializer.DiagnoseItemSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
            
      public void validate(getDiagnoseItem_result bean) throws TException{
      
              if(bean.getSuccess() == null)
              throw new SoaException(SoaBaseCode.NotNull, "success字段不允许为空");
            
                if(bean.getSuccess() != null)
                new com.isuwang.dapeng.json.demo.domain.serializer.DiagnoseItemSerializer().validate(bean.getSuccess());
              
    }
    

            @Override
            public String toString(getDiagnoseItem_result bean) { return bean == null ? "null" : bean.toString(); }
          }

            public static class getDiagnoseItem<I extends com.isuwang.dapeng.json.demo.service.OrderServiceAsync> extends SoaFunctionDefinition.Async<I, getDiagnoseItem_args, getDiagnoseItem_result>
            {
              public getDiagnoseItem()
              {
                super("getDiagnoseItem", new GetDiagnoseItem_argsSerializer(),  new GetDiagnoseItem_resultSerializer());
              }

              @Override
              public CompletableFuture<getDiagnoseItem_result> apply(OrderServiceAsync iface, getDiagnoseItem_args getDiagnoseItem_args) throws SoaException
              {

                CompletableFuture<com.isuwang.dapeng.json.demo.domain.DiagnoseItem> result = (CompletableFuture<com.isuwang.dapeng.json.demo.domain.DiagnoseItem>) iface.getDiagnoseItem(getDiagnoseItem_args.diagnoseId ,50000);

                return result.thenApply(( com.isuwang.dapeng.json.demo.domain.DiagnoseItem i) -> {
                  getDiagnoseItem_result res = new getDiagnoseItem_result();
                  res.setSuccess(i);
                  return res;
              });
              }

            }
          
            public static class getOrderForWx_args {
            
                private Integer orderId;
                public Integer getOrderId(){
                return this.orderId;
              }
                public void setOrderId(Integer orderId){
                this.orderId = orderId;
              }
              

            @Override
            public String toString(){
              StringBuilder stringBuilder = new StringBuilder("{");
                
      stringBuilder.append("\"").append("orderId").append("\":").append(orderId).append(",");
    
                if(stringBuilder.lastIndexOf(",") > 0)
                stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                stringBuilder.append("}");

              return stringBuilder.toString();
            }

          }

            public static class getOrderForWx_result {

            
                  private com.isuwang.dapeng.json.demo.domain.OrderForWxResponse success;
                  public com.isuwang.dapeng.json.demo.domain.OrderForWxResponse getSuccess(){
                  return success;
                }

                  public void setSuccess(com.isuwang.dapeng.json.demo.domain.OrderForWxResponse success){
                  this.success = success;
                }


                  @Override
                  public String toString(){
                  StringBuilder stringBuilder = new StringBuilder("{");
                    
      stringBuilder.append("\"").append("success").append("\":").append(this.success == null ? "null" : this.success.toString()).append(",");
    
                    stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                    stringBuilder.append("}");

                  return stringBuilder.toString();
                }

                
          }

            public static class GetOrderForWx_argsSerializer implements BeanSerializer<getOrderForWx_args>{
            
      @Override
      public getOrderForWx_args read(TProtocol iprot) throws TException{

      getOrderForWx_args bean = new getOrderForWx_args();
      com.isuwang.org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();

      while(true){
        schemeField = iprot.readFieldBegin();
        if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

        switch(schemeField.id){
          
              case 1:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.I32){
               int elem0 = iprot.readI32();
       bean.setOrderId(elem0);
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
          
            default:
            com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate(bean);
      return bean;
    }
    
      @Override
      public void write(getOrderForWx_args bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("getOrderForWx_args"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("orderId", com.isuwang.org.apache.thrift.protocol.TType.I32, (short) 1));
            Integer elem0 = bean.getOrderId();
            oprot.writeI32(elem0);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(getOrderForWx_args bean) throws TException{
      
    }
    

            @Override
            public String toString(getOrderForWx_args bean) { return bean == null ? "null" : bean.toString(); }

          }

            public static class GetOrderForWx_resultSerializer implements BeanSerializer<getOrderForWx_result>{
            @Override
            public getOrderForWx_result read(TProtocol iprot) throws TException{

              getOrderForWx_result bean = new getOrderForWx_result();
              com.isuwang.org.apache.thrift.protocol.TField schemeField;
              iprot.readStructBegin();

              while(true){
                schemeField = iprot.readFieldBegin();
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

                switch(schemeField.id){
                  case 0:  //SUCCESS
                  if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRUCT){
                    com.isuwang.dapeng.json.demo.domain.OrderForWxResponse elem0 = new com.isuwang.dapeng.json.demo.domain.OrderForWxResponse();
        elem0=new com.isuwang.dapeng.json.demo.domain.serializer.OrderForWxResponseSerializer().read(iprot);
       bean.setSuccess(elem0);
                  }else{
                    com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }
                  break;
                  /*
                  case 1: //ERROR
                  bean.setSoaException(new SoaException());
                  new SoaExceptionSerializer().read(bean.getSoaException(),iprot);
                  break A;
                  */
                  default:
                  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
              }
              iprot.readStructEnd();

              validate(bean);
              return bean;
            }
            
      @Override
      public void write(getOrderForWx_result bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("getOrderForWx_result"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("success", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, (short) 0));
            com.isuwang.dapeng.json.demo.domain.OrderForWxResponse elem0 = bean.getSuccess();
             new com.isuwang.dapeng.json.demo.domain.serializer.OrderForWxResponseSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
            
      public void validate(getOrderForWx_result bean) throws TException{
      
              if(bean.getSuccess() == null)
              throw new SoaException(SoaBaseCode.NotNull, "success字段不允许为空");
            
                if(bean.getSuccess() != null)
                new com.isuwang.dapeng.json.demo.domain.serializer.OrderForWxResponseSerializer().validate(bean.getSuccess());
              
    }
    

            @Override
            public String toString(getOrderForWx_result bean) { return bean == null ? "null" : bean.toString(); }
          }

            public static class getOrderForWx<I extends com.isuwang.dapeng.json.demo.service.OrderServiceAsync> extends SoaFunctionDefinition.Async<I, getOrderForWx_args, getOrderForWx_result>
            {
              public getOrderForWx()
              {
                super("getOrderForWx", new GetOrderForWx_argsSerializer(),  new GetOrderForWx_resultSerializer());
              }

              @Override
              public CompletableFuture<getOrderForWx_result> apply(OrderServiceAsync iface, getOrderForWx_args getOrderForWx_args) throws SoaException
              {

                CompletableFuture<com.isuwang.dapeng.json.demo.domain.OrderForWxResponse> result = (CompletableFuture<com.isuwang.dapeng.json.demo.domain.OrderForWxResponse>) iface.getOrderForWx(getOrderForWx_args.orderId ,50000);

                return result.thenApply(( com.isuwang.dapeng.json.demo.domain.OrderForWxResponse i) -> {
                  getOrderForWx_result res = new getOrderForWx_result();
                  res.setSuccess(i);
                  return res;
              });
              }

            }
          
            public static class payNotifyForWx_args {
            
                private String wxNotifyString;
                public String getWxNotifyString(){
                return this.wxNotifyString;
              }
                public void setWxNotifyString(String wxNotifyString){
                this.wxNotifyString = wxNotifyString;
              }
              

            @Override
            public String toString(){
              StringBuilder stringBuilder = new StringBuilder("{");
                
      stringBuilder.append("\"").append("wxNotifyString").append("\":\"").append(wxNotifyString).append("\",");
    
                if(stringBuilder.lastIndexOf(",") > 0)
                stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                stringBuilder.append("}");

              return stringBuilder.toString();
            }

          }

            public static class payNotifyForWx_result {

            
                  private String success;
                  public String getSuccess(){
                  return success;
                }

                  public void setSuccess(String success){
                  this.success = success;
                }


                  @Override
                  public String toString(){
                  StringBuilder stringBuilder = new StringBuilder("{");
                    
      stringBuilder.append("\"").append("success").append("\":\"").append(success).append("\",");
    
                    stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                    stringBuilder.append("}");

                  return stringBuilder.toString();
                }

                
          }

            public static class PayNotifyForWx_argsSerializer implements BeanSerializer<payNotifyForWx_args>{
            
      @Override
      public payNotifyForWx_args read(TProtocol iprot) throws TException{

      payNotifyForWx_args bean = new payNotifyForWx_args();
      com.isuwang.org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();

      while(true){
        schemeField = iprot.readFieldBegin();
        if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

        switch(schemeField.id){
          
              case 1:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRING){
              String elem0 = iprot.readString();
       bean.setWxNotifyString(elem0);
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
          
            default:
            com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate(bean);
      return bean;
    }
    
      @Override
      public void write(payNotifyForWx_args bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("payNotifyForWx_args"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("wxNotifyString", com.isuwang.org.apache.thrift.protocol.TType.STRING, (short) 1));
            String elem0 = bean.getWxNotifyString();
            oprot.writeString(elem0);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(payNotifyForWx_args bean) throws TException{
      
              if(bean.getWxNotifyString() == null)
              throw new SoaException(SoaBaseCode.NotNull, "wxNotifyString字段不允许为空");
            
    }
    

            @Override
            public String toString(payNotifyForWx_args bean) { return bean == null ? "null" : bean.toString(); }

          }

            public static class PayNotifyForWx_resultSerializer implements BeanSerializer<payNotifyForWx_result>{
            @Override
            public payNotifyForWx_result read(TProtocol iprot) throws TException{

              payNotifyForWx_result bean = new payNotifyForWx_result();
              com.isuwang.org.apache.thrift.protocol.TField schemeField;
              iprot.readStructBegin();

              while(true){
                schemeField = iprot.readFieldBegin();
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

                switch(schemeField.id){
                  case 0:  //SUCCESS
                  if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRING){
                    String elem0 = iprot.readString();
       bean.setSuccess(elem0);
                  }else{
                    com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }
                  break;
                  /*
                  case 1: //ERROR
                  bean.setSoaException(new SoaException());
                  new SoaExceptionSerializer().read(bean.getSoaException(),iprot);
                  break A;
                  */
                  default:
                  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
              }
              iprot.readStructEnd();

              validate(bean);
              return bean;
            }
            
      @Override
      public void write(payNotifyForWx_result bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("payNotifyForWx_result"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("success", com.isuwang.org.apache.thrift.protocol.TType.STRING, (short) 0));
            String elem0 = bean.getSuccess();
            oprot.writeString(elem0);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
            
      public void validate(payNotifyForWx_result bean) throws TException{
      
              if(bean.getSuccess() == null)
              throw new SoaException(SoaBaseCode.NotNull, "success字段不允许为空");
            
    }
    

            @Override
            public String toString(payNotifyForWx_result bean) { return bean == null ? "null" : bean.toString(); }
          }

            public static class payNotifyForWx<I extends com.isuwang.dapeng.json.demo.service.OrderServiceAsync> extends SoaFunctionDefinition.Async<I, payNotifyForWx_args, payNotifyForWx_result>
            {
              public payNotifyForWx()
              {
                super("payNotifyForWx", new PayNotifyForWx_argsSerializer(),  new PayNotifyForWx_resultSerializer());
              }

              @Override
              public CompletableFuture<payNotifyForWx_result> apply(OrderServiceAsync iface, payNotifyForWx_args payNotifyForWx_args) throws SoaException
              {

                CompletableFuture<String> result = (CompletableFuture<String>) iface.payNotifyForWx(payNotifyForWx_args.wxNotifyString ,50000);

                return result.thenApply(( String i) -> {
                  payNotifyForWx_result res = new payNotifyForWx_result();
                  res.setSuccess(i);
                  return res;
              });
              }

            }
          
            public static class getOrderForAlipay_args {
            
                private Integer orderId;
                public Integer getOrderId(){
                return this.orderId;
              }
                public void setOrderId(Integer orderId){
                this.orderId = orderId;
              }
              

            @Override
            public String toString(){
              StringBuilder stringBuilder = new StringBuilder("{");
                
      stringBuilder.append("\"").append("orderId").append("\":").append(orderId).append(",");
    
                if(stringBuilder.lastIndexOf(",") > 0)
                stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                stringBuilder.append("}");

              return stringBuilder.toString();
            }

          }

            public static class getOrderForAlipay_result {

            
                  private String success;
                  public String getSuccess(){
                  return success;
                }

                  public void setSuccess(String success){
                  this.success = success;
                }


                  @Override
                  public String toString(){
                  StringBuilder stringBuilder = new StringBuilder("{");
                    
      stringBuilder.append("\"").append("success").append("\":\"").append(success).append("\",");
    
                    stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                    stringBuilder.append("}");

                  return stringBuilder.toString();
                }

                
          }

            public static class GetOrderForAlipay_argsSerializer implements BeanSerializer<getOrderForAlipay_args>{
            
      @Override
      public getOrderForAlipay_args read(TProtocol iprot) throws TException{

      getOrderForAlipay_args bean = new getOrderForAlipay_args();
      com.isuwang.org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();

      while(true){
        schemeField = iprot.readFieldBegin();
        if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

        switch(schemeField.id){
          
              case 1:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.I32){
               int elem0 = iprot.readI32();
       bean.setOrderId(elem0);
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
          
            default:
            com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate(bean);
      return bean;
    }
    
      @Override
      public void write(getOrderForAlipay_args bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("getOrderForAlipay_args"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("orderId", com.isuwang.org.apache.thrift.protocol.TType.I32, (short) 1));
            Integer elem0 = bean.getOrderId();
            oprot.writeI32(elem0);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(getOrderForAlipay_args bean) throws TException{
      
    }
    

            @Override
            public String toString(getOrderForAlipay_args bean) { return bean == null ? "null" : bean.toString(); }

          }

            public static class GetOrderForAlipay_resultSerializer implements BeanSerializer<getOrderForAlipay_result>{
            @Override
            public getOrderForAlipay_result read(TProtocol iprot) throws TException{

              getOrderForAlipay_result bean = new getOrderForAlipay_result();
              com.isuwang.org.apache.thrift.protocol.TField schemeField;
              iprot.readStructBegin();

              while(true){
                schemeField = iprot.readFieldBegin();
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

                switch(schemeField.id){
                  case 0:  //SUCCESS
                  if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRING){
                    String elem0 = iprot.readString();
       bean.setSuccess(elem0);
                  }else{
                    com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }
                  break;
                  /*
                  case 1: //ERROR
                  bean.setSoaException(new SoaException());
                  new SoaExceptionSerializer().read(bean.getSoaException(),iprot);
                  break A;
                  */
                  default:
                  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
              }
              iprot.readStructEnd();

              validate(bean);
              return bean;
            }
            
      @Override
      public void write(getOrderForAlipay_result bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("getOrderForAlipay_result"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("success", com.isuwang.org.apache.thrift.protocol.TType.STRING, (short) 0));
            String elem0 = bean.getSuccess();
            oprot.writeString(elem0);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
            
      public void validate(getOrderForAlipay_result bean) throws TException{
      
              if(bean.getSuccess() == null)
              throw new SoaException(SoaBaseCode.NotNull, "success字段不允许为空");
            
    }
    

            @Override
            public String toString(getOrderForAlipay_result bean) { return bean == null ? "null" : bean.toString(); }
          }

            public static class getOrderForAlipay<I extends com.isuwang.dapeng.json.demo.service.OrderServiceAsync> extends SoaFunctionDefinition.Async<I, getOrderForAlipay_args, getOrderForAlipay_result>
            {
              public getOrderForAlipay()
              {
                super("getOrderForAlipay", new GetOrderForAlipay_argsSerializer(),  new GetOrderForAlipay_resultSerializer());
              }

              @Override
              public CompletableFuture<getOrderForAlipay_result> apply(OrderServiceAsync iface, getOrderForAlipay_args getOrderForAlipay_args) throws SoaException
              {

                CompletableFuture<String> result = (CompletableFuture<String>) iface.getOrderForAlipay(getOrderForAlipay_args.orderId ,50000);

                return result.thenApply(( String i) -> {
                  getOrderForAlipay_result res = new getOrderForAlipay_result();
                  res.setSuccess(i);
                  return res;
              });
              }

            }
          
            public static class payNotifyForAlipay_args {
            
                private java.util.Map<String, String> params;
                public java.util.Map<String, String> getParams(){
                return this.params;
              }
                public void setParams(java.util.Map<String, String> params){
                this.params = params;
              }
              

            @Override
            public String toString(){
              StringBuilder stringBuilder = new StringBuilder("{");
                
      stringBuilder.append("\"").append("params").append("\":").append(params).append(",");
    
                if(stringBuilder.lastIndexOf(",") > 0)
                stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                stringBuilder.append("}");

              return stringBuilder.toString();
            }

          }

            public static class payNotifyForAlipay_result {

            
                  private String success;
                  public String getSuccess(){
                  return success;
                }

                  public void setSuccess(String success){
                  this.success = success;
                }


                  @Override
                  public String toString(){
                  StringBuilder stringBuilder = new StringBuilder("{");
                    
      stringBuilder.append("\"").append("success").append("\":\"").append(success).append("\",");
    
                    stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                    stringBuilder.append("}");

                  return stringBuilder.toString();
                }

                
          }

            public static class PayNotifyForAlipay_argsSerializer implements BeanSerializer<payNotifyForAlipay_args>{
            
      @Override
      public payNotifyForAlipay_args read(TProtocol iprot) throws TException{

      payNotifyForAlipay_args bean = new payNotifyForAlipay_args();
      com.isuwang.org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();

      while(true){
        schemeField = iprot.readFieldBegin();
        if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

        switch(schemeField.id){
          
              case 1:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.MAP){
              com.isuwang.org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
        java.util.Map<String,String> elem0 = new java.util.HashMap<>(_map0.size);
        for(int _i0 = 0; _i0 < _map0.size; ++ _i0){
          String elem1 = iprot.readString();
          String elem2 = iprot.readString();
          elem0.put(elem1, elem2);
        }
        iprot.readMapEnd();
       bean.setParams(elem0);
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
          
            default:
            com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate(bean);
      return bean;
    }
    
      @Override
      public void write(payNotifyForAlipay_args bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("payNotifyForAlipay_args"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("params", com.isuwang.org.apache.thrift.protocol.TType.MAP, (short) 1));
            java.util.Map<String, String> elem0 = bean.getParams();
            
          oprot.writeMapBegin(new com.isuwang.org.apache.thrift.protocol.TMap(com.isuwang.org.apache.thrift.protocol.TType.STRING, com.isuwang.org.apache.thrift.protocol.TType.STRING, elem0.size()));
          for(java.util.Map.Entry<String, String> _it0 : elem0.entrySet()){

          String elem1 = _it0.getKey();
          String elem2 = _it0.getValue();
          oprot.writeString(elem1);
          oprot.writeString(elem2);
        }
          oprot.writeMapEnd();
        
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(payNotifyForAlipay_args bean) throws TException{
      
              if(bean.getParams() == null)
              throw new SoaException(SoaBaseCode.NotNull, "params字段不允许为空");
            
    }
    

            @Override
            public String toString(payNotifyForAlipay_args bean) { return bean == null ? "null" : bean.toString(); }

          }

            public static class PayNotifyForAlipay_resultSerializer implements BeanSerializer<payNotifyForAlipay_result>{
            @Override
            public payNotifyForAlipay_result read(TProtocol iprot) throws TException{

              payNotifyForAlipay_result bean = new payNotifyForAlipay_result();
              com.isuwang.org.apache.thrift.protocol.TField schemeField;
              iprot.readStructBegin();

              while(true){
                schemeField = iprot.readFieldBegin();
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

                switch(schemeField.id){
                  case 0:  //SUCCESS
                  if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRING){
                    String elem0 = iprot.readString();
       bean.setSuccess(elem0);
                  }else{
                    com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }
                  break;
                  /*
                  case 1: //ERROR
                  bean.setSoaException(new SoaException());
                  new SoaExceptionSerializer().read(bean.getSoaException(),iprot);
                  break A;
                  */
                  default:
                  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
              }
              iprot.readStructEnd();

              validate(bean);
              return bean;
            }
            
      @Override
      public void write(payNotifyForAlipay_result bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("payNotifyForAlipay_result"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("success", com.isuwang.org.apache.thrift.protocol.TType.STRING, (short) 0));
            String elem0 = bean.getSuccess();
            oprot.writeString(elem0);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
            
      public void validate(payNotifyForAlipay_result bean) throws TException{
      
              if(bean.getSuccess() == null)
              throw new SoaException(SoaBaseCode.NotNull, "success字段不允许为空");
            
    }
    

            @Override
            public String toString(payNotifyForAlipay_result bean) { return bean == null ? "null" : bean.toString(); }
          }

            public static class payNotifyForAlipay<I extends com.isuwang.dapeng.json.demo.service.OrderServiceAsync> extends SoaFunctionDefinition.Async<I, payNotifyForAlipay_args, payNotifyForAlipay_result>
            {
              public payNotifyForAlipay()
              {
                super("payNotifyForAlipay", new PayNotifyForAlipay_argsSerializer(),  new PayNotifyForAlipay_resultSerializer());
              }

              @Override
              public CompletableFuture<payNotifyForAlipay_result> apply(OrderServiceAsync iface, payNotifyForAlipay_args payNotifyForAlipay_args) throws SoaException
              {

                CompletableFuture<String> result = (CompletableFuture<String>) iface.payNotifyForAlipay(payNotifyForAlipay_args.params ,50000);

                return result.thenApply(( String i) -> {
                  payNotifyForAlipay_result res = new payNotifyForAlipay_result();
                  res.setSuccess(i);
                  return res;
              });
              }

            }
          
            public static class diagnoseFinish_args {
            
                private com.isuwang.dapeng.json.demo.domain.DiagnoseFinishRequest request;
                public com.isuwang.dapeng.json.demo.domain.DiagnoseFinishRequest getRequest(){
                return this.request;
              }
                public void setRequest(com.isuwang.dapeng.json.demo.domain.DiagnoseFinishRequest request){
                this.request = request;
              }
              

            @Override
            public String toString(){
              StringBuilder stringBuilder = new StringBuilder("{");
                
      stringBuilder.append("\"").append("request").append("\":").append(this.request == null ? "null" : this.request.toString()).append(",");
    
                if(stringBuilder.lastIndexOf(",") > 0)
                stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                stringBuilder.append("}");

              return stringBuilder.toString();
            }

          }

            public static class diagnoseFinish_result {

            
                  @Override
                  public String toString(){
                  return "{}";
                }
                
          }

            public static class DiagnoseFinish_argsSerializer implements BeanSerializer<diagnoseFinish_args>{
            
      @Override
      public diagnoseFinish_args read(TProtocol iprot) throws TException{

      diagnoseFinish_args bean = new diagnoseFinish_args();
      com.isuwang.org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();

      while(true){
        schemeField = iprot.readFieldBegin();
        if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

        switch(schemeField.id){
          
              case 1:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRUCT){
              com.isuwang.dapeng.json.demo.domain.DiagnoseFinishRequest elem0 = new com.isuwang.dapeng.json.demo.domain.DiagnoseFinishRequest();
        elem0=new com.isuwang.dapeng.json.demo.domain.serializer.DiagnoseFinishRequestSerializer().read(iprot);
       bean.setRequest(elem0);
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
          
            default:
            com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate(bean);
      return bean;
    }
    
      @Override
      public void write(diagnoseFinish_args bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("diagnoseFinish_args"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("request", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, (short) 1));
            com.isuwang.dapeng.json.demo.domain.DiagnoseFinishRequest elem0 = bean.getRequest();
             new com.isuwang.dapeng.json.demo.domain.serializer.DiagnoseFinishRequestSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(diagnoseFinish_args bean) throws TException{
      
              if(bean.getRequest() == null)
              throw new SoaException(SoaBaseCode.NotNull, "request字段不允许为空");
            
                if(bean.getRequest() != null)
                new com.isuwang.dapeng.json.demo.domain.serializer.DiagnoseFinishRequestSerializer().validate(bean.getRequest());
              
    }
    

            @Override
            public String toString(diagnoseFinish_args bean) { return bean == null ? "null" : bean.toString(); }

          }

            public static class DiagnoseFinish_resultSerializer implements BeanSerializer<diagnoseFinish_result>{
            @Override
            public diagnoseFinish_result read(TProtocol iprot) throws TException{

              diagnoseFinish_result bean = new diagnoseFinish_result();
              com.isuwang.org.apache.thrift.protocol.TField schemeField;
              iprot.readStructBegin();

              while(true){
                schemeField = iprot.readFieldBegin();
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

                switch(schemeField.id){
                  case 0:  //SUCCESS
                  if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.VOID){
                    
      com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }else{
                    com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }
                  break;
                  /*
                  case 1: //ERROR
                  bean.setSoaException(new SoaException());
                  new SoaExceptionSerializer().read(bean.getSoaException(),iprot);
                  break A;
                  */
                  default:
                  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
              }
              iprot.readStructEnd();

              validate(bean);
              return bean;
            }
            
      @Override
      public void write(diagnoseFinish_result bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("diagnoseFinish_result"));

      
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
            
      public void validate(diagnoseFinish_result bean) throws TException{
      
    }
    

            @Override
            public String toString(diagnoseFinish_result bean) { return bean == null ? "null" : bean.toString(); }
          }

            public static class diagnoseFinish<I extends com.isuwang.dapeng.json.demo.service.OrderServiceAsync> extends SoaFunctionDefinition.Async<I, diagnoseFinish_args, diagnoseFinish_result>
            {
              public diagnoseFinish()
              {
                super("diagnoseFinish", new DiagnoseFinish_argsSerializer(),  new DiagnoseFinish_resultSerializer());
              }

              @Override
              public CompletableFuture<diagnoseFinish_result> apply(OrderServiceAsync iface, diagnoseFinish_args diagnoseFinish_args) throws SoaException
              {

                CompletableFuture<Void> result = (CompletableFuture<Void>) iface.diagnoseFinish(diagnoseFinish_args.request ,50000);

                return result.thenApply((Void) -> {
                  diagnoseFinish_result res = new diagnoseFinish_result();
                  
                  return res;
              });
              }

            }
          
            public static class redoExceptionOrder_args {
            
                private com.isuwang.dapeng.json.demo.domain.RedoExceptionOrderRequest request;
                public com.isuwang.dapeng.json.demo.domain.RedoExceptionOrderRequest getRequest(){
                return this.request;
              }
                public void setRequest(com.isuwang.dapeng.json.demo.domain.RedoExceptionOrderRequest request){
                this.request = request;
              }
              

            @Override
            public String toString(){
              StringBuilder stringBuilder = new StringBuilder("{");
                
      stringBuilder.append("\"").append("request").append("\":").append(this.request == null ? "null" : this.request.toString()).append(",");
    
                if(stringBuilder.lastIndexOf(",") > 0)
                stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                stringBuilder.append("}");

              return stringBuilder.toString();
            }

          }

            public static class redoExceptionOrder_result {

            
                  private com.isuwang.dapeng.json.demo.domain.OrderItem success;
                  public com.isuwang.dapeng.json.demo.domain.OrderItem getSuccess(){
                  return success;
                }

                  public void setSuccess(com.isuwang.dapeng.json.demo.domain.OrderItem success){
                  this.success = success;
                }


                  @Override
                  public String toString(){
                  StringBuilder stringBuilder = new StringBuilder("{");
                    
      stringBuilder.append("\"").append("success").append("\":").append(this.success == null ? "null" : this.success.toString()).append(",");
    
                    stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                    stringBuilder.append("}");

                  return stringBuilder.toString();
                }

                
          }

            public static class RedoExceptionOrder_argsSerializer implements BeanSerializer<redoExceptionOrder_args>{
            
      @Override
      public redoExceptionOrder_args read(TProtocol iprot) throws TException{

      redoExceptionOrder_args bean = new redoExceptionOrder_args();
      com.isuwang.org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();

      while(true){
        schemeField = iprot.readFieldBegin();
        if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

        switch(schemeField.id){
          
              case 1:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRUCT){
              com.isuwang.dapeng.json.demo.domain.RedoExceptionOrderRequest elem0 = new com.isuwang.dapeng.json.demo.domain.RedoExceptionOrderRequest();
        elem0=new com.isuwang.dapeng.json.demo.domain.serializer.RedoExceptionOrderRequestSerializer().read(iprot);
       bean.setRequest(elem0);
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
          
            default:
            com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate(bean);
      return bean;
    }
    
      @Override
      public void write(redoExceptionOrder_args bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("redoExceptionOrder_args"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("request", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, (short) 1));
            com.isuwang.dapeng.json.demo.domain.RedoExceptionOrderRequest elem0 = bean.getRequest();
             new com.isuwang.dapeng.json.demo.domain.serializer.RedoExceptionOrderRequestSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(redoExceptionOrder_args bean) throws TException{
      
              if(bean.getRequest() == null)
              throw new SoaException(SoaBaseCode.NotNull, "request字段不允许为空");
            
                if(bean.getRequest() != null)
                new com.isuwang.dapeng.json.demo.domain.serializer.RedoExceptionOrderRequestSerializer().validate(bean.getRequest());
              
    }
    

            @Override
            public String toString(redoExceptionOrder_args bean) { return bean == null ? "null" : bean.toString(); }

          }

            public static class RedoExceptionOrder_resultSerializer implements BeanSerializer<redoExceptionOrder_result>{
            @Override
            public redoExceptionOrder_result read(TProtocol iprot) throws TException{

              redoExceptionOrder_result bean = new redoExceptionOrder_result();
              com.isuwang.org.apache.thrift.protocol.TField schemeField;
              iprot.readStructBegin();

              while(true){
                schemeField = iprot.readFieldBegin();
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

                switch(schemeField.id){
                  case 0:  //SUCCESS
                  if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRUCT){
                    com.isuwang.dapeng.json.demo.domain.OrderItem elem0 = new com.isuwang.dapeng.json.demo.domain.OrderItem();
        elem0=new com.isuwang.dapeng.json.demo.domain.serializer.OrderItemSerializer().read(iprot);
       bean.setSuccess(elem0);
                  }else{
                    com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }
                  break;
                  /*
                  case 1: //ERROR
                  bean.setSoaException(new SoaException());
                  new SoaExceptionSerializer().read(bean.getSoaException(),iprot);
                  break A;
                  */
                  default:
                  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
              }
              iprot.readStructEnd();

              validate(bean);
              return bean;
            }
            
      @Override
      public void write(redoExceptionOrder_result bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("redoExceptionOrder_result"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("success", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, (short) 0));
            com.isuwang.dapeng.json.demo.domain.OrderItem elem0 = bean.getSuccess();
             new com.isuwang.dapeng.json.demo.domain.serializer.OrderItemSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
            
      public void validate(redoExceptionOrder_result bean) throws TException{
      
              if(bean.getSuccess() == null)
              throw new SoaException(SoaBaseCode.NotNull, "success字段不允许为空");
            
                if(bean.getSuccess() != null)
                new com.isuwang.dapeng.json.demo.domain.serializer.OrderItemSerializer().validate(bean.getSuccess());
              
    }
    

            @Override
            public String toString(redoExceptionOrder_result bean) { return bean == null ? "null" : bean.toString(); }
          }

            public static class redoExceptionOrder<I extends com.isuwang.dapeng.json.demo.service.OrderServiceAsync> extends SoaFunctionDefinition.Async<I, redoExceptionOrder_args, redoExceptionOrder_result>
            {
              public redoExceptionOrder()
              {
                super("redoExceptionOrder", new RedoExceptionOrder_argsSerializer(),  new RedoExceptionOrder_resultSerializer());
              }

              @Override
              public CompletableFuture<redoExceptionOrder_result> apply(OrderServiceAsync iface, redoExceptionOrder_args redoExceptionOrder_args) throws SoaException
              {

                CompletableFuture<com.isuwang.dapeng.json.demo.domain.OrderItem> result = (CompletableFuture<com.isuwang.dapeng.json.demo.domain.OrderItem>) iface.redoExceptionOrder(redoExceptionOrder_args.request ,50000);

                return result.thenApply(( com.isuwang.dapeng.json.demo.domain.OrderItem i) -> {
                  redoExceptionOrder_result res = new redoExceptionOrder_result();
                  res.setSuccess(i);
                  return res;
              });
              }

            }
          
            public static class createOfflinePatient_args {
            
                private com.isuwang.dapeng.json.demo.domain.CreateOfflinePatientRequest request;
                public com.isuwang.dapeng.json.demo.domain.CreateOfflinePatientRequest getRequest(){
                return this.request;
              }
                public void setRequest(com.isuwang.dapeng.json.demo.domain.CreateOfflinePatientRequest request){
                this.request = request;
              }
              

            @Override
            public String toString(){
              StringBuilder stringBuilder = new StringBuilder("{");
                
      stringBuilder.append("\"").append("request").append("\":").append(this.request == null ? "null" : this.request.toString()).append(",");
    
                if(stringBuilder.lastIndexOf(",") > 0)
                stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                stringBuilder.append("}");

              return stringBuilder.toString();
            }

          }

            public static class createOfflinePatient_result {

            
                  private Integer success;
                  public Integer getSuccess(){
                  return success;
                }

                  public void setSuccess(Integer success){
                  this.success = success;
                }


                  @Override
                  public String toString(){
                  StringBuilder stringBuilder = new StringBuilder("{");
                    
      stringBuilder.append("\"").append("success").append("\":").append(success).append(",");
    
                    stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                    stringBuilder.append("}");

                  return stringBuilder.toString();
                }

                
          }

            public static class CreateOfflinePatient_argsSerializer implements BeanSerializer<createOfflinePatient_args>{
            
      @Override
      public createOfflinePatient_args read(TProtocol iprot) throws TException{

      createOfflinePatient_args bean = new createOfflinePatient_args();
      com.isuwang.org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();

      while(true){
        schemeField = iprot.readFieldBegin();
        if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

        switch(schemeField.id){
          
              case 1:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRUCT){
              com.isuwang.dapeng.json.demo.domain.CreateOfflinePatientRequest elem0 = new com.isuwang.dapeng.json.demo.domain.CreateOfflinePatientRequest();
        elem0=new com.isuwang.dapeng.json.demo.domain.serializer.CreateOfflinePatientRequestSerializer().read(iprot);
       bean.setRequest(elem0);
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
          
            default:
            com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate(bean);
      return bean;
    }
    
      @Override
      public void write(createOfflinePatient_args bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("createOfflinePatient_args"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("request", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, (short) 1));
            com.isuwang.dapeng.json.demo.domain.CreateOfflinePatientRequest elem0 = bean.getRequest();
             new com.isuwang.dapeng.json.demo.domain.serializer.CreateOfflinePatientRequestSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(createOfflinePatient_args bean) throws TException{
      
              if(bean.getRequest() == null)
              throw new SoaException(SoaBaseCode.NotNull, "request字段不允许为空");
            
                if(bean.getRequest() != null)
                new com.isuwang.dapeng.json.demo.domain.serializer.CreateOfflinePatientRequestSerializer().validate(bean.getRequest());
              
    }
    

            @Override
            public String toString(createOfflinePatient_args bean) { return bean == null ? "null" : bean.toString(); }

          }

            public static class CreateOfflinePatient_resultSerializer implements BeanSerializer<createOfflinePatient_result>{
            @Override
            public createOfflinePatient_result read(TProtocol iprot) throws TException{

              createOfflinePatient_result bean = new createOfflinePatient_result();
              com.isuwang.org.apache.thrift.protocol.TField schemeField;
              iprot.readStructBegin();

              while(true){
                schemeField = iprot.readFieldBegin();
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

                switch(schemeField.id){
                  case 0:  //SUCCESS
                  if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.I32){
                     int elem0 = iprot.readI32();
       bean.setSuccess(elem0);
                  }else{
                    com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }
                  break;
                  /*
                  case 1: //ERROR
                  bean.setSoaException(new SoaException());
                  new SoaExceptionSerializer().read(bean.getSoaException(),iprot);
                  break A;
                  */
                  default:
                  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
              }
              iprot.readStructEnd();

              validate(bean);
              return bean;
            }
            
      @Override
      public void write(createOfflinePatient_result bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("createOfflinePatient_result"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("success", com.isuwang.org.apache.thrift.protocol.TType.I32, (short) 0));
            Integer elem0 = bean.getSuccess();
            oprot.writeI32(elem0);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
            
      public void validate(createOfflinePatient_result bean) throws TException{
      
    }
    

            @Override
            public String toString(createOfflinePatient_result bean) { return bean == null ? "null" : bean.toString(); }
          }

            public static class createOfflinePatient<I extends com.isuwang.dapeng.json.demo.service.OrderServiceAsync> extends SoaFunctionDefinition.Async<I, createOfflinePatient_args, createOfflinePatient_result>
            {
              public createOfflinePatient()
              {
                super("createOfflinePatient", new CreateOfflinePatient_argsSerializer(),  new CreateOfflinePatient_resultSerializer());
              }

              @Override
              public CompletableFuture<createOfflinePatient_result> apply(OrderServiceAsync iface, createOfflinePatient_args createOfflinePatient_args) throws SoaException
              {

                CompletableFuture<Integer> result = (CompletableFuture<Integer>) iface.createOfflinePatient(createOfflinePatient_args.request ,50000);

                return result.thenApply(( Integer i) -> {
                  createOfflinePatient_result res = new createOfflinePatient_result();
                  res.setSuccess(i);
                  return res;
              });
              }

            }
          
            public static class getOfflinePatient_args {
            
                private com.isuwang.dapeng.json.demo.domain.GetOfflinePatientRequest request;
                public com.isuwang.dapeng.json.demo.domain.GetOfflinePatientRequest getRequest(){
                return this.request;
              }
                public void setRequest(com.isuwang.dapeng.json.demo.domain.GetOfflinePatientRequest request){
                this.request = request;
              }
              

            @Override
            public String toString(){
              StringBuilder stringBuilder = new StringBuilder("{");
                
      stringBuilder.append("\"").append("request").append("\":").append(this.request == null ? "null" : this.request.toString()).append(",");
    
                if(stringBuilder.lastIndexOf(",") > 0)
                stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                stringBuilder.append("}");

              return stringBuilder.toString();
            }

          }

            public static class getOfflinePatient_result {

            
                  private com.isuwang.dapeng.json.demo.domain.OfflinePatientResponse success;
                  public com.isuwang.dapeng.json.demo.domain.OfflinePatientResponse getSuccess(){
                  return success;
                }

                  public void setSuccess(com.isuwang.dapeng.json.demo.domain.OfflinePatientResponse success){
                  this.success = success;
                }


                  @Override
                  public String toString(){
                  StringBuilder stringBuilder = new StringBuilder("{");
                    
      stringBuilder.append("\"").append("success").append("\":").append(this.success == null ? "null" : this.success.toString()).append(",");
    
                    stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                    stringBuilder.append("}");

                  return stringBuilder.toString();
                }

                
          }

            public static class GetOfflinePatient_argsSerializer implements BeanSerializer<getOfflinePatient_args>{
            
      @Override
      public getOfflinePatient_args read(TProtocol iprot) throws TException{

      getOfflinePatient_args bean = new getOfflinePatient_args();
      com.isuwang.org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();

      while(true){
        schemeField = iprot.readFieldBegin();
        if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

        switch(schemeField.id){
          
              case 1:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRUCT){
              com.isuwang.dapeng.json.demo.domain.GetOfflinePatientRequest elem0 = new com.isuwang.dapeng.json.demo.domain.GetOfflinePatientRequest();
        elem0=new com.isuwang.dapeng.json.demo.domain.serializer.GetOfflinePatientRequestSerializer().read(iprot);
       bean.setRequest(elem0);
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
          
            default:
            com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate(bean);
      return bean;
    }
    
      @Override
      public void write(getOfflinePatient_args bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("getOfflinePatient_args"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("request", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, (short) 1));
            com.isuwang.dapeng.json.demo.domain.GetOfflinePatientRequest elem0 = bean.getRequest();
             new com.isuwang.dapeng.json.demo.domain.serializer.GetOfflinePatientRequestSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(getOfflinePatient_args bean) throws TException{
      
              if(bean.getRequest() == null)
              throw new SoaException(SoaBaseCode.NotNull, "request字段不允许为空");
            
                if(bean.getRequest() != null)
                new com.isuwang.dapeng.json.demo.domain.serializer.GetOfflinePatientRequestSerializer().validate(bean.getRequest());
              
    }
    

            @Override
            public String toString(getOfflinePatient_args bean) { return bean == null ? "null" : bean.toString(); }

          }

            public static class GetOfflinePatient_resultSerializer implements BeanSerializer<getOfflinePatient_result>{
            @Override
            public getOfflinePatient_result read(TProtocol iprot) throws TException{

              getOfflinePatient_result bean = new getOfflinePatient_result();
              com.isuwang.org.apache.thrift.protocol.TField schemeField;
              iprot.readStructBegin();

              while(true){
                schemeField = iprot.readFieldBegin();
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

                switch(schemeField.id){
                  case 0:  //SUCCESS
                  if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRUCT){
                    com.isuwang.dapeng.json.demo.domain.OfflinePatientResponse elem0 = new com.isuwang.dapeng.json.demo.domain.OfflinePatientResponse();
        elem0=new com.isuwang.dapeng.json.demo.domain.serializer.OfflinePatientResponseSerializer().read(iprot);
       bean.setSuccess(elem0);
                  }else{
                    com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }
                  break;
                  /*
                  case 1: //ERROR
                  bean.setSoaException(new SoaException());
                  new SoaExceptionSerializer().read(bean.getSoaException(),iprot);
                  break A;
                  */
                  default:
                  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
              }
              iprot.readStructEnd();

              validate(bean);
              return bean;
            }
            
      @Override
      public void write(getOfflinePatient_result bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("getOfflinePatient_result"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("success", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, (short) 0));
            com.isuwang.dapeng.json.demo.domain.OfflinePatientResponse elem0 = bean.getSuccess();
             new com.isuwang.dapeng.json.demo.domain.serializer.OfflinePatientResponseSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
            
      public void validate(getOfflinePatient_result bean) throws TException{
      
              if(bean.getSuccess() == null)
              throw new SoaException(SoaBaseCode.NotNull, "success字段不允许为空");
            
                if(bean.getSuccess() != null)
                new com.isuwang.dapeng.json.demo.domain.serializer.OfflinePatientResponseSerializer().validate(bean.getSuccess());
              
    }
    

            @Override
            public String toString(getOfflinePatient_result bean) { return bean == null ? "null" : bean.toString(); }
          }

            public static class getOfflinePatient<I extends com.isuwang.dapeng.json.demo.service.OrderServiceAsync> extends SoaFunctionDefinition.Async<I, getOfflinePatient_args, getOfflinePatient_result>
            {
              public getOfflinePatient()
              {
                super("getOfflinePatient", new GetOfflinePatient_argsSerializer(),  new GetOfflinePatient_resultSerializer());
              }

              @Override
              public CompletableFuture<getOfflinePatient_result> apply(OrderServiceAsync iface, getOfflinePatient_args getOfflinePatient_args) throws SoaException
              {

                CompletableFuture<com.isuwang.dapeng.json.demo.domain.OfflinePatientResponse> result = (CompletableFuture<com.isuwang.dapeng.json.demo.domain.OfflinePatientResponse>) iface.getOfflinePatient(getOfflinePatient_args.request ,50000);

                return result.thenApply(( com.isuwang.dapeng.json.demo.domain.OfflinePatientResponse i) -> {
                  getOfflinePatient_result res = new getOfflinePatient_result();
                  res.setSuccess(i);
                  return res;
              });
              }

            }
          
            public static class createOrderForOffline_args {
            
                private com.isuwang.dapeng.json.demo.domain.CreateOrderForOffLineRequest request;
                public com.isuwang.dapeng.json.demo.domain.CreateOrderForOffLineRequest getRequest(){
                return this.request;
              }
                public void setRequest(com.isuwang.dapeng.json.demo.domain.CreateOrderForOffLineRequest request){
                this.request = request;
              }
              

            @Override
            public String toString(){
              StringBuilder stringBuilder = new StringBuilder("{");
                
      stringBuilder.append("\"").append("request").append("\":").append(this.request == null ? "null" : this.request.toString()).append(",");
    
                if(stringBuilder.lastIndexOf(",") > 0)
                stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                stringBuilder.append("}");

              return stringBuilder.toString();
            }

          }

            public static class createOrderForOffline_result {

            
                  private Integer success;
                  public Integer getSuccess(){
                  return success;
                }

                  public void setSuccess(Integer success){
                  this.success = success;
                }


                  @Override
                  public String toString(){
                  StringBuilder stringBuilder = new StringBuilder("{");
                    
      stringBuilder.append("\"").append("success").append("\":").append(success).append(",");
    
                    stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                    stringBuilder.append("}");

                  return stringBuilder.toString();
                }

                
          }

            public static class CreateOrderForOffline_argsSerializer implements BeanSerializer<createOrderForOffline_args>{
            
      @Override
      public createOrderForOffline_args read(TProtocol iprot) throws TException{

      createOrderForOffline_args bean = new createOrderForOffline_args();
      com.isuwang.org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();

      while(true){
        schemeField = iprot.readFieldBegin();
        if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

        switch(schemeField.id){
          
              case 1:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRUCT){
              com.isuwang.dapeng.json.demo.domain.CreateOrderForOffLineRequest elem0 = new com.isuwang.dapeng.json.demo.domain.CreateOrderForOffLineRequest();
        elem0=new com.isuwang.dapeng.json.demo.domain.serializer.CreateOrderForOffLineRequestSerializer().read(iprot);
       bean.setRequest(elem0);
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
          
            default:
            com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate(bean);
      return bean;
    }
    
      @Override
      public void write(createOrderForOffline_args bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("createOrderForOffline_args"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("request", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, (short) 1));
            com.isuwang.dapeng.json.demo.domain.CreateOrderForOffLineRequest elem0 = bean.getRequest();
             new com.isuwang.dapeng.json.demo.domain.serializer.CreateOrderForOffLineRequestSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(createOrderForOffline_args bean) throws TException{
      
              if(bean.getRequest() == null)
              throw new SoaException(SoaBaseCode.NotNull, "request字段不允许为空");
            
                if(bean.getRequest() != null)
                new com.isuwang.dapeng.json.demo.domain.serializer.CreateOrderForOffLineRequestSerializer().validate(bean.getRequest());
              
    }
    

            @Override
            public String toString(createOrderForOffline_args bean) { return bean == null ? "null" : bean.toString(); }

          }

            public static class CreateOrderForOffline_resultSerializer implements BeanSerializer<createOrderForOffline_result>{
            @Override
            public createOrderForOffline_result read(TProtocol iprot) throws TException{

              createOrderForOffline_result bean = new createOrderForOffline_result();
              com.isuwang.org.apache.thrift.protocol.TField schemeField;
              iprot.readStructBegin();

              while(true){
                schemeField = iprot.readFieldBegin();
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

                switch(schemeField.id){
                  case 0:  //SUCCESS
                  if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.I32){
                     int elem0 = iprot.readI32();
       bean.setSuccess(elem0);
                  }else{
                    com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }
                  break;
                  /*
                  case 1: //ERROR
                  bean.setSoaException(new SoaException());
                  new SoaExceptionSerializer().read(bean.getSoaException(),iprot);
                  break A;
                  */
                  default:
                  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
              }
              iprot.readStructEnd();

              validate(bean);
              return bean;
            }
            
      @Override
      public void write(createOrderForOffline_result bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("createOrderForOffline_result"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("success", com.isuwang.org.apache.thrift.protocol.TType.I32, (short) 0));
            Integer elem0 = bean.getSuccess();
            oprot.writeI32(elem0);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
            
      public void validate(createOrderForOffline_result bean) throws TException{
      
    }
    

            @Override
            public String toString(createOrderForOffline_result bean) { return bean == null ? "null" : bean.toString(); }
          }

            public static class createOrderForOffline<I extends com.isuwang.dapeng.json.demo.service.OrderServiceAsync> extends SoaFunctionDefinition.Async<I, createOrderForOffline_args, createOrderForOffline_result>
            {
              public createOrderForOffline()
              {
                super("createOrderForOffline", new CreateOrderForOffline_argsSerializer(),  new CreateOrderForOffline_resultSerializer());
              }

              @Override
              public CompletableFuture<createOrderForOffline_result> apply(OrderServiceAsync iface, createOrderForOffline_args createOrderForOffline_args) throws SoaException
              {

                CompletableFuture<Integer> result = (CompletableFuture<Integer>) iface.createOrderForOffline(createOrderForOffline_args.request ,50000);

                return result.thenApply(( Integer i) -> {
                  createOrderForOffline_result res = new createOrderForOffline_result();
                  res.setSuccess(i);
                  return res;
              });
              }

            }
          
            public static class modifyOrderForOffline_args {
            
                private com.isuwang.dapeng.json.demo.domain.ModifyOrderForOfflineRequest request;
                public com.isuwang.dapeng.json.demo.domain.ModifyOrderForOfflineRequest getRequest(){
                return this.request;
              }
                public void setRequest(com.isuwang.dapeng.json.demo.domain.ModifyOrderForOfflineRequest request){
                this.request = request;
              }
              

            @Override
            public String toString(){
              StringBuilder stringBuilder = new StringBuilder("{");
                
      stringBuilder.append("\"").append("request").append("\":").append(this.request == null ? "null" : this.request.toString()).append(",");
    
                if(stringBuilder.lastIndexOf(",") > 0)
                stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                stringBuilder.append("}");

              return stringBuilder.toString();
            }

          }

            public static class modifyOrderForOffline_result {

            
                  @Override
                  public String toString(){
                  return "{}";
                }
                
          }

            public static class ModifyOrderForOffline_argsSerializer implements BeanSerializer<modifyOrderForOffline_args>{
            
      @Override
      public modifyOrderForOffline_args read(TProtocol iprot) throws TException{

      modifyOrderForOffline_args bean = new modifyOrderForOffline_args();
      com.isuwang.org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();

      while(true){
        schemeField = iprot.readFieldBegin();
        if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

        switch(schemeField.id){
          
              case 1:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRUCT){
              com.isuwang.dapeng.json.demo.domain.ModifyOrderForOfflineRequest elem0 = new com.isuwang.dapeng.json.demo.domain.ModifyOrderForOfflineRequest();
        elem0=new com.isuwang.dapeng.json.demo.domain.serializer.ModifyOrderForOfflineRequestSerializer().read(iprot);
       bean.setRequest(elem0);
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
          
            default:
            com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate(bean);
      return bean;
    }
    
      @Override
      public void write(modifyOrderForOffline_args bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("modifyOrderForOffline_args"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("request", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, (short) 1));
            com.isuwang.dapeng.json.demo.domain.ModifyOrderForOfflineRequest elem0 = bean.getRequest();
             new com.isuwang.dapeng.json.demo.domain.serializer.ModifyOrderForOfflineRequestSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(modifyOrderForOffline_args bean) throws TException{
      
              if(bean.getRequest() == null)
              throw new SoaException(SoaBaseCode.NotNull, "request字段不允许为空");
            
                if(bean.getRequest() != null)
                new com.isuwang.dapeng.json.demo.domain.serializer.ModifyOrderForOfflineRequestSerializer().validate(bean.getRequest());
              
    }
    

            @Override
            public String toString(modifyOrderForOffline_args bean) { return bean == null ? "null" : bean.toString(); }

          }

            public static class ModifyOrderForOffline_resultSerializer implements BeanSerializer<modifyOrderForOffline_result>{
            @Override
            public modifyOrderForOffline_result read(TProtocol iprot) throws TException{

              modifyOrderForOffline_result bean = new modifyOrderForOffline_result();
              com.isuwang.org.apache.thrift.protocol.TField schemeField;
              iprot.readStructBegin();

              while(true){
                schemeField = iprot.readFieldBegin();
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

                switch(schemeField.id){
                  case 0:  //SUCCESS
                  if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.VOID){
                    
      com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }else{
                    com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }
                  break;
                  /*
                  case 1: //ERROR
                  bean.setSoaException(new SoaException());
                  new SoaExceptionSerializer().read(bean.getSoaException(),iprot);
                  break A;
                  */
                  default:
                  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
              }
              iprot.readStructEnd();

              validate(bean);
              return bean;
            }
            
      @Override
      public void write(modifyOrderForOffline_result bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("modifyOrderForOffline_result"));

      
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
            
      public void validate(modifyOrderForOffline_result bean) throws TException{
      
    }
    

            @Override
            public String toString(modifyOrderForOffline_result bean) { return bean == null ? "null" : bean.toString(); }
          }

            public static class modifyOrderForOffline<I extends com.isuwang.dapeng.json.demo.service.OrderServiceAsync> extends SoaFunctionDefinition.Async<I, modifyOrderForOffline_args, modifyOrderForOffline_result>
            {
              public modifyOrderForOffline()
              {
                super("modifyOrderForOffline", new ModifyOrderForOffline_argsSerializer(),  new ModifyOrderForOffline_resultSerializer());
              }

              @Override
              public CompletableFuture<modifyOrderForOffline_result> apply(OrderServiceAsync iface, modifyOrderForOffline_args modifyOrderForOffline_args) throws SoaException
              {

                CompletableFuture<Void> result = (CompletableFuture<Void>) iface.modifyOrderForOffline(modifyOrderForOffline_args.request ,50000);

                return result.thenApply((Void) -> {
                  modifyOrderForOffline_result res = new modifyOrderForOffline_result();
                  
                  return res;
              });
              }

            }
          
            public static class modifyOrderStatusForOffline_args {
            
                private com.isuwang.dapeng.json.demo.domain.ModifyOrderStatusRequest request;
                public com.isuwang.dapeng.json.demo.domain.ModifyOrderStatusRequest getRequest(){
                return this.request;
              }
                public void setRequest(com.isuwang.dapeng.json.demo.domain.ModifyOrderStatusRequest request){
                this.request = request;
              }
              

            @Override
            public String toString(){
              StringBuilder stringBuilder = new StringBuilder("{");
                
      stringBuilder.append("\"").append("request").append("\":").append(this.request == null ? "null" : this.request.toString()).append(",");
    
                if(stringBuilder.lastIndexOf(",") > 0)
                stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                stringBuilder.append("}");

              return stringBuilder.toString();
            }

          }

            public static class modifyOrderStatusForOffline_result {

            
                  @Override
                  public String toString(){
                  return "{}";
                }
                
          }

            public static class ModifyOrderStatusForOffline_argsSerializer implements BeanSerializer<modifyOrderStatusForOffline_args>{
            
      @Override
      public modifyOrderStatusForOffline_args read(TProtocol iprot) throws TException{

      modifyOrderStatusForOffline_args bean = new modifyOrderStatusForOffline_args();
      com.isuwang.org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();

      while(true){
        schemeField = iprot.readFieldBegin();
        if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

        switch(schemeField.id){
          
              case 1:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRUCT){
              com.isuwang.dapeng.json.demo.domain.ModifyOrderStatusRequest elem0 = new com.isuwang.dapeng.json.demo.domain.ModifyOrderStatusRequest();
        elem0=new com.isuwang.dapeng.json.demo.domain.serializer.ModifyOrderStatusRequestSerializer().read(iprot);
       bean.setRequest(elem0);
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
          
            default:
            com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate(bean);
      return bean;
    }
    
      @Override
      public void write(modifyOrderStatusForOffline_args bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("modifyOrderStatusForOffline_args"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("request", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, (short) 1));
            com.isuwang.dapeng.json.demo.domain.ModifyOrderStatusRequest elem0 = bean.getRequest();
             new com.isuwang.dapeng.json.demo.domain.serializer.ModifyOrderStatusRequestSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(modifyOrderStatusForOffline_args bean) throws TException{
      
              if(bean.getRequest() == null)
              throw new SoaException(SoaBaseCode.NotNull, "request字段不允许为空");
            
                if(bean.getRequest() != null)
                new com.isuwang.dapeng.json.demo.domain.serializer.ModifyOrderStatusRequestSerializer().validate(bean.getRequest());
              
    }
    

            @Override
            public String toString(modifyOrderStatusForOffline_args bean) { return bean == null ? "null" : bean.toString(); }

          }

            public static class ModifyOrderStatusForOffline_resultSerializer implements BeanSerializer<modifyOrderStatusForOffline_result>{
            @Override
            public modifyOrderStatusForOffline_result read(TProtocol iprot) throws TException{

              modifyOrderStatusForOffline_result bean = new modifyOrderStatusForOffline_result();
              com.isuwang.org.apache.thrift.protocol.TField schemeField;
              iprot.readStructBegin();

              while(true){
                schemeField = iprot.readFieldBegin();
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

                switch(schemeField.id){
                  case 0:  //SUCCESS
                  if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.VOID){
                    
      com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }else{
                    com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }
                  break;
                  /*
                  case 1: //ERROR
                  bean.setSoaException(new SoaException());
                  new SoaExceptionSerializer().read(bean.getSoaException(),iprot);
                  break A;
                  */
                  default:
                  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
              }
              iprot.readStructEnd();

              validate(bean);
              return bean;
            }
            
      @Override
      public void write(modifyOrderStatusForOffline_result bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("modifyOrderStatusForOffline_result"));

      
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
            
      public void validate(modifyOrderStatusForOffline_result bean) throws TException{
      
    }
    

            @Override
            public String toString(modifyOrderStatusForOffline_result bean) { return bean == null ? "null" : bean.toString(); }
          }

            public static class modifyOrderStatusForOffline<I extends com.isuwang.dapeng.json.demo.service.OrderServiceAsync> extends SoaFunctionDefinition.Async<I, modifyOrderStatusForOffline_args, modifyOrderStatusForOffline_result>
            {
              public modifyOrderStatusForOffline()
              {
                super("modifyOrderStatusForOffline", new ModifyOrderStatusForOffline_argsSerializer(),  new ModifyOrderStatusForOffline_resultSerializer());
              }

              @Override
              public CompletableFuture<modifyOrderStatusForOffline_result> apply(OrderServiceAsync iface, modifyOrderStatusForOffline_args modifyOrderStatusForOffline_args) throws SoaException
              {

                CompletableFuture<Void> result = (CompletableFuture<Void>) iface.modifyOrderStatusForOffline(modifyOrderStatusForOffline_args.request ,50000);

                return result.thenApply((Void) -> {
                  modifyOrderStatusForOffline_result res = new modifyOrderStatusForOffline_result();
                  
                  return res;
              });
              }

            }
          
            public static class getPatientHomePageInfo_args {
            
                private com.isuwang.dapeng.json.demo.domain.PatientHomePageInfoRequest request;
                public com.isuwang.dapeng.json.demo.domain.PatientHomePageInfoRequest getRequest(){
                return this.request;
              }
                public void setRequest(com.isuwang.dapeng.json.demo.domain.PatientHomePageInfoRequest request){
                this.request = request;
              }
              

            @Override
            public String toString(){
              StringBuilder stringBuilder = new StringBuilder("{");
                
      stringBuilder.append("\"").append("request").append("\":").append(this.request == null ? "null" : this.request.toString()).append(",");
    
                if(stringBuilder.lastIndexOf(",") > 0)
                stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                stringBuilder.append("}");

              return stringBuilder.toString();
            }

          }

            public static class getPatientHomePageInfo_result {

            
                  private com.isuwang.dapeng.json.demo.domain.PatientHomePageInfoResponse success;
                  public com.isuwang.dapeng.json.demo.domain.PatientHomePageInfoResponse getSuccess(){
                  return success;
                }

                  public void setSuccess(com.isuwang.dapeng.json.demo.domain.PatientHomePageInfoResponse success){
                  this.success = success;
                }


                  @Override
                  public String toString(){
                  StringBuilder stringBuilder = new StringBuilder("{");
                    
      stringBuilder.append("\"").append("success").append("\":").append(this.success == null ? "null" : this.success.toString()).append(",");
    
                    stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                    stringBuilder.append("}");

                  return stringBuilder.toString();
                }

                
          }

            public static class GetPatientHomePageInfo_argsSerializer implements BeanSerializer<getPatientHomePageInfo_args>{
            
      @Override
      public getPatientHomePageInfo_args read(TProtocol iprot) throws TException{

      getPatientHomePageInfo_args bean = new getPatientHomePageInfo_args();
      com.isuwang.org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();

      while(true){
        schemeField = iprot.readFieldBegin();
        if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

        switch(schemeField.id){
          
              case 1:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRUCT){
              com.isuwang.dapeng.json.demo.domain.PatientHomePageInfoRequest elem0 = new com.isuwang.dapeng.json.demo.domain.PatientHomePageInfoRequest();
        elem0=new com.isuwang.dapeng.json.demo.domain.serializer.PatientHomePageInfoRequestSerializer().read(iprot);
       bean.setRequest(elem0);
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
          
            default:
            com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate(bean);
      return bean;
    }
    
      @Override
      public void write(getPatientHomePageInfo_args bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("getPatientHomePageInfo_args"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("request", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, (short) 1));
            com.isuwang.dapeng.json.demo.domain.PatientHomePageInfoRequest elem0 = bean.getRequest();
             new com.isuwang.dapeng.json.demo.domain.serializer.PatientHomePageInfoRequestSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(getPatientHomePageInfo_args bean) throws TException{
      
              if(bean.getRequest() == null)
              throw new SoaException(SoaBaseCode.NotNull, "request字段不允许为空");
            
                if(bean.getRequest() != null)
                new com.isuwang.dapeng.json.demo.domain.serializer.PatientHomePageInfoRequestSerializer().validate(bean.getRequest());
              
    }
    

            @Override
            public String toString(getPatientHomePageInfo_args bean) { return bean == null ? "null" : bean.toString(); }

          }

            public static class GetPatientHomePageInfo_resultSerializer implements BeanSerializer<getPatientHomePageInfo_result>{
            @Override
            public getPatientHomePageInfo_result read(TProtocol iprot) throws TException{

              getPatientHomePageInfo_result bean = new getPatientHomePageInfo_result();
              com.isuwang.org.apache.thrift.protocol.TField schemeField;
              iprot.readStructBegin();

              while(true){
                schemeField = iprot.readFieldBegin();
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

                switch(schemeField.id){
                  case 0:  //SUCCESS
                  if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRUCT){
                    com.isuwang.dapeng.json.demo.domain.PatientHomePageInfoResponse elem0 = new com.isuwang.dapeng.json.demo.domain.PatientHomePageInfoResponse();
        elem0=new com.isuwang.dapeng.json.demo.domain.serializer.PatientHomePageInfoResponseSerializer().read(iprot);
       bean.setSuccess(elem0);
                  }else{
                    com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }
                  break;
                  /*
                  case 1: //ERROR
                  bean.setSoaException(new SoaException());
                  new SoaExceptionSerializer().read(bean.getSoaException(),iprot);
                  break A;
                  */
                  default:
                  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
              }
              iprot.readStructEnd();

              validate(bean);
              return bean;
            }
            
      @Override
      public void write(getPatientHomePageInfo_result bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("getPatientHomePageInfo_result"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("success", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, (short) 0));
            com.isuwang.dapeng.json.demo.domain.PatientHomePageInfoResponse elem0 = bean.getSuccess();
             new com.isuwang.dapeng.json.demo.domain.serializer.PatientHomePageInfoResponseSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
            
      public void validate(getPatientHomePageInfo_result bean) throws TException{
      
              if(bean.getSuccess() == null)
              throw new SoaException(SoaBaseCode.NotNull, "success字段不允许为空");
            
                if(bean.getSuccess() != null)
                new com.isuwang.dapeng.json.demo.domain.serializer.PatientHomePageInfoResponseSerializer().validate(bean.getSuccess());
              
    }
    

            @Override
            public String toString(getPatientHomePageInfo_result bean) { return bean == null ? "null" : bean.toString(); }
          }

            public static class getPatientHomePageInfo<I extends com.isuwang.dapeng.json.demo.service.OrderServiceAsync> extends SoaFunctionDefinition.Async<I, getPatientHomePageInfo_args, getPatientHomePageInfo_result>
            {
              public getPatientHomePageInfo()
              {
                super("getPatientHomePageInfo", new GetPatientHomePageInfo_argsSerializer(),  new GetPatientHomePageInfo_resultSerializer());
              }

              @Override
              public CompletableFuture<getPatientHomePageInfo_result> apply(OrderServiceAsync iface, getPatientHomePageInfo_args getPatientHomePageInfo_args) throws SoaException
              {

                CompletableFuture<com.isuwang.dapeng.json.demo.domain.PatientHomePageInfoResponse> result = (CompletableFuture<com.isuwang.dapeng.json.demo.domain.PatientHomePageInfoResponse>) iface.getPatientHomePageInfo(getPatientHomePageInfo_args.request ,50000);

                return result.thenApply(( com.isuwang.dapeng.json.demo.domain.PatientHomePageInfoResponse i) -> {
                  getPatientHomePageInfo_result res = new getPatientHomePageInfo_result();
                  res.setSuccess(i);
                  return res;
              });
              }

            }
          
            public static class getPatientHomePageSliderNotice_args {
            
                private com.isuwang.dapeng.json.demo.domain.PatientHomePageSliderNoticeRequest request;
                public com.isuwang.dapeng.json.demo.domain.PatientHomePageSliderNoticeRequest getRequest(){
                return this.request;
              }
                public void setRequest(com.isuwang.dapeng.json.demo.domain.PatientHomePageSliderNoticeRequest request){
                this.request = request;
              }
              

            @Override
            public String toString(){
              StringBuilder stringBuilder = new StringBuilder("{");
                
      stringBuilder.append("\"").append("request").append("\":").append(this.request == null ? "null" : this.request.toString()).append(",");
    
                if(stringBuilder.lastIndexOf(",") > 0)
                stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                stringBuilder.append("}");

              return stringBuilder.toString();
            }

          }

            public static class getPatientHomePageSliderNotice_result {

            
                  private com.isuwang.dapeng.json.demo.domain.PatientHomePageSliderNoticeResponse success;
                  public com.isuwang.dapeng.json.demo.domain.PatientHomePageSliderNoticeResponse getSuccess(){
                  return success;
                }

                  public void setSuccess(com.isuwang.dapeng.json.demo.domain.PatientHomePageSliderNoticeResponse success){
                  this.success = success;
                }


                  @Override
                  public String toString(){
                  StringBuilder stringBuilder = new StringBuilder("{");
                    
      stringBuilder.append("\"").append("success").append("\":").append(this.success == null ? "null" : this.success.toString()).append(",");
    
                    stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                    stringBuilder.append("}");

                  return stringBuilder.toString();
                }

                
          }

            public static class GetPatientHomePageSliderNotice_argsSerializer implements BeanSerializer<getPatientHomePageSliderNotice_args>{
            
      @Override
      public getPatientHomePageSliderNotice_args read(TProtocol iprot) throws TException{

      getPatientHomePageSliderNotice_args bean = new getPatientHomePageSliderNotice_args();
      com.isuwang.org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();

      while(true){
        schemeField = iprot.readFieldBegin();
        if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

        switch(schemeField.id){
          
              case 1:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRUCT){
              com.isuwang.dapeng.json.demo.domain.PatientHomePageSliderNoticeRequest elem0 = new com.isuwang.dapeng.json.demo.domain.PatientHomePageSliderNoticeRequest();
        elem0=new com.isuwang.dapeng.json.demo.domain.serializer.PatientHomePageSliderNoticeRequestSerializer().read(iprot);
       bean.setRequest(elem0);
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
          
            default:
            com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate(bean);
      return bean;
    }
    
      @Override
      public void write(getPatientHomePageSliderNotice_args bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("getPatientHomePageSliderNotice_args"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("request", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, (short) 1));
            com.isuwang.dapeng.json.demo.domain.PatientHomePageSliderNoticeRequest elem0 = bean.getRequest();
             new com.isuwang.dapeng.json.demo.domain.serializer.PatientHomePageSliderNoticeRequestSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(getPatientHomePageSliderNotice_args bean) throws TException{
      
              if(bean.getRequest() == null)
              throw new SoaException(SoaBaseCode.NotNull, "request字段不允许为空");
            
                if(bean.getRequest() != null)
                new com.isuwang.dapeng.json.demo.domain.serializer.PatientHomePageSliderNoticeRequestSerializer().validate(bean.getRequest());
              
    }
    

            @Override
            public String toString(getPatientHomePageSliderNotice_args bean) { return bean == null ? "null" : bean.toString(); }

          }

            public static class GetPatientHomePageSliderNotice_resultSerializer implements BeanSerializer<getPatientHomePageSliderNotice_result>{
            @Override
            public getPatientHomePageSliderNotice_result read(TProtocol iprot) throws TException{

              getPatientHomePageSliderNotice_result bean = new getPatientHomePageSliderNotice_result();
              com.isuwang.org.apache.thrift.protocol.TField schemeField;
              iprot.readStructBegin();

              while(true){
                schemeField = iprot.readFieldBegin();
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

                switch(schemeField.id){
                  case 0:  //SUCCESS
                  if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRUCT){
                    com.isuwang.dapeng.json.demo.domain.PatientHomePageSliderNoticeResponse elem0 = new com.isuwang.dapeng.json.demo.domain.PatientHomePageSliderNoticeResponse();
        elem0=new com.isuwang.dapeng.json.demo.domain.serializer.PatientHomePageSliderNoticeResponseSerializer().read(iprot);
       bean.setSuccess(elem0);
                  }else{
                    com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }
                  break;
                  /*
                  case 1: //ERROR
                  bean.setSoaException(new SoaException());
                  new SoaExceptionSerializer().read(bean.getSoaException(),iprot);
                  break A;
                  */
                  default:
                  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
              }
              iprot.readStructEnd();

              validate(bean);
              return bean;
            }
            
      @Override
      public void write(getPatientHomePageSliderNotice_result bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("getPatientHomePageSliderNotice_result"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("success", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, (short) 0));
            com.isuwang.dapeng.json.demo.domain.PatientHomePageSliderNoticeResponse elem0 = bean.getSuccess();
             new com.isuwang.dapeng.json.demo.domain.serializer.PatientHomePageSliderNoticeResponseSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
            
      public void validate(getPatientHomePageSliderNotice_result bean) throws TException{
      
              if(bean.getSuccess() == null)
              throw new SoaException(SoaBaseCode.NotNull, "success字段不允许为空");
            
                if(bean.getSuccess() != null)
                new com.isuwang.dapeng.json.demo.domain.serializer.PatientHomePageSliderNoticeResponseSerializer().validate(bean.getSuccess());
              
    }
    

            @Override
            public String toString(getPatientHomePageSliderNotice_result bean) { return bean == null ? "null" : bean.toString(); }
          }

            public static class getPatientHomePageSliderNotice<I extends com.isuwang.dapeng.json.demo.service.OrderServiceAsync> extends SoaFunctionDefinition.Async<I, getPatientHomePageSliderNotice_args, getPatientHomePageSliderNotice_result>
            {
              public getPatientHomePageSliderNotice()
              {
                super("getPatientHomePageSliderNotice", new GetPatientHomePageSliderNotice_argsSerializer(),  new GetPatientHomePageSliderNotice_resultSerializer());
              }

              @Override
              public CompletableFuture<getPatientHomePageSliderNotice_result> apply(OrderServiceAsync iface, getPatientHomePageSliderNotice_args getPatientHomePageSliderNotice_args) throws SoaException
              {

                CompletableFuture<com.isuwang.dapeng.json.demo.domain.PatientHomePageSliderNoticeResponse> result = (CompletableFuture<com.isuwang.dapeng.json.demo.domain.PatientHomePageSliderNoticeResponse>) iface.getPatientHomePageSliderNotice(getPatientHomePageSliderNotice_args.request ,50000);

                return result.thenApply(( com.isuwang.dapeng.json.demo.domain.PatientHomePageSliderNoticeResponse i) -> {
                  getPatientHomePageSliderNotice_result res = new getPatientHomePageSliderNotice_result();
                  res.setSuccess(i);
                  return res;
              });
              }

            }
          
            public static class saveRecommends_args {
            
                private com.isuwang.dapeng.json.demo.domain.SaveRecommendsRequest request;
                public com.isuwang.dapeng.json.demo.domain.SaveRecommendsRequest getRequest(){
                return this.request;
              }
                public void setRequest(com.isuwang.dapeng.json.demo.domain.SaveRecommendsRequest request){
                this.request = request;
              }
              

            @Override
            public String toString(){
              StringBuilder stringBuilder = new StringBuilder("{");
                
      stringBuilder.append("\"").append("request").append("\":").append(this.request == null ? "null" : this.request.toString()).append(",");
    
                if(stringBuilder.lastIndexOf(",") > 0)
                stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                stringBuilder.append("}");

              return stringBuilder.toString();
            }

          }

            public static class saveRecommends_result {

            
                  @Override
                  public String toString(){
                  return "{}";
                }
                
          }

            public static class SaveRecommends_argsSerializer implements BeanSerializer<saveRecommends_args>{
            
      @Override
      public saveRecommends_args read(TProtocol iprot) throws TException{

      saveRecommends_args bean = new saveRecommends_args();
      com.isuwang.org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();

      while(true){
        schemeField = iprot.readFieldBegin();
        if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

        switch(schemeField.id){
          
              case 1:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRUCT){
              com.isuwang.dapeng.json.demo.domain.SaveRecommendsRequest elem0 = new com.isuwang.dapeng.json.demo.domain.SaveRecommendsRequest();
        elem0=new com.isuwang.dapeng.json.demo.domain.serializer.SaveRecommendsRequestSerializer().read(iprot);
       bean.setRequest(elem0);
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
          
            default:
            com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate(bean);
      return bean;
    }
    
      @Override
      public void write(saveRecommends_args bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("saveRecommends_args"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("request", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, (short) 1));
            com.isuwang.dapeng.json.demo.domain.SaveRecommendsRequest elem0 = bean.getRequest();
             new com.isuwang.dapeng.json.demo.domain.serializer.SaveRecommendsRequestSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(saveRecommends_args bean) throws TException{
      
              if(bean.getRequest() == null)
              throw new SoaException(SoaBaseCode.NotNull, "request字段不允许为空");
            
                if(bean.getRequest() != null)
                new com.isuwang.dapeng.json.demo.domain.serializer.SaveRecommendsRequestSerializer().validate(bean.getRequest());
              
    }
    

            @Override
            public String toString(saveRecommends_args bean) { return bean == null ? "null" : bean.toString(); }

          }

            public static class SaveRecommends_resultSerializer implements BeanSerializer<saveRecommends_result>{
            @Override
            public saveRecommends_result read(TProtocol iprot) throws TException{

              saveRecommends_result bean = new saveRecommends_result();
              com.isuwang.org.apache.thrift.protocol.TField schemeField;
              iprot.readStructBegin();

              while(true){
                schemeField = iprot.readFieldBegin();
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

                switch(schemeField.id){
                  case 0:  //SUCCESS
                  if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.VOID){
                    
      com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }else{
                    com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }
                  break;
                  /*
                  case 1: //ERROR
                  bean.setSoaException(new SoaException());
                  new SoaExceptionSerializer().read(bean.getSoaException(),iprot);
                  break A;
                  */
                  default:
                  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
              }
              iprot.readStructEnd();

              validate(bean);
              return bean;
            }
            
      @Override
      public void write(saveRecommends_result bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("saveRecommends_result"));

      
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
            
      public void validate(saveRecommends_result bean) throws TException{
      
    }
    

            @Override
            public String toString(saveRecommends_result bean) { return bean == null ? "null" : bean.toString(); }
          }

            public static class saveRecommends<I extends com.isuwang.dapeng.json.demo.service.OrderServiceAsync> extends SoaFunctionDefinition.Async<I, saveRecommends_args, saveRecommends_result>
            {
              public saveRecommends()
              {
                super("saveRecommends", new SaveRecommends_argsSerializer(),  new SaveRecommends_resultSerializer());
              }

              @Override
              public CompletableFuture<saveRecommends_result> apply(OrderServiceAsync iface, saveRecommends_args saveRecommends_args) throws SoaException
              {

                CompletableFuture<Void> result = (CompletableFuture<Void>) iface.saveRecommends(saveRecommends_args.request ,50000);

                return result.thenApply((Void) -> {
                  saveRecommends_result res = new saveRecommends_result();
                  
                  return res;
              });
              }

            }
          
            public static class listRecommends_args {
            
                private com.isuwang.dapeng.json.demo.domain.ListRecommendsRequest request;
                public com.isuwang.dapeng.json.demo.domain.ListRecommendsRequest getRequest(){
                return this.request;
              }
                public void setRequest(com.isuwang.dapeng.json.demo.domain.ListRecommendsRequest request){
                this.request = request;
              }
              

            @Override
            public String toString(){
              StringBuilder stringBuilder = new StringBuilder("{");
                
      stringBuilder.append("\"").append("request").append("\":").append(this.request == null ? "null" : this.request.toString()).append(",");
    
                if(stringBuilder.lastIndexOf(",") > 0)
                stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                stringBuilder.append("}");

              return stringBuilder.toString();
            }

          }

            public static class listRecommends_result {

            
                  private com.isuwang.dapeng.json.demo.domain.ListRecommendsRespone success;
                  public com.isuwang.dapeng.json.demo.domain.ListRecommendsRespone getSuccess(){
                  return success;
                }

                  public void setSuccess(com.isuwang.dapeng.json.demo.domain.ListRecommendsRespone success){
                  this.success = success;
                }


                  @Override
                  public String toString(){
                  StringBuilder stringBuilder = new StringBuilder("{");
                    
      stringBuilder.append("\"").append("success").append("\":").append(this.success == null ? "null" : this.success.toString()).append(",");
    
                    stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                    stringBuilder.append("}");

                  return stringBuilder.toString();
                }

                
          }

            public static class ListRecommends_argsSerializer implements BeanSerializer<listRecommends_args>{
            
      @Override
      public listRecommends_args read(TProtocol iprot) throws TException{

      listRecommends_args bean = new listRecommends_args();
      com.isuwang.org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();

      while(true){
        schemeField = iprot.readFieldBegin();
        if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

        switch(schemeField.id){
          
              case 1:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRUCT){
              com.isuwang.dapeng.json.demo.domain.ListRecommendsRequest elem0 = new com.isuwang.dapeng.json.demo.domain.ListRecommendsRequest();
        elem0=new com.isuwang.dapeng.json.demo.domain.serializer.ListRecommendsRequestSerializer().read(iprot);
       bean.setRequest(elem0);
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
          
            default:
            com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate(bean);
      return bean;
    }
    
      @Override
      public void write(listRecommends_args bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("listRecommends_args"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("request", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, (short) 1));
            com.isuwang.dapeng.json.demo.domain.ListRecommendsRequest elem0 = bean.getRequest();
             new com.isuwang.dapeng.json.demo.domain.serializer.ListRecommendsRequestSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(listRecommends_args bean) throws TException{
      
              if(bean.getRequest() == null)
              throw new SoaException(SoaBaseCode.NotNull, "request字段不允许为空");
            
                if(bean.getRequest() != null)
                new com.isuwang.dapeng.json.demo.domain.serializer.ListRecommendsRequestSerializer().validate(bean.getRequest());
              
    }
    

            @Override
            public String toString(listRecommends_args bean) { return bean == null ? "null" : bean.toString(); }

          }

            public static class ListRecommends_resultSerializer implements BeanSerializer<listRecommends_result>{
            @Override
            public listRecommends_result read(TProtocol iprot) throws TException{

              listRecommends_result bean = new listRecommends_result();
              com.isuwang.org.apache.thrift.protocol.TField schemeField;
              iprot.readStructBegin();

              while(true){
                schemeField = iprot.readFieldBegin();
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

                switch(schemeField.id){
                  case 0:  //SUCCESS
                  if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRUCT){
                    com.isuwang.dapeng.json.demo.domain.ListRecommendsRespone elem0 = new com.isuwang.dapeng.json.demo.domain.ListRecommendsRespone();
        elem0=new com.isuwang.dapeng.json.demo.domain.serializer.ListRecommendsResponeSerializer().read(iprot);
       bean.setSuccess(elem0);
                  }else{
                    com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }
                  break;
                  /*
                  case 1: //ERROR
                  bean.setSoaException(new SoaException());
                  new SoaExceptionSerializer().read(bean.getSoaException(),iprot);
                  break A;
                  */
                  default:
                  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
              }
              iprot.readStructEnd();

              validate(bean);
              return bean;
            }
            
      @Override
      public void write(listRecommends_result bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("listRecommends_result"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("success", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, (short) 0));
            com.isuwang.dapeng.json.demo.domain.ListRecommendsRespone elem0 = bean.getSuccess();
             new com.isuwang.dapeng.json.demo.domain.serializer.ListRecommendsResponeSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
            
      public void validate(listRecommends_result bean) throws TException{
      
              if(bean.getSuccess() == null)
              throw new SoaException(SoaBaseCode.NotNull, "success字段不允许为空");
            
                if(bean.getSuccess() != null)
                new com.isuwang.dapeng.json.demo.domain.serializer.ListRecommendsResponeSerializer().validate(bean.getSuccess());
              
    }
    

            @Override
            public String toString(listRecommends_result bean) { return bean == null ? "null" : bean.toString(); }
          }

            public static class listRecommends<I extends com.isuwang.dapeng.json.demo.service.OrderServiceAsync> extends SoaFunctionDefinition.Async<I, listRecommends_args, listRecommends_result>
            {
              public listRecommends()
              {
                super("listRecommends", new ListRecommends_argsSerializer(),  new ListRecommends_resultSerializer());
              }

              @Override
              public CompletableFuture<listRecommends_result> apply(OrderServiceAsync iface, listRecommends_args listRecommends_args) throws SoaException
              {

                CompletableFuture<com.isuwang.dapeng.json.demo.domain.ListRecommendsRespone> result = (CompletableFuture<com.isuwang.dapeng.json.demo.domain.ListRecommendsRespone>) iface.listRecommends(listRecommends_args.request ,50000);

                return result.thenApply(( com.isuwang.dapeng.json.demo.domain.ListRecommendsRespone i) -> {
                  listRecommends_result res = new listRecommends_result();
                  res.setSuccess(i);
                  return res;
              });
              }

            }
          
            public static class getArticleReadership_args {
            
                private Integer articleId;
                public Integer getArticleId(){
                return this.articleId;
              }
                public void setArticleId(Integer articleId){
                this.articleId = articleId;
              }
              

            @Override
            public String toString(){
              StringBuilder stringBuilder = new StringBuilder("{");
                
      stringBuilder.append("\"").append("articleId").append("\":").append(articleId).append(",");
    
                if(stringBuilder.lastIndexOf(",") > 0)
                stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                stringBuilder.append("}");

              return stringBuilder.toString();
            }

          }

            public static class getArticleReadership_result {

            
                  private Integer success;
                  public Integer getSuccess(){
                  return success;
                }

                  public void setSuccess(Integer success){
                  this.success = success;
                }


                  @Override
                  public String toString(){
                  StringBuilder stringBuilder = new StringBuilder("{");
                    
      stringBuilder.append("\"").append("success").append("\":").append(success).append(",");
    
                    stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                    stringBuilder.append("}");

                  return stringBuilder.toString();
                }

                
          }

            public static class GetArticleReadership_argsSerializer implements BeanSerializer<getArticleReadership_args>{
            
      @Override
      public getArticleReadership_args read(TProtocol iprot) throws TException{

      getArticleReadership_args bean = new getArticleReadership_args();
      com.isuwang.org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();

      while(true){
        schemeField = iprot.readFieldBegin();
        if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

        switch(schemeField.id){
          
              case 1:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.I32){
               int elem0 = iprot.readI32();
       bean.setArticleId(elem0);
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
          
            default:
            com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate(bean);
      return bean;
    }
    
      @Override
      public void write(getArticleReadership_args bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("getArticleReadership_args"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("articleId", com.isuwang.org.apache.thrift.protocol.TType.I32, (short) 1));
            Integer elem0 = bean.getArticleId();
            oprot.writeI32(elem0);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(getArticleReadership_args bean) throws TException{
      
    }
    

            @Override
            public String toString(getArticleReadership_args bean) { return bean == null ? "null" : bean.toString(); }

          }

            public static class GetArticleReadership_resultSerializer implements BeanSerializer<getArticleReadership_result>{
            @Override
            public getArticleReadership_result read(TProtocol iprot) throws TException{

              getArticleReadership_result bean = new getArticleReadership_result();
              com.isuwang.org.apache.thrift.protocol.TField schemeField;
              iprot.readStructBegin();

              while(true){
                schemeField = iprot.readFieldBegin();
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

                switch(schemeField.id){
                  case 0:  //SUCCESS
                  if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.I32){
                     int elem0 = iprot.readI32();
       bean.setSuccess(elem0);
                  }else{
                    com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }
                  break;
                  /*
                  case 1: //ERROR
                  bean.setSoaException(new SoaException());
                  new SoaExceptionSerializer().read(bean.getSoaException(),iprot);
                  break A;
                  */
                  default:
                  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
              }
              iprot.readStructEnd();

              validate(bean);
              return bean;
            }
            
      @Override
      public void write(getArticleReadership_result bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("getArticleReadership_result"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("success", com.isuwang.org.apache.thrift.protocol.TType.I32, (short) 0));
            Integer elem0 = bean.getSuccess();
            oprot.writeI32(elem0);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
            
      public void validate(getArticleReadership_result bean) throws TException{
      
    }
    

            @Override
            public String toString(getArticleReadership_result bean) { return bean == null ? "null" : bean.toString(); }
          }

            public static class getArticleReadership<I extends com.isuwang.dapeng.json.demo.service.OrderServiceAsync> extends SoaFunctionDefinition.Async<I, getArticleReadership_args, getArticleReadership_result>
            {
              public getArticleReadership()
              {
                super("getArticleReadership", new GetArticleReadership_argsSerializer(),  new GetArticleReadership_resultSerializer());
              }

              @Override
              public CompletableFuture<getArticleReadership_result> apply(OrderServiceAsync iface, getArticleReadership_args getArticleReadership_args) throws SoaException
              {

                CompletableFuture<Integer> result = (CompletableFuture<Integer>) iface.getArticleReadership(getArticleReadership_args.articleId ,50000);

                return result.thenApply(( Integer i) -> {
                  getArticleReadership_result res = new getArticleReadership_result();
                  res.setSuccess(i);
                  return res;
              });
              }

            }
          
            public static class readArticle_args {
            
                private Integer articleId;
                public Integer getArticleId(){
                return this.articleId;
              }
                public void setArticleId(Integer articleId){
                this.articleId = articleId;
              }
              

            @Override
            public String toString(){
              StringBuilder stringBuilder = new StringBuilder("{");
                
      stringBuilder.append("\"").append("articleId").append("\":").append(articleId).append(",");
    
                if(stringBuilder.lastIndexOf(",") > 0)
                stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                stringBuilder.append("}");

              return stringBuilder.toString();
            }

          }

            public static class readArticle_result {

            
                  private Integer success;
                  public Integer getSuccess(){
                  return success;
                }

                  public void setSuccess(Integer success){
                  this.success = success;
                }


                  @Override
                  public String toString(){
                  StringBuilder stringBuilder = new StringBuilder("{");
                    
      stringBuilder.append("\"").append("success").append("\":").append(success).append(",");
    
                    stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                    stringBuilder.append("}");

                  return stringBuilder.toString();
                }

                
          }

            public static class ReadArticle_argsSerializer implements BeanSerializer<readArticle_args>{
            
      @Override
      public readArticle_args read(TProtocol iprot) throws TException{

      readArticle_args bean = new readArticle_args();
      com.isuwang.org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();

      while(true){
        schemeField = iprot.readFieldBegin();
        if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

        switch(schemeField.id){
          
              case 1:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.I32){
               int elem0 = iprot.readI32();
       bean.setArticleId(elem0);
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
          
            default:
            com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate(bean);
      return bean;
    }
    
      @Override
      public void write(readArticle_args bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("readArticle_args"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("articleId", com.isuwang.org.apache.thrift.protocol.TType.I32, (short) 1));
            Integer elem0 = bean.getArticleId();
            oprot.writeI32(elem0);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(readArticle_args bean) throws TException{
      
    }
    

            @Override
            public String toString(readArticle_args bean) { return bean == null ? "null" : bean.toString(); }

          }

            public static class ReadArticle_resultSerializer implements BeanSerializer<readArticle_result>{
            @Override
            public readArticle_result read(TProtocol iprot) throws TException{

              readArticle_result bean = new readArticle_result();
              com.isuwang.org.apache.thrift.protocol.TField schemeField;
              iprot.readStructBegin();

              while(true){
                schemeField = iprot.readFieldBegin();
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

                switch(schemeField.id){
                  case 0:  //SUCCESS
                  if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.I32){
                     int elem0 = iprot.readI32();
       bean.setSuccess(elem0);
                  }else{
                    com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }
                  break;
                  /*
                  case 1: //ERROR
                  bean.setSoaException(new SoaException());
                  new SoaExceptionSerializer().read(bean.getSoaException(),iprot);
                  break A;
                  */
                  default:
                  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
              }
              iprot.readStructEnd();

              validate(bean);
              return bean;
            }
            
      @Override
      public void write(readArticle_result bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("readArticle_result"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("success", com.isuwang.org.apache.thrift.protocol.TType.I32, (short) 0));
            Integer elem0 = bean.getSuccess();
            oprot.writeI32(elem0);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
            
      public void validate(readArticle_result bean) throws TException{
      
    }
    

            @Override
            public String toString(readArticle_result bean) { return bean == null ? "null" : bean.toString(); }
          }

            public static class readArticle<I extends com.isuwang.dapeng.json.demo.service.OrderServiceAsync> extends SoaFunctionDefinition.Async<I, readArticle_args, readArticle_result>
            {
              public readArticle()
              {
                super("readArticle", new ReadArticle_argsSerializer(),  new ReadArticle_resultSerializer());
              }

              @Override
              public CompletableFuture<readArticle_result> apply(OrderServiceAsync iface, readArticle_args readArticle_args) throws SoaException
              {

                CompletableFuture<Integer> result = (CompletableFuture<Integer>) iface.readArticle(readArticle_args.articleId ,50000);

                return result.thenApply(( Integer i) -> {
                  readArticle_result res = new readArticle_result();
                  res.setSuccess(i);
                  return res;
              });
              }

            }
          
            public static class listPriceRule_args {
            
                private com.isuwang.dapeng.json.demo.domain.ListPriceRuleRequest request;
                public com.isuwang.dapeng.json.demo.domain.ListPriceRuleRequest getRequest(){
                return this.request;
              }
                public void setRequest(com.isuwang.dapeng.json.demo.domain.ListPriceRuleRequest request){
                this.request = request;
              }
              

            @Override
            public String toString(){
              StringBuilder stringBuilder = new StringBuilder("{");
                
      stringBuilder.append("\"").append("request").append("\":").append(this.request == null ? "null" : this.request.toString()).append(",");
    
                if(stringBuilder.lastIndexOf(",") > 0)
                stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                stringBuilder.append("}");

              return stringBuilder.toString();
            }

          }

            public static class listPriceRule_result {

            
                  private com.isuwang.dapeng.json.demo.domain.ListPriceRuleResponse success;
                  public com.isuwang.dapeng.json.demo.domain.ListPriceRuleResponse getSuccess(){
                  return success;
                }

                  public void setSuccess(com.isuwang.dapeng.json.demo.domain.ListPriceRuleResponse success){
                  this.success = success;
                }


                  @Override
                  public String toString(){
                  StringBuilder stringBuilder = new StringBuilder("{");
                    
      stringBuilder.append("\"").append("success").append("\":").append(this.success == null ? "null" : this.success.toString()).append(",");
    
                    stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                    stringBuilder.append("}");

                  return stringBuilder.toString();
                }

                
          }

            public static class ListPriceRule_argsSerializer implements BeanSerializer<listPriceRule_args>{
            
      @Override
      public listPriceRule_args read(TProtocol iprot) throws TException{

      listPriceRule_args bean = new listPriceRule_args();
      com.isuwang.org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();

      while(true){
        schemeField = iprot.readFieldBegin();
        if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

        switch(schemeField.id){
          
              case 1:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRUCT){
              com.isuwang.dapeng.json.demo.domain.ListPriceRuleRequest elem0 = new com.isuwang.dapeng.json.demo.domain.ListPriceRuleRequest();
        elem0=new com.isuwang.dapeng.json.demo.domain.serializer.ListPriceRuleRequestSerializer().read(iprot);
       bean.setRequest(elem0);
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
          
            default:
            com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate(bean);
      return bean;
    }
    
      @Override
      public void write(listPriceRule_args bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("listPriceRule_args"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("request", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, (short) 1));
            com.isuwang.dapeng.json.demo.domain.ListPriceRuleRequest elem0 = bean.getRequest();
             new com.isuwang.dapeng.json.demo.domain.serializer.ListPriceRuleRequestSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(listPriceRule_args bean) throws TException{
      
              if(bean.getRequest() == null)
              throw new SoaException(SoaBaseCode.NotNull, "request字段不允许为空");
            
                if(bean.getRequest() != null)
                new com.isuwang.dapeng.json.demo.domain.serializer.ListPriceRuleRequestSerializer().validate(bean.getRequest());
              
    }
    

            @Override
            public String toString(listPriceRule_args bean) { return bean == null ? "null" : bean.toString(); }

          }

            public static class ListPriceRule_resultSerializer implements BeanSerializer<listPriceRule_result>{
            @Override
            public listPriceRule_result read(TProtocol iprot) throws TException{

              listPriceRule_result bean = new listPriceRule_result();
              com.isuwang.org.apache.thrift.protocol.TField schemeField;
              iprot.readStructBegin();

              while(true){
                schemeField = iprot.readFieldBegin();
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

                switch(schemeField.id){
                  case 0:  //SUCCESS
                  if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRUCT){
                    com.isuwang.dapeng.json.demo.domain.ListPriceRuleResponse elem0 = new com.isuwang.dapeng.json.demo.domain.ListPriceRuleResponse();
        elem0=new com.isuwang.dapeng.json.demo.domain.serializer.ListPriceRuleResponseSerializer().read(iprot);
       bean.setSuccess(elem0);
                  }else{
                    com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }
                  break;
                  /*
                  case 1: //ERROR
                  bean.setSoaException(new SoaException());
                  new SoaExceptionSerializer().read(bean.getSoaException(),iprot);
                  break A;
                  */
                  default:
                  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
              }
              iprot.readStructEnd();

              validate(bean);
              return bean;
            }
            
      @Override
      public void write(listPriceRule_result bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("listPriceRule_result"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("success", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, (short) 0));
            com.isuwang.dapeng.json.demo.domain.ListPriceRuleResponse elem0 = bean.getSuccess();
             new com.isuwang.dapeng.json.demo.domain.serializer.ListPriceRuleResponseSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
            
      public void validate(listPriceRule_result bean) throws TException{
      
              if(bean.getSuccess() == null)
              throw new SoaException(SoaBaseCode.NotNull, "success字段不允许为空");
            
                if(bean.getSuccess() != null)
                new com.isuwang.dapeng.json.demo.domain.serializer.ListPriceRuleResponseSerializer().validate(bean.getSuccess());
              
    }
    

            @Override
            public String toString(listPriceRule_result bean) { return bean == null ? "null" : bean.toString(); }
          }

            public static class listPriceRule<I extends com.isuwang.dapeng.json.demo.service.OrderServiceAsync> extends SoaFunctionDefinition.Async<I, listPriceRule_args, listPriceRule_result>
            {
              public listPriceRule()
              {
                super("listPriceRule", new ListPriceRule_argsSerializer(),  new ListPriceRule_resultSerializer());
              }

              @Override
              public CompletableFuture<listPriceRule_result> apply(OrderServiceAsync iface, listPriceRule_args listPriceRule_args) throws SoaException
              {

                CompletableFuture<com.isuwang.dapeng.json.demo.domain.ListPriceRuleResponse> result = (CompletableFuture<com.isuwang.dapeng.json.demo.domain.ListPriceRuleResponse>) iface.listPriceRule(listPriceRule_args.request ,50000);

                return result.thenApply(( com.isuwang.dapeng.json.demo.domain.ListPriceRuleResponse i) -> {
                  listPriceRule_result res = new listPriceRule_result();
                  res.setSuccess(i);
                  return res;
              });
              }

            }
          
            public static class modifyPriceRule_args {
            
                private com.isuwang.dapeng.json.demo.domain.TPriceRuleDTO request;
                public com.isuwang.dapeng.json.demo.domain.TPriceRuleDTO getRequest(){
                return this.request;
              }
                public void setRequest(com.isuwang.dapeng.json.demo.domain.TPriceRuleDTO request){
                this.request = request;
              }
              

            @Override
            public String toString(){
              StringBuilder stringBuilder = new StringBuilder("{");
                
      stringBuilder.append("\"").append("request").append("\":").append(this.request == null ? "null" : this.request.toString()).append(",");
    
                if(stringBuilder.lastIndexOf(",") > 0)
                stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                stringBuilder.append("}");

              return stringBuilder.toString();
            }

          }

            public static class modifyPriceRule_result {

            
                  @Override
                  public String toString(){
                  return "{}";
                }
                
          }

            public static class ModifyPriceRule_argsSerializer implements BeanSerializer<modifyPriceRule_args>{
            
      @Override
      public modifyPriceRule_args read(TProtocol iprot) throws TException{

      modifyPriceRule_args bean = new modifyPriceRule_args();
      com.isuwang.org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();

      while(true){
        schemeField = iprot.readFieldBegin();
        if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

        switch(schemeField.id){
          
              case 1:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRUCT){
              com.isuwang.dapeng.json.demo.domain.TPriceRuleDTO elem0 = new com.isuwang.dapeng.json.demo.domain.TPriceRuleDTO();
        elem0=new com.isuwang.dapeng.json.demo.domain.serializer.TPriceRuleDTOSerializer().read(iprot);
       bean.setRequest(elem0);
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
          
            default:
            com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate(bean);
      return bean;
    }
    
      @Override
      public void write(modifyPriceRule_args bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("modifyPriceRule_args"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("request", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, (short) 1));
            com.isuwang.dapeng.json.demo.domain.TPriceRuleDTO elem0 = bean.getRequest();
             new com.isuwang.dapeng.json.demo.domain.serializer.TPriceRuleDTOSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(modifyPriceRule_args bean) throws TException{
      
              if(bean.getRequest() == null)
              throw new SoaException(SoaBaseCode.NotNull, "request字段不允许为空");
            
                if(bean.getRequest() != null)
                new com.isuwang.dapeng.json.demo.domain.serializer.TPriceRuleDTOSerializer().validate(bean.getRequest());
              
    }
    

            @Override
            public String toString(modifyPriceRule_args bean) { return bean == null ? "null" : bean.toString(); }

          }

            public static class ModifyPriceRule_resultSerializer implements BeanSerializer<modifyPriceRule_result>{
            @Override
            public modifyPriceRule_result read(TProtocol iprot) throws TException{

              modifyPriceRule_result bean = new modifyPriceRule_result();
              com.isuwang.org.apache.thrift.protocol.TField schemeField;
              iprot.readStructBegin();

              while(true){
                schemeField = iprot.readFieldBegin();
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

                switch(schemeField.id){
                  case 0:  //SUCCESS
                  if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.VOID){
                    
      com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }else{
                    com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }
                  break;
                  /*
                  case 1: //ERROR
                  bean.setSoaException(new SoaException());
                  new SoaExceptionSerializer().read(bean.getSoaException(),iprot);
                  break A;
                  */
                  default:
                  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
              }
              iprot.readStructEnd();

              validate(bean);
              return bean;
            }
            
      @Override
      public void write(modifyPriceRule_result bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("modifyPriceRule_result"));

      
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
            
      public void validate(modifyPriceRule_result bean) throws TException{
      
    }
    

            @Override
            public String toString(modifyPriceRule_result bean) { return bean == null ? "null" : bean.toString(); }
          }

            public static class modifyPriceRule<I extends com.isuwang.dapeng.json.demo.service.OrderServiceAsync> extends SoaFunctionDefinition.Async<I, modifyPriceRule_args, modifyPriceRule_result>
            {
              public modifyPriceRule()
              {
                super("modifyPriceRule", new ModifyPriceRule_argsSerializer(),  new ModifyPriceRule_resultSerializer());
              }

              @Override
              public CompletableFuture<modifyPriceRule_result> apply(OrderServiceAsync iface, modifyPriceRule_args modifyPriceRule_args) throws SoaException
              {

                CompletableFuture<Void> result = (CompletableFuture<Void>) iface.modifyPriceRule(modifyPriceRule_args.request ,50000);

                return result.thenApply((Void) -> {
                  modifyPriceRule_result res = new modifyPriceRule_result();
                  
                  return res;
              });
              }

            }
          
            public static class savePriceRule_args {
            
                private com.isuwang.dapeng.json.demo.domain.TPriceRuleDTO request;
                public com.isuwang.dapeng.json.demo.domain.TPriceRuleDTO getRequest(){
                return this.request;
              }
                public void setRequest(com.isuwang.dapeng.json.demo.domain.TPriceRuleDTO request){
                this.request = request;
              }
              

            @Override
            public String toString(){
              StringBuilder stringBuilder = new StringBuilder("{");
                
      stringBuilder.append("\"").append("request").append("\":").append(this.request == null ? "null" : this.request.toString()).append(",");
    
                if(stringBuilder.lastIndexOf(",") > 0)
                stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                stringBuilder.append("}");

              return stringBuilder.toString();
            }

          }

            public static class savePriceRule_result {

            
                  @Override
                  public String toString(){
                  return "{}";
                }
                
          }

            public static class SavePriceRule_argsSerializer implements BeanSerializer<savePriceRule_args>{
            
      @Override
      public savePriceRule_args read(TProtocol iprot) throws TException{

      savePriceRule_args bean = new savePriceRule_args();
      com.isuwang.org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();

      while(true){
        schemeField = iprot.readFieldBegin();
        if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

        switch(schemeField.id){
          
              case 1:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRUCT){
              com.isuwang.dapeng.json.demo.domain.TPriceRuleDTO elem0 = new com.isuwang.dapeng.json.demo.domain.TPriceRuleDTO();
        elem0=new com.isuwang.dapeng.json.demo.domain.serializer.TPriceRuleDTOSerializer().read(iprot);
       bean.setRequest(elem0);
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
          
            default:
            com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate(bean);
      return bean;
    }
    
      @Override
      public void write(savePriceRule_args bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("savePriceRule_args"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("request", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, (short) 1));
            com.isuwang.dapeng.json.demo.domain.TPriceRuleDTO elem0 = bean.getRequest();
             new com.isuwang.dapeng.json.demo.domain.serializer.TPriceRuleDTOSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(savePriceRule_args bean) throws TException{
      
              if(bean.getRequest() == null)
              throw new SoaException(SoaBaseCode.NotNull, "request字段不允许为空");
            
                if(bean.getRequest() != null)
                new com.isuwang.dapeng.json.demo.domain.serializer.TPriceRuleDTOSerializer().validate(bean.getRequest());
              
    }
    

            @Override
            public String toString(savePriceRule_args bean) { return bean == null ? "null" : bean.toString(); }

          }

            public static class SavePriceRule_resultSerializer implements BeanSerializer<savePriceRule_result>{
            @Override
            public savePriceRule_result read(TProtocol iprot) throws TException{

              savePriceRule_result bean = new savePriceRule_result();
              com.isuwang.org.apache.thrift.protocol.TField schemeField;
              iprot.readStructBegin();

              while(true){
                schemeField = iprot.readFieldBegin();
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

                switch(schemeField.id){
                  case 0:  //SUCCESS
                  if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.VOID){
                    
      com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }else{
                    com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }
                  break;
                  /*
                  case 1: //ERROR
                  bean.setSoaException(new SoaException());
                  new SoaExceptionSerializer().read(bean.getSoaException(),iprot);
                  break A;
                  */
                  default:
                  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
              }
              iprot.readStructEnd();

              validate(bean);
              return bean;
            }
            
      @Override
      public void write(savePriceRule_result bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("savePriceRule_result"));

      
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
            
      public void validate(savePriceRule_result bean) throws TException{
      
    }
    

            @Override
            public String toString(savePriceRule_result bean) { return bean == null ? "null" : bean.toString(); }
          }

            public static class savePriceRule<I extends com.isuwang.dapeng.json.demo.service.OrderServiceAsync> extends SoaFunctionDefinition.Async<I, savePriceRule_args, savePriceRule_result>
            {
              public savePriceRule()
              {
                super("savePriceRule", new SavePriceRule_argsSerializer(),  new SavePriceRule_resultSerializer());
              }

              @Override
              public CompletableFuture<savePriceRule_result> apply(OrderServiceAsync iface, savePriceRule_args savePriceRule_args) throws SoaException
              {

                CompletableFuture<Void> result = (CompletableFuture<Void>) iface.savePriceRule(savePriceRule_args.request ,50000);

                return result.thenApply((Void) -> {
                  savePriceRule_result res = new savePriceRule_result();
                  
                  return res;
              });
              }

            }
          
            public static class listPackageChargesByDoctorId_args {
            
                private Integer doctorId;
                public Integer getDoctorId(){
                return this.doctorId;
              }
                public void setDoctorId(Integer doctorId){
                this.doctorId = doctorId;
              }
              

            @Override
            public String toString(){
              StringBuilder stringBuilder = new StringBuilder("{");
                
      stringBuilder.append("\"").append("doctorId").append("\":").append(doctorId).append(",");
    
                if(stringBuilder.lastIndexOf(",") > 0)
                stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                stringBuilder.append("}");

              return stringBuilder.toString();
            }

          }

            public static class listPackageChargesByDoctorId_result {

            
                  private java.util.List<com.isuwang.dapeng.json.demo.domain.PackageChargeItem> success;
                  public java.util.List<com.isuwang.dapeng.json.demo.domain.PackageChargeItem> getSuccess(){
                  return success;
                }

                  public void setSuccess(java.util.List<com.isuwang.dapeng.json.demo.domain.PackageChargeItem> success){
                  this.success = success;
                }


                  @Override
                  public String toString(){
                  StringBuilder stringBuilder = new StringBuilder("{");
                    
      stringBuilder.append("\"").append("success").append("\":").append(success).append(",");
    
                    stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                    stringBuilder.append("}");

                  return stringBuilder.toString();
                }

                
          }

            public static class ListPackageChargesByDoctorId_argsSerializer implements BeanSerializer<listPackageChargesByDoctorId_args>{
            
      @Override
      public listPackageChargesByDoctorId_args read(TProtocol iprot) throws TException{

      listPackageChargesByDoctorId_args bean = new listPackageChargesByDoctorId_args();
      com.isuwang.org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();

      while(true){
        schemeField = iprot.readFieldBegin();
        if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

        switch(schemeField.id){
          
              case 1:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.I32){
               int elem0 = iprot.readI32();
       bean.setDoctorId(elem0);
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
          
            default:
            com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate(bean);
      return bean;
    }
    
      @Override
      public void write(listPackageChargesByDoctorId_args bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("listPackageChargesByDoctorId_args"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("doctorId", com.isuwang.org.apache.thrift.protocol.TType.I32, (short) 1));
            Integer elem0 = bean.getDoctorId();
            oprot.writeI32(elem0);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(listPackageChargesByDoctorId_args bean) throws TException{
      
    }
    

            @Override
            public String toString(listPackageChargesByDoctorId_args bean) { return bean == null ? "null" : bean.toString(); }

          }

            public static class ListPackageChargesByDoctorId_resultSerializer implements BeanSerializer<listPackageChargesByDoctorId_result>{
            @Override
            public listPackageChargesByDoctorId_result read(TProtocol iprot) throws TException{

              listPackageChargesByDoctorId_result bean = new listPackageChargesByDoctorId_result();
              com.isuwang.org.apache.thrift.protocol.TField schemeField;
              iprot.readStructBegin();

              while(true){
                schemeField = iprot.readFieldBegin();
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

                switch(schemeField.id){
                  case 0:  //SUCCESS
                  if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.LIST){
                     com.isuwang.org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
        java.util.List<com.isuwang.dapeng.json.demo.domain.PackageChargeItem> elem0 = new java.util.ArrayList<>(_list0.size);
        for(int _i0 = 0; _i0 < _list0.size; ++ _i0){
          com.isuwang.dapeng.json.demo.domain.PackageChargeItem elem1 = new com.isuwang.dapeng.json.demo.domain.PackageChargeItem();
        elem1=new com.isuwang.dapeng.json.demo.domain.serializer.PackageChargeItemSerializer().read(iprot);
          elem0.add(elem1);
        }
        iprot.readListEnd();
       bean.setSuccess(elem0);
                  }else{
                    com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }
                  break;
                  /*
                  case 1: //ERROR
                  bean.setSoaException(new SoaException());
                  new SoaExceptionSerializer().read(bean.getSoaException(),iprot);
                  break A;
                  */
                  default:
                  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
              }
              iprot.readStructEnd();

              validate(bean);
              return bean;
            }
            
      @Override
      public void write(listPackageChargesByDoctorId_result bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("listPackageChargesByDoctorId_result"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("success", com.isuwang.org.apache.thrift.protocol.TType.LIST, (short) 0));
            java.util.List<com.isuwang.dapeng.json.demo.domain.PackageChargeItem> elem0 = bean.getSuccess();
            
          oprot.writeListBegin(new com.isuwang.org.apache.thrift.protocol.TList(com.isuwang.org.apache.thrift.protocol.TType.STRUCT, elem0.size()));
          for(com.isuwang.dapeng.json.demo.domain.PackageChargeItem elem1 : elem0){
           new com.isuwang.dapeng.json.demo.domain.serializer.PackageChargeItemSerializer().write(elem1, oprot);
        }
          oprot.writeListEnd();
        
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
            
      public void validate(listPackageChargesByDoctorId_result bean) throws TException{
      
              if(bean.getSuccess() == null)
              throw new SoaException(SoaBaseCode.NotNull, "success字段不允许为空");
            
    }
    

            @Override
            public String toString(listPackageChargesByDoctorId_result bean) { return bean == null ? "null" : bean.toString(); }
          }

            public static class listPackageChargesByDoctorId<I extends com.isuwang.dapeng.json.demo.service.OrderServiceAsync> extends SoaFunctionDefinition.Async<I, listPackageChargesByDoctorId_args, listPackageChargesByDoctorId_result>
            {
              public listPackageChargesByDoctorId()
              {
                super("listPackageChargesByDoctorId", new ListPackageChargesByDoctorId_argsSerializer(),  new ListPackageChargesByDoctorId_resultSerializer());
              }

              @Override
              public CompletableFuture<listPackageChargesByDoctorId_result> apply(OrderServiceAsync iface, listPackageChargesByDoctorId_args listPackageChargesByDoctorId_args) throws SoaException
              {

                CompletableFuture<java.util.List<com.isuwang.dapeng.json.demo.domain.PackageChargeItem>> result = (CompletableFuture<java.util.List<com.isuwang.dapeng.json.demo.domain.PackageChargeItem>>) iface.listPackageChargesByDoctorId(listPackageChargesByDoctorId_args.doctorId ,50000);

                return result.thenApply(( java.util.List<com.isuwang.dapeng.json.demo.domain.PackageChargeItem> i) -> {
                  listPackageChargesByDoctorId_result res = new listPackageChargesByDoctorId_result();
                  res.setSuccess(i);
                  return res;
              });
              }

            }
          
            public static class getPackageInfo_args {
            
                private com.isuwang.dapeng.json.demo.domain.GetPackageInfoRequest request;
                public com.isuwang.dapeng.json.demo.domain.GetPackageInfoRequest getRequest(){
                return this.request;
              }
                public void setRequest(com.isuwang.dapeng.json.demo.domain.GetPackageInfoRequest request){
                this.request = request;
              }
              

            @Override
            public String toString(){
              StringBuilder stringBuilder = new StringBuilder("{");
                
      stringBuilder.append("\"").append("request").append("\":").append(this.request == null ? "null" : this.request.toString()).append(",");
    
                if(stringBuilder.lastIndexOf(",") > 0)
                stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                stringBuilder.append("}");

              return stringBuilder.toString();
            }

          }

            public static class getPackageInfo_result {

            
                  private com.isuwang.dapeng.json.demo.domain.GetPackageInfoResponse success;
                  public com.isuwang.dapeng.json.demo.domain.GetPackageInfoResponse getSuccess(){
                  return success;
                }

                  public void setSuccess(com.isuwang.dapeng.json.demo.domain.GetPackageInfoResponse success){
                  this.success = success;
                }


                  @Override
                  public String toString(){
                  StringBuilder stringBuilder = new StringBuilder("{");
                    
      stringBuilder.append("\"").append("success").append("\":").append(this.success == null ? "null" : this.success.toString()).append(",");
    
                    stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                    stringBuilder.append("}");

                  return stringBuilder.toString();
                }

                
          }

            public static class GetPackageInfo_argsSerializer implements BeanSerializer<getPackageInfo_args>{
            
      @Override
      public getPackageInfo_args read(TProtocol iprot) throws TException{

      getPackageInfo_args bean = new getPackageInfo_args();
      com.isuwang.org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();

      while(true){
        schemeField = iprot.readFieldBegin();
        if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

        switch(schemeField.id){
          
              case 1:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRUCT){
              com.isuwang.dapeng.json.demo.domain.GetPackageInfoRequest elem0 = new com.isuwang.dapeng.json.demo.domain.GetPackageInfoRequest();
        elem0=new com.isuwang.dapeng.json.demo.domain.serializer.GetPackageInfoRequestSerializer().read(iprot);
       bean.setRequest(elem0);
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
          
            default:
            com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate(bean);
      return bean;
    }
    
      @Override
      public void write(getPackageInfo_args bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("getPackageInfo_args"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("request", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, (short) 1));
            com.isuwang.dapeng.json.demo.domain.GetPackageInfoRequest elem0 = bean.getRequest();
             new com.isuwang.dapeng.json.demo.domain.serializer.GetPackageInfoRequestSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(getPackageInfo_args bean) throws TException{
      
              if(bean.getRequest() == null)
              throw new SoaException(SoaBaseCode.NotNull, "request字段不允许为空");
            
                if(bean.getRequest() != null)
                new com.isuwang.dapeng.json.demo.domain.serializer.GetPackageInfoRequestSerializer().validate(bean.getRequest());
              
    }
    

            @Override
            public String toString(getPackageInfo_args bean) { return bean == null ? "null" : bean.toString(); }

          }

            public static class GetPackageInfo_resultSerializer implements BeanSerializer<getPackageInfo_result>{
            @Override
            public getPackageInfo_result read(TProtocol iprot) throws TException{

              getPackageInfo_result bean = new getPackageInfo_result();
              com.isuwang.org.apache.thrift.protocol.TField schemeField;
              iprot.readStructBegin();

              while(true){
                schemeField = iprot.readFieldBegin();
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

                switch(schemeField.id){
                  case 0:  //SUCCESS
                  if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRUCT){
                    com.isuwang.dapeng.json.demo.domain.GetPackageInfoResponse elem0 = new com.isuwang.dapeng.json.demo.domain.GetPackageInfoResponse();
        elem0=new com.isuwang.dapeng.json.demo.domain.serializer.GetPackageInfoResponseSerializer().read(iprot);
       bean.setSuccess(elem0);
                  }else{
                    com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }
                  break;
                  /*
                  case 1: //ERROR
                  bean.setSoaException(new SoaException());
                  new SoaExceptionSerializer().read(bean.getSoaException(),iprot);
                  break A;
                  */
                  default:
                  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
              }
              iprot.readStructEnd();

              validate(bean);
              return bean;
            }
            
      @Override
      public void write(getPackageInfo_result bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("getPackageInfo_result"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("success", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, (short) 0));
            com.isuwang.dapeng.json.demo.domain.GetPackageInfoResponse elem0 = bean.getSuccess();
             new com.isuwang.dapeng.json.demo.domain.serializer.GetPackageInfoResponseSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
            
      public void validate(getPackageInfo_result bean) throws TException{
      
              if(bean.getSuccess() == null)
              throw new SoaException(SoaBaseCode.NotNull, "success字段不允许为空");
            
                if(bean.getSuccess() != null)
                new com.isuwang.dapeng.json.demo.domain.serializer.GetPackageInfoResponseSerializer().validate(bean.getSuccess());
              
    }
    

            @Override
            public String toString(getPackageInfo_result bean) { return bean == null ? "null" : bean.toString(); }
          }

            public static class getPackageInfo<I extends com.isuwang.dapeng.json.demo.service.OrderServiceAsync> extends SoaFunctionDefinition.Async<I, getPackageInfo_args, getPackageInfo_result>
            {
              public getPackageInfo()
              {
                super("getPackageInfo", new GetPackageInfo_argsSerializer(),  new GetPackageInfo_resultSerializer());
              }

              @Override
              public CompletableFuture<getPackageInfo_result> apply(OrderServiceAsync iface, getPackageInfo_args getPackageInfo_args) throws SoaException
              {

                CompletableFuture<com.isuwang.dapeng.json.demo.domain.GetPackageInfoResponse> result = (CompletableFuture<com.isuwang.dapeng.json.demo.domain.GetPackageInfoResponse>) iface.getPackageInfo(getPackageInfo_args.request ,50000);

                return result.thenApply(( com.isuwang.dapeng.json.demo.domain.GetPackageInfoResponse i) -> {
                  getPackageInfo_result res = new getPackageInfo_result();
                  res.setSuccess(i);
                  return res;
              });
              }

            }
          
            public static class buyPackage_args {
            
                private com.isuwang.dapeng.json.demo.domain.BuyPackageRequest request;
                public com.isuwang.dapeng.json.demo.domain.BuyPackageRequest getRequest(){
                return this.request;
              }
                public void setRequest(com.isuwang.dapeng.json.demo.domain.BuyPackageRequest request){
                this.request = request;
              }
              

            @Override
            public String toString(){
              StringBuilder stringBuilder = new StringBuilder("{");
                
      stringBuilder.append("\"").append("request").append("\":").append(this.request == null ? "null" : this.request.toString()).append(",");
    
                if(stringBuilder.lastIndexOf(",") > 0)
                stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                stringBuilder.append("}");

              return stringBuilder.toString();
            }

          }

            public static class buyPackage_result {

            
                  private com.isuwang.dapeng.json.demo.domain.OrderItem success;
                  public com.isuwang.dapeng.json.demo.domain.OrderItem getSuccess(){
                  return success;
                }

                  public void setSuccess(com.isuwang.dapeng.json.demo.domain.OrderItem success){
                  this.success = success;
                }


                  @Override
                  public String toString(){
                  StringBuilder stringBuilder = new StringBuilder("{");
                    
      stringBuilder.append("\"").append("success").append("\":").append(this.success == null ? "null" : this.success.toString()).append(",");
    
                    stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                    stringBuilder.append("}");

                  return stringBuilder.toString();
                }

                
          }

            public static class BuyPackage_argsSerializer implements BeanSerializer<buyPackage_args>{
            
      @Override
      public buyPackage_args read(TProtocol iprot) throws TException{

      buyPackage_args bean = new buyPackage_args();
      com.isuwang.org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();

      while(true){
        schemeField = iprot.readFieldBegin();
        if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

        switch(schemeField.id){
          
              case 1:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRUCT){
              com.isuwang.dapeng.json.demo.domain.BuyPackageRequest elem0 = new com.isuwang.dapeng.json.demo.domain.BuyPackageRequest();
        elem0=new com.isuwang.dapeng.json.demo.domain.serializer.BuyPackageRequestSerializer().read(iprot);
       bean.setRequest(elem0);
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
          
            default:
            com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate(bean);
      return bean;
    }
    
      @Override
      public void write(buyPackage_args bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("buyPackage_args"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("request", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, (short) 1));
            com.isuwang.dapeng.json.demo.domain.BuyPackageRequest elem0 = bean.getRequest();
             new com.isuwang.dapeng.json.demo.domain.serializer.BuyPackageRequestSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(buyPackage_args bean) throws TException{
      
              if(bean.getRequest() == null)
              throw new SoaException(SoaBaseCode.NotNull, "request字段不允许为空");
            
                if(bean.getRequest() != null)
                new com.isuwang.dapeng.json.demo.domain.serializer.BuyPackageRequestSerializer().validate(bean.getRequest());
              
    }
    

            @Override
            public String toString(buyPackage_args bean) { return bean == null ? "null" : bean.toString(); }

          }

            public static class BuyPackage_resultSerializer implements BeanSerializer<buyPackage_result>{
            @Override
            public buyPackage_result read(TProtocol iprot) throws TException{

              buyPackage_result bean = new buyPackage_result();
              com.isuwang.org.apache.thrift.protocol.TField schemeField;
              iprot.readStructBegin();

              while(true){
                schemeField = iprot.readFieldBegin();
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

                switch(schemeField.id){
                  case 0:  //SUCCESS
                  if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRUCT){
                    com.isuwang.dapeng.json.demo.domain.OrderItem elem0 = new com.isuwang.dapeng.json.demo.domain.OrderItem();
        elem0=new com.isuwang.dapeng.json.demo.domain.serializer.OrderItemSerializer().read(iprot);
       bean.setSuccess(elem0);
                  }else{
                    com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }
                  break;
                  /*
                  case 1: //ERROR
                  bean.setSoaException(new SoaException());
                  new SoaExceptionSerializer().read(bean.getSoaException(),iprot);
                  break A;
                  */
                  default:
                  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
              }
              iprot.readStructEnd();

              validate(bean);
              return bean;
            }
            
      @Override
      public void write(buyPackage_result bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("buyPackage_result"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("success", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, (short) 0));
            com.isuwang.dapeng.json.demo.domain.OrderItem elem0 = bean.getSuccess();
             new com.isuwang.dapeng.json.demo.domain.serializer.OrderItemSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
            
      public void validate(buyPackage_result bean) throws TException{
      
              if(bean.getSuccess() == null)
              throw new SoaException(SoaBaseCode.NotNull, "success字段不允许为空");
            
                if(bean.getSuccess() != null)
                new com.isuwang.dapeng.json.demo.domain.serializer.OrderItemSerializer().validate(bean.getSuccess());
              
    }
    

            @Override
            public String toString(buyPackage_result bean) { return bean == null ? "null" : bean.toString(); }
          }

            public static class buyPackage<I extends com.isuwang.dapeng.json.demo.service.OrderServiceAsync> extends SoaFunctionDefinition.Async<I, buyPackage_args, buyPackage_result>
            {
              public buyPackage()
              {
                super("buyPackage", new BuyPackage_argsSerializer(),  new BuyPackage_resultSerializer());
              }

              @Override
              public CompletableFuture<buyPackage_result> apply(OrderServiceAsync iface, buyPackage_args buyPackage_args) throws SoaException
              {

                CompletableFuture<com.isuwang.dapeng.json.demo.domain.OrderItem> result = (CompletableFuture<com.isuwang.dapeng.json.demo.domain.OrderItem>) iface.buyPackage(buyPackage_args.request ,50000);

                return result.thenApply(( com.isuwang.dapeng.json.demo.domain.OrderItem i) -> {
                  buyPackage_result res = new buyPackage_result();
                  res.setSuccess(i);
                  return res;
              });
              }

            }
          
            public static class listTextPackOrderForDoctor_args {
            
                private com.isuwang.dapeng.json.demo.domain.ListTextPackOrderForDoctorRequest request;
                public com.isuwang.dapeng.json.demo.domain.ListTextPackOrderForDoctorRequest getRequest(){
                return this.request;
              }
                public void setRequest(com.isuwang.dapeng.json.demo.domain.ListTextPackOrderForDoctorRequest request){
                this.request = request;
              }
              

            @Override
            public String toString(){
              StringBuilder stringBuilder = new StringBuilder("{");
                
      stringBuilder.append("\"").append("request").append("\":").append(this.request == null ? "null" : this.request.toString()).append(",");
    
                if(stringBuilder.lastIndexOf(",") > 0)
                stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                stringBuilder.append("}");

              return stringBuilder.toString();
            }

          }

            public static class listTextPackOrderForDoctor_result {

            
                  private com.isuwang.dapeng.json.demo.domain.ListTextPackOrderForDoctorResponse success;
                  public com.isuwang.dapeng.json.demo.domain.ListTextPackOrderForDoctorResponse getSuccess(){
                  return success;
                }

                  public void setSuccess(com.isuwang.dapeng.json.demo.domain.ListTextPackOrderForDoctorResponse success){
                  this.success = success;
                }


                  @Override
                  public String toString(){
                  StringBuilder stringBuilder = new StringBuilder("{");
                    
      stringBuilder.append("\"").append("success").append("\":").append(this.success == null ? "null" : this.success.toString()).append(",");
    
                    stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                    stringBuilder.append("}");

                  return stringBuilder.toString();
                }

                
          }

            public static class ListTextPackOrderForDoctor_argsSerializer implements BeanSerializer<listTextPackOrderForDoctor_args>{
            
      @Override
      public listTextPackOrderForDoctor_args read(TProtocol iprot) throws TException{

      listTextPackOrderForDoctor_args bean = new listTextPackOrderForDoctor_args();
      com.isuwang.org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();

      while(true){
        schemeField = iprot.readFieldBegin();
        if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

        switch(schemeField.id){
          
              case 1:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRUCT){
              com.isuwang.dapeng.json.demo.domain.ListTextPackOrderForDoctorRequest elem0 = new com.isuwang.dapeng.json.demo.domain.ListTextPackOrderForDoctorRequest();
        elem0=new com.isuwang.dapeng.json.demo.domain.serializer.ListTextPackOrderForDoctorRequestSerializer().read(iprot);
       bean.setRequest(elem0);
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
          
            default:
            com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate(bean);
      return bean;
    }
    
      @Override
      public void write(listTextPackOrderForDoctor_args bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("listTextPackOrderForDoctor_args"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("request", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, (short) 1));
            com.isuwang.dapeng.json.demo.domain.ListTextPackOrderForDoctorRequest elem0 = bean.getRequest();
             new com.isuwang.dapeng.json.demo.domain.serializer.ListTextPackOrderForDoctorRequestSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(listTextPackOrderForDoctor_args bean) throws TException{
      
              if(bean.getRequest() == null)
              throw new SoaException(SoaBaseCode.NotNull, "request字段不允许为空");
            
                if(bean.getRequest() != null)
                new com.isuwang.dapeng.json.demo.domain.serializer.ListTextPackOrderForDoctorRequestSerializer().validate(bean.getRequest());
              
    }
    

            @Override
            public String toString(listTextPackOrderForDoctor_args bean) { return bean == null ? "null" : bean.toString(); }

          }

            public static class ListTextPackOrderForDoctor_resultSerializer implements BeanSerializer<listTextPackOrderForDoctor_result>{
            @Override
            public listTextPackOrderForDoctor_result read(TProtocol iprot) throws TException{

              listTextPackOrderForDoctor_result bean = new listTextPackOrderForDoctor_result();
              com.isuwang.org.apache.thrift.protocol.TField schemeField;
              iprot.readStructBegin();

              while(true){
                schemeField = iprot.readFieldBegin();
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

                switch(schemeField.id){
                  case 0:  //SUCCESS
                  if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRUCT){
                    com.isuwang.dapeng.json.demo.domain.ListTextPackOrderForDoctorResponse elem0 = new com.isuwang.dapeng.json.demo.domain.ListTextPackOrderForDoctorResponse();
        elem0=new com.isuwang.dapeng.json.demo.domain.serializer.ListTextPackOrderForDoctorResponseSerializer().read(iprot);
       bean.setSuccess(elem0);
                  }else{
                    com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }
                  break;
                  /*
                  case 1: //ERROR
                  bean.setSoaException(new SoaException());
                  new SoaExceptionSerializer().read(bean.getSoaException(),iprot);
                  break A;
                  */
                  default:
                  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
              }
              iprot.readStructEnd();

              validate(bean);
              return bean;
            }
            
      @Override
      public void write(listTextPackOrderForDoctor_result bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("listTextPackOrderForDoctor_result"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("success", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, (short) 0));
            com.isuwang.dapeng.json.demo.domain.ListTextPackOrderForDoctorResponse elem0 = bean.getSuccess();
             new com.isuwang.dapeng.json.demo.domain.serializer.ListTextPackOrderForDoctorResponseSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
            
      public void validate(listTextPackOrderForDoctor_result bean) throws TException{
      
              if(bean.getSuccess() == null)
              throw new SoaException(SoaBaseCode.NotNull, "success字段不允许为空");
            
                if(bean.getSuccess() != null)
                new com.isuwang.dapeng.json.demo.domain.serializer.ListTextPackOrderForDoctorResponseSerializer().validate(bean.getSuccess());
              
    }
    

            @Override
            public String toString(listTextPackOrderForDoctor_result bean) { return bean == null ? "null" : bean.toString(); }
          }

            public static class listTextPackOrderForDoctor<I extends com.isuwang.dapeng.json.demo.service.OrderServiceAsync> extends SoaFunctionDefinition.Async<I, listTextPackOrderForDoctor_args, listTextPackOrderForDoctor_result>
            {
              public listTextPackOrderForDoctor()
              {
                super("listTextPackOrderForDoctor", new ListTextPackOrderForDoctor_argsSerializer(),  new ListTextPackOrderForDoctor_resultSerializer());
              }

              @Override
              public CompletableFuture<listTextPackOrderForDoctor_result> apply(OrderServiceAsync iface, listTextPackOrderForDoctor_args listTextPackOrderForDoctor_args) throws SoaException
              {

                CompletableFuture<com.isuwang.dapeng.json.demo.domain.ListTextPackOrderForDoctorResponse> result = (CompletableFuture<com.isuwang.dapeng.json.demo.domain.ListTextPackOrderForDoctorResponse>) iface.listTextPackOrderForDoctor(listTextPackOrderForDoctor_args.request ,50000);

                return result.thenApply(( com.isuwang.dapeng.json.demo.domain.ListTextPackOrderForDoctorResponse i) -> {
                  listTextPackOrderForDoctor_result res = new listTextPackOrderForDoctor_result();
                  res.setSuccess(i);
                  return res;
              });
              }

            }
          
            public static class countBuyTextPackPatients_args {
            
                private Integer doctorId;
                public Integer getDoctorId(){
                return this.doctorId;
              }
                public void setDoctorId(Integer doctorId){
                this.doctorId = doctorId;
              }
              

            @Override
            public String toString(){
              StringBuilder stringBuilder = new StringBuilder("{");
                
      stringBuilder.append("\"").append("doctorId").append("\":").append(doctorId).append(",");
    
                if(stringBuilder.lastIndexOf(",") > 0)
                stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                stringBuilder.append("}");

              return stringBuilder.toString();
            }

          }

            public static class countBuyTextPackPatients_result {

            
                  private com.isuwang.dapeng.json.demo.domain.CountBuyTextPackPatientsResponse success;
                  public com.isuwang.dapeng.json.demo.domain.CountBuyTextPackPatientsResponse getSuccess(){
                  return success;
                }

                  public void setSuccess(com.isuwang.dapeng.json.demo.domain.CountBuyTextPackPatientsResponse success){
                  this.success = success;
                }


                  @Override
                  public String toString(){
                  StringBuilder stringBuilder = new StringBuilder("{");
                    
      stringBuilder.append("\"").append("success").append("\":").append(this.success == null ? "null" : this.success.toString()).append(",");
    
                    stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                    stringBuilder.append("}");

                  return stringBuilder.toString();
                }

                
          }

            public static class CountBuyTextPackPatients_argsSerializer implements BeanSerializer<countBuyTextPackPatients_args>{
            
      @Override
      public countBuyTextPackPatients_args read(TProtocol iprot) throws TException{

      countBuyTextPackPatients_args bean = new countBuyTextPackPatients_args();
      com.isuwang.org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();

      while(true){
        schemeField = iprot.readFieldBegin();
        if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

        switch(schemeField.id){
          
              case 1:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.I32){
               int elem0 = iprot.readI32();
       bean.setDoctorId(elem0);
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
          
            default:
            com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate(bean);
      return bean;
    }
    
      @Override
      public void write(countBuyTextPackPatients_args bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("countBuyTextPackPatients_args"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("doctorId", com.isuwang.org.apache.thrift.protocol.TType.I32, (short) 1));
            Integer elem0 = bean.getDoctorId();
            oprot.writeI32(elem0);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(countBuyTextPackPatients_args bean) throws TException{
      
    }
    

            @Override
            public String toString(countBuyTextPackPatients_args bean) { return bean == null ? "null" : bean.toString(); }

          }

            public static class CountBuyTextPackPatients_resultSerializer implements BeanSerializer<countBuyTextPackPatients_result>{
            @Override
            public countBuyTextPackPatients_result read(TProtocol iprot) throws TException{

              countBuyTextPackPatients_result bean = new countBuyTextPackPatients_result();
              com.isuwang.org.apache.thrift.protocol.TField schemeField;
              iprot.readStructBegin();

              while(true){
                schemeField = iprot.readFieldBegin();
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

                switch(schemeField.id){
                  case 0:  //SUCCESS
                  if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRUCT){
                    com.isuwang.dapeng.json.demo.domain.CountBuyTextPackPatientsResponse elem0 = new com.isuwang.dapeng.json.demo.domain.CountBuyTextPackPatientsResponse();
        elem0=new com.isuwang.dapeng.json.demo.domain.serializer.CountBuyTextPackPatientsResponseSerializer().read(iprot);
       bean.setSuccess(elem0);
                  }else{
                    com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }
                  break;
                  /*
                  case 1: //ERROR
                  bean.setSoaException(new SoaException());
                  new SoaExceptionSerializer().read(bean.getSoaException(),iprot);
                  break A;
                  */
                  default:
                  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
              }
              iprot.readStructEnd();

              validate(bean);
              return bean;
            }
            
      @Override
      public void write(countBuyTextPackPatients_result bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("countBuyTextPackPatients_result"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("success", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, (short) 0));
            com.isuwang.dapeng.json.demo.domain.CountBuyTextPackPatientsResponse elem0 = bean.getSuccess();
             new com.isuwang.dapeng.json.demo.domain.serializer.CountBuyTextPackPatientsResponseSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
            
      public void validate(countBuyTextPackPatients_result bean) throws TException{
      
              if(bean.getSuccess() == null)
              throw new SoaException(SoaBaseCode.NotNull, "success字段不允许为空");
            
                if(bean.getSuccess() != null)
                new com.isuwang.dapeng.json.demo.domain.serializer.CountBuyTextPackPatientsResponseSerializer().validate(bean.getSuccess());
              
    }
    

            @Override
            public String toString(countBuyTextPackPatients_result bean) { return bean == null ? "null" : bean.toString(); }
          }

            public static class countBuyTextPackPatients<I extends com.isuwang.dapeng.json.demo.service.OrderServiceAsync> extends SoaFunctionDefinition.Async<I, countBuyTextPackPatients_args, countBuyTextPackPatients_result>
            {
              public countBuyTextPackPatients()
              {
                super("countBuyTextPackPatients", new CountBuyTextPackPatients_argsSerializer(),  new CountBuyTextPackPatients_resultSerializer());
              }

              @Override
              public CompletableFuture<countBuyTextPackPatients_result> apply(OrderServiceAsync iface, countBuyTextPackPatients_args countBuyTextPackPatients_args) throws SoaException
              {

                CompletableFuture<com.isuwang.dapeng.json.demo.domain.CountBuyTextPackPatientsResponse> result = (CompletableFuture<com.isuwang.dapeng.json.demo.domain.CountBuyTextPackPatientsResponse>) iface.countBuyTextPackPatients(countBuyTextPackPatients_args.doctorId ,50000);

                return result.thenApply(( com.isuwang.dapeng.json.demo.domain.CountBuyTextPackPatientsResponse i) -> {
                  countBuyTextPackPatients_result res = new countBuyTextPackPatients_result();
                  res.setSuccess(i);
                  return res;
              });
              }

            }
          
            public static class judgeChatAble_args {
            
                private com.isuwang.dapeng.json.demo.domain.JudgeChatAbleRequest request;
                public com.isuwang.dapeng.json.demo.domain.JudgeChatAbleRequest getRequest(){
                return this.request;
              }
                public void setRequest(com.isuwang.dapeng.json.demo.domain.JudgeChatAbleRequest request){
                this.request = request;
              }
              

            @Override
            public String toString(){
              StringBuilder stringBuilder = new StringBuilder("{");
                
      stringBuilder.append("\"").append("request").append("\":").append(this.request == null ? "null" : this.request.toString()).append(",");
    
                if(stringBuilder.lastIndexOf(",") > 0)
                stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                stringBuilder.append("}");

              return stringBuilder.toString();
            }

          }

            public static class judgeChatAble_result {

            
                  private com.isuwang.dapeng.json.demo.domain.JudgeChatAbleResponse success;
                  public com.isuwang.dapeng.json.demo.domain.JudgeChatAbleResponse getSuccess(){
                  return success;
                }

                  public void setSuccess(com.isuwang.dapeng.json.demo.domain.JudgeChatAbleResponse success){
                  this.success = success;
                }


                  @Override
                  public String toString(){
                  StringBuilder stringBuilder = new StringBuilder("{");
                    
      stringBuilder.append("\"").append("success").append("\":").append(this.success == null ? "null" : this.success.toString()).append(",");
    
                    stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                    stringBuilder.append("}");

                  return stringBuilder.toString();
                }

                
          }

            public static class JudgeChatAble_argsSerializer implements BeanSerializer<judgeChatAble_args>{
            
      @Override
      public judgeChatAble_args read(TProtocol iprot) throws TException{

      judgeChatAble_args bean = new judgeChatAble_args();
      com.isuwang.org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();

      while(true){
        schemeField = iprot.readFieldBegin();
        if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

        switch(schemeField.id){
          
              case 1:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRUCT){
              com.isuwang.dapeng.json.demo.domain.JudgeChatAbleRequest elem0 = new com.isuwang.dapeng.json.demo.domain.JudgeChatAbleRequest();
        elem0=new com.isuwang.dapeng.json.demo.domain.serializer.JudgeChatAbleRequestSerializer().read(iprot);
       bean.setRequest(elem0);
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
          
            default:
            com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate(bean);
      return bean;
    }
    
      @Override
      public void write(judgeChatAble_args bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("judgeChatAble_args"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("request", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, (short) 1));
            com.isuwang.dapeng.json.demo.domain.JudgeChatAbleRequest elem0 = bean.getRequest();
             new com.isuwang.dapeng.json.demo.domain.serializer.JudgeChatAbleRequestSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(judgeChatAble_args bean) throws TException{
      
              if(bean.getRequest() == null)
              throw new SoaException(SoaBaseCode.NotNull, "request字段不允许为空");
            
                if(bean.getRequest() != null)
                new com.isuwang.dapeng.json.demo.domain.serializer.JudgeChatAbleRequestSerializer().validate(bean.getRequest());
              
    }
    

            @Override
            public String toString(judgeChatAble_args bean) { return bean == null ? "null" : bean.toString(); }

          }

            public static class JudgeChatAble_resultSerializer implements BeanSerializer<judgeChatAble_result>{
            @Override
            public judgeChatAble_result read(TProtocol iprot) throws TException{

              judgeChatAble_result bean = new judgeChatAble_result();
              com.isuwang.org.apache.thrift.protocol.TField schemeField;
              iprot.readStructBegin();

              while(true){
                schemeField = iprot.readFieldBegin();
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

                switch(schemeField.id){
                  case 0:  //SUCCESS
                  if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRUCT){
                    com.isuwang.dapeng.json.demo.domain.JudgeChatAbleResponse elem0 = new com.isuwang.dapeng.json.demo.domain.JudgeChatAbleResponse();
        elem0=new com.isuwang.dapeng.json.demo.domain.serializer.JudgeChatAbleResponseSerializer().read(iprot);
       bean.setSuccess(elem0);
                  }else{
                    com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }
                  break;
                  /*
                  case 1: //ERROR
                  bean.setSoaException(new SoaException());
                  new SoaExceptionSerializer().read(bean.getSoaException(),iprot);
                  break A;
                  */
                  default:
                  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
              }
              iprot.readStructEnd();

              validate(bean);
              return bean;
            }
            
      @Override
      public void write(judgeChatAble_result bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("judgeChatAble_result"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("success", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, (short) 0));
            com.isuwang.dapeng.json.demo.domain.JudgeChatAbleResponse elem0 = bean.getSuccess();
             new com.isuwang.dapeng.json.demo.domain.serializer.JudgeChatAbleResponseSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
            
      public void validate(judgeChatAble_result bean) throws TException{
      
              if(bean.getSuccess() == null)
              throw new SoaException(SoaBaseCode.NotNull, "success字段不允许为空");
            
                if(bean.getSuccess() != null)
                new com.isuwang.dapeng.json.demo.domain.serializer.JudgeChatAbleResponseSerializer().validate(bean.getSuccess());
              
    }
    

            @Override
            public String toString(judgeChatAble_result bean) { return bean == null ? "null" : bean.toString(); }
          }

            public static class judgeChatAble<I extends com.isuwang.dapeng.json.demo.service.OrderServiceAsync> extends SoaFunctionDefinition.Async<I, judgeChatAble_args, judgeChatAble_result>
            {
              public judgeChatAble()
              {
                super("judgeChatAble", new JudgeChatAble_argsSerializer(),  new JudgeChatAble_resultSerializer());
              }

              @Override
              public CompletableFuture<judgeChatAble_result> apply(OrderServiceAsync iface, judgeChatAble_args judgeChatAble_args) throws SoaException
              {

                CompletableFuture<com.isuwang.dapeng.json.demo.domain.JudgeChatAbleResponse> result = (CompletableFuture<com.isuwang.dapeng.json.demo.domain.JudgeChatAbleResponse>) iface.judgeChatAble(judgeChatAble_args.request ,50000);

                return result.thenApply(( com.isuwang.dapeng.json.demo.domain.JudgeChatAbleResponse i) -> {
                  judgeChatAble_result res = new judgeChatAble_result();
                  res.setSuccess(i);
                  return res;
              });
              }

            }
          
            public static class giveCoupon_args {
            
                private com.isuwang.dapeng.json.demo.domain.GiveCouponRequest request;
                public com.isuwang.dapeng.json.demo.domain.GiveCouponRequest getRequest(){
                return this.request;
              }
                public void setRequest(com.isuwang.dapeng.json.demo.domain.GiveCouponRequest request){
                this.request = request;
              }
              

            @Override
            public String toString(){
              StringBuilder stringBuilder = new StringBuilder("{");
                
      stringBuilder.append("\"").append("request").append("\":").append(this.request == null ? "null" : this.request.toString()).append(",");
    
                if(stringBuilder.lastIndexOf(",") > 0)
                stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                stringBuilder.append("}");

              return stringBuilder.toString();
            }

          }

            public static class giveCoupon_result {

            
                  @Override
                  public String toString(){
                  return "{}";
                }
                
          }

            public static class GiveCoupon_argsSerializer implements BeanSerializer<giveCoupon_args>{
            
      @Override
      public giveCoupon_args read(TProtocol iprot) throws TException{

      giveCoupon_args bean = new giveCoupon_args();
      com.isuwang.org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();

      while(true){
        schemeField = iprot.readFieldBegin();
        if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

        switch(schemeField.id){
          
              case 1:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRUCT){
              com.isuwang.dapeng.json.demo.domain.GiveCouponRequest elem0 = new com.isuwang.dapeng.json.demo.domain.GiveCouponRequest();
        elem0=new com.isuwang.dapeng.json.demo.domain.serializer.GiveCouponRequestSerializer().read(iprot);
       bean.setRequest(elem0);
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
          
            default:
            com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate(bean);
      return bean;
    }
    
      @Override
      public void write(giveCoupon_args bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("giveCoupon_args"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("request", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, (short) 1));
            com.isuwang.dapeng.json.demo.domain.GiveCouponRequest elem0 = bean.getRequest();
             new com.isuwang.dapeng.json.demo.domain.serializer.GiveCouponRequestSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(giveCoupon_args bean) throws TException{
      
              if(bean.getRequest() == null)
              throw new SoaException(SoaBaseCode.NotNull, "request字段不允许为空");
            
                if(bean.getRequest() != null)
                new com.isuwang.dapeng.json.demo.domain.serializer.GiveCouponRequestSerializer().validate(bean.getRequest());
              
    }
    

            @Override
            public String toString(giveCoupon_args bean) { return bean == null ? "null" : bean.toString(); }

          }

            public static class GiveCoupon_resultSerializer implements BeanSerializer<giveCoupon_result>{
            @Override
            public giveCoupon_result read(TProtocol iprot) throws TException{

              giveCoupon_result bean = new giveCoupon_result();
              com.isuwang.org.apache.thrift.protocol.TField schemeField;
              iprot.readStructBegin();

              while(true){
                schemeField = iprot.readFieldBegin();
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

                switch(schemeField.id){
                  case 0:  //SUCCESS
                  if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.VOID){
                    
      com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }else{
                    com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }
                  break;
                  /*
                  case 1: //ERROR
                  bean.setSoaException(new SoaException());
                  new SoaExceptionSerializer().read(bean.getSoaException(),iprot);
                  break A;
                  */
                  default:
                  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
              }
              iprot.readStructEnd();

              validate(bean);
              return bean;
            }
            
      @Override
      public void write(giveCoupon_result bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("giveCoupon_result"));

      
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
            
      public void validate(giveCoupon_result bean) throws TException{
      
    }
    

            @Override
            public String toString(giveCoupon_result bean) { return bean == null ? "null" : bean.toString(); }
          }

            public static class giveCoupon<I extends com.isuwang.dapeng.json.demo.service.OrderServiceAsync> extends SoaFunctionDefinition.Async<I, giveCoupon_args, giveCoupon_result>
            {
              public giveCoupon()
              {
                super("giveCoupon", new GiveCoupon_argsSerializer(),  new GiveCoupon_resultSerializer());
              }

              @Override
              public CompletableFuture<giveCoupon_result> apply(OrderServiceAsync iface, giveCoupon_args giveCoupon_args) throws SoaException
              {

                CompletableFuture<Void> result = (CompletableFuture<Void>) iface.giveCoupon(giveCoupon_args.request ,50000);

                return result.thenApply((Void) -> {
                  giveCoupon_result res = new giveCoupon_result();
                  
                  return res;
              });
              }

            }
          
            public static class batchGiveCoupon_args {
            
                private java.util.List<com.isuwang.dapeng.json.demo.domain.GiveCouponRequest> request;
                public java.util.List<com.isuwang.dapeng.json.demo.domain.GiveCouponRequest> getRequest(){
                return this.request;
              }
                public void setRequest(java.util.List<com.isuwang.dapeng.json.demo.domain.GiveCouponRequest> request){
                this.request = request;
              }
              

            @Override
            public String toString(){
              StringBuilder stringBuilder = new StringBuilder("{");
                
      stringBuilder.append("\"").append("request").append("\":").append(request).append(",");
    
                if(stringBuilder.lastIndexOf(",") > 0)
                stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                stringBuilder.append("}");

              return stringBuilder.toString();
            }

          }

            public static class batchGiveCoupon_result {

            
                  @Override
                  public String toString(){
                  return "{}";
                }
                
          }

            public static class BatchGiveCoupon_argsSerializer implements BeanSerializer<batchGiveCoupon_args>{
            
      @Override
      public batchGiveCoupon_args read(TProtocol iprot) throws TException{

      batchGiveCoupon_args bean = new batchGiveCoupon_args();
      com.isuwang.org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();

      while(true){
        schemeField = iprot.readFieldBegin();
        if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

        switch(schemeField.id){
          
              case 1:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.LIST){
               com.isuwang.org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
        java.util.List<com.isuwang.dapeng.json.demo.domain.GiveCouponRequest> elem0 = new java.util.ArrayList<>(_list0.size);
        for(int _i0 = 0; _i0 < _list0.size; ++ _i0){
          com.isuwang.dapeng.json.demo.domain.GiveCouponRequest elem1 = new com.isuwang.dapeng.json.demo.domain.GiveCouponRequest();
        elem1=new com.isuwang.dapeng.json.demo.domain.serializer.GiveCouponRequestSerializer().read(iprot);
          elem0.add(elem1);
        }
        iprot.readListEnd();
       bean.setRequest(elem0);
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
          
            default:
            com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate(bean);
      return bean;
    }
    
      @Override
      public void write(batchGiveCoupon_args bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("batchGiveCoupon_args"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("request", com.isuwang.org.apache.thrift.protocol.TType.LIST, (short) 1));
            java.util.List<com.isuwang.dapeng.json.demo.domain.GiveCouponRequest> elem0 = bean.getRequest();
            
          oprot.writeListBegin(new com.isuwang.org.apache.thrift.protocol.TList(com.isuwang.org.apache.thrift.protocol.TType.STRUCT, elem0.size()));
          for(com.isuwang.dapeng.json.demo.domain.GiveCouponRequest elem1 : elem0){
           new com.isuwang.dapeng.json.demo.domain.serializer.GiveCouponRequestSerializer().write(elem1, oprot);
        }
          oprot.writeListEnd();
        
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(batchGiveCoupon_args bean) throws TException{
      
              if(bean.getRequest() == null)
              throw new SoaException(SoaBaseCode.NotNull, "request字段不允许为空");
            
    }
    

            @Override
            public String toString(batchGiveCoupon_args bean) { return bean == null ? "null" : bean.toString(); }

          }

            public static class BatchGiveCoupon_resultSerializer implements BeanSerializer<batchGiveCoupon_result>{
            @Override
            public batchGiveCoupon_result read(TProtocol iprot) throws TException{

              batchGiveCoupon_result bean = new batchGiveCoupon_result();
              com.isuwang.org.apache.thrift.protocol.TField schemeField;
              iprot.readStructBegin();

              while(true){
                schemeField = iprot.readFieldBegin();
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

                switch(schemeField.id){
                  case 0:  //SUCCESS
                  if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.VOID){
                    
      com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }else{
                    com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }
                  break;
                  /*
                  case 1: //ERROR
                  bean.setSoaException(new SoaException());
                  new SoaExceptionSerializer().read(bean.getSoaException(),iprot);
                  break A;
                  */
                  default:
                  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
              }
              iprot.readStructEnd();

              validate(bean);
              return bean;
            }
            
      @Override
      public void write(batchGiveCoupon_result bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("batchGiveCoupon_result"));

      
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
            
      public void validate(batchGiveCoupon_result bean) throws TException{
      
    }
    

            @Override
            public String toString(batchGiveCoupon_result bean) { return bean == null ? "null" : bean.toString(); }
          }

            public static class batchGiveCoupon<I extends com.isuwang.dapeng.json.demo.service.OrderServiceAsync> extends SoaFunctionDefinition.Async<I, batchGiveCoupon_args, batchGiveCoupon_result>
            {
              public batchGiveCoupon()
              {
                super("batchGiveCoupon", new BatchGiveCoupon_argsSerializer(),  new BatchGiveCoupon_resultSerializer());
              }

              @Override
              public CompletableFuture<batchGiveCoupon_result> apply(OrderServiceAsync iface, batchGiveCoupon_args batchGiveCoupon_args) throws SoaException
              {

                CompletableFuture<Void> result = (CompletableFuture<Void>) iface.batchGiveCoupon(batchGiveCoupon_args.request ,50000);

                return result.thenApply((Void) -> {
                  batchGiveCoupon_result res = new batchGiveCoupon_result();
                  
                  return res;
              });
              }

            }
          
            public static class listAvaliableCoupons_args {
            
                private com.isuwang.dapeng.json.demo.domain.ListAvaliableCouponsRequest request;
                public com.isuwang.dapeng.json.demo.domain.ListAvaliableCouponsRequest getRequest(){
                return this.request;
              }
                public void setRequest(com.isuwang.dapeng.json.demo.domain.ListAvaliableCouponsRequest request){
                this.request = request;
              }
              

            @Override
            public String toString(){
              StringBuilder stringBuilder = new StringBuilder("{");
                
      stringBuilder.append("\"").append("request").append("\":").append(this.request == null ? "null" : this.request.toString()).append(",");
    
                if(stringBuilder.lastIndexOf(",") > 0)
                stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                stringBuilder.append("}");

              return stringBuilder.toString();
            }

          }

            public static class listAvaliableCoupons_result {

            
                  private java.util.List<com.isuwang.dapeng.json.demo.domain.TCouponDTO> success;
                  public java.util.List<com.isuwang.dapeng.json.demo.domain.TCouponDTO> getSuccess(){
                  return success;
                }

                  public void setSuccess(java.util.List<com.isuwang.dapeng.json.demo.domain.TCouponDTO> success){
                  this.success = success;
                }


                  @Override
                  public String toString(){
                  StringBuilder stringBuilder = new StringBuilder("{");
                    
      stringBuilder.append("\"").append("success").append("\":").append(success).append(",");
    
                    stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                    stringBuilder.append("}");

                  return stringBuilder.toString();
                }

                
          }

            public static class ListAvaliableCoupons_argsSerializer implements BeanSerializer<listAvaliableCoupons_args>{
            
      @Override
      public listAvaliableCoupons_args read(TProtocol iprot) throws TException{

      listAvaliableCoupons_args bean = new listAvaliableCoupons_args();
      com.isuwang.org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();

      while(true){
        schemeField = iprot.readFieldBegin();
        if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

        switch(schemeField.id){
          
              case 1:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRUCT){
              com.isuwang.dapeng.json.demo.domain.ListAvaliableCouponsRequest elem0 = new com.isuwang.dapeng.json.demo.domain.ListAvaliableCouponsRequest();
        elem0=new com.isuwang.dapeng.json.demo.domain.serializer.ListAvaliableCouponsRequestSerializer().read(iprot);
       bean.setRequest(elem0);
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
          
            default:
            com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate(bean);
      return bean;
    }
    
      @Override
      public void write(listAvaliableCoupons_args bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("listAvaliableCoupons_args"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("request", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, (short) 1));
            com.isuwang.dapeng.json.demo.domain.ListAvaliableCouponsRequest elem0 = bean.getRequest();
             new com.isuwang.dapeng.json.demo.domain.serializer.ListAvaliableCouponsRequestSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(listAvaliableCoupons_args bean) throws TException{
      
              if(bean.getRequest() == null)
              throw new SoaException(SoaBaseCode.NotNull, "request字段不允许为空");
            
                if(bean.getRequest() != null)
                new com.isuwang.dapeng.json.demo.domain.serializer.ListAvaliableCouponsRequestSerializer().validate(bean.getRequest());
              
    }
    

            @Override
            public String toString(listAvaliableCoupons_args bean) { return bean == null ? "null" : bean.toString(); }

          }

            public static class ListAvaliableCoupons_resultSerializer implements BeanSerializer<listAvaliableCoupons_result>{
            @Override
            public listAvaliableCoupons_result read(TProtocol iprot) throws TException{

              listAvaliableCoupons_result bean = new listAvaliableCoupons_result();
              com.isuwang.org.apache.thrift.protocol.TField schemeField;
              iprot.readStructBegin();

              while(true){
                schemeField = iprot.readFieldBegin();
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

                switch(schemeField.id){
                  case 0:  //SUCCESS
                  if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.LIST){
                     com.isuwang.org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
        java.util.List<com.isuwang.dapeng.json.demo.domain.TCouponDTO> elem0 = new java.util.ArrayList<>(_list0.size);
        for(int _i0 = 0; _i0 < _list0.size; ++ _i0){
          com.isuwang.dapeng.json.demo.domain.TCouponDTO elem1 = new com.isuwang.dapeng.json.demo.domain.TCouponDTO();
        elem1=new com.isuwang.dapeng.json.demo.domain.serializer.TCouponDTOSerializer().read(iprot);
          elem0.add(elem1);
        }
        iprot.readListEnd();
       bean.setSuccess(elem0);
                  }else{
                    com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }
                  break;
                  /*
                  case 1: //ERROR
                  bean.setSoaException(new SoaException());
                  new SoaExceptionSerializer().read(bean.getSoaException(),iprot);
                  break A;
                  */
                  default:
                  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
              }
              iprot.readStructEnd();

              validate(bean);
              return bean;
            }
            
      @Override
      public void write(listAvaliableCoupons_result bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("listAvaliableCoupons_result"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("success", com.isuwang.org.apache.thrift.protocol.TType.LIST, (short) 0));
            java.util.List<com.isuwang.dapeng.json.demo.domain.TCouponDTO> elem0 = bean.getSuccess();
            
          oprot.writeListBegin(new com.isuwang.org.apache.thrift.protocol.TList(com.isuwang.org.apache.thrift.protocol.TType.STRUCT, elem0.size()));
          for(com.isuwang.dapeng.json.demo.domain.TCouponDTO elem1 : elem0){
           new com.isuwang.dapeng.json.demo.domain.serializer.TCouponDTOSerializer().write(elem1, oprot);
        }
          oprot.writeListEnd();
        
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
            
      public void validate(listAvaliableCoupons_result bean) throws TException{
      
              if(bean.getSuccess() == null)
              throw new SoaException(SoaBaseCode.NotNull, "success字段不允许为空");
            
    }
    

            @Override
            public String toString(listAvaliableCoupons_result bean) { return bean == null ? "null" : bean.toString(); }
          }

            public static class listAvaliableCoupons<I extends com.isuwang.dapeng.json.demo.service.OrderServiceAsync> extends SoaFunctionDefinition.Async<I, listAvaliableCoupons_args, listAvaliableCoupons_result>
            {
              public listAvaliableCoupons()
              {
                super("listAvaliableCoupons", new ListAvaliableCoupons_argsSerializer(),  new ListAvaliableCoupons_resultSerializer());
              }

              @Override
              public CompletableFuture<listAvaliableCoupons_result> apply(OrderServiceAsync iface, listAvaliableCoupons_args listAvaliableCoupons_args) throws SoaException
              {

                CompletableFuture<java.util.List<com.isuwang.dapeng.json.demo.domain.TCouponDTO>> result = (CompletableFuture<java.util.List<com.isuwang.dapeng.json.demo.domain.TCouponDTO>>) iface.listAvaliableCoupons(listAvaliableCoupons_args.request ,50000);

                return result.thenApply(( java.util.List<com.isuwang.dapeng.json.demo.domain.TCouponDTO> i) -> {
                  listAvaliableCoupons_result res = new listAvaliableCoupons_result();
                  res.setSuccess(i);
                  return res;
              });
              }

            }
          
            public static class findAccompanyOrderByPatientId_args {
            
                private Integer patientId;
                public Integer getPatientId(){
                return this.patientId;
              }
                public void setPatientId(Integer patientId){
                this.patientId = patientId;
              }
              

            @Override
            public String toString(){
              StringBuilder stringBuilder = new StringBuilder("{");
                
      stringBuilder.append("\"").append("patientId").append("\":").append(patientId).append(",");
    
                if(stringBuilder.lastIndexOf(",") > 0)
                stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                stringBuilder.append("}");

              return stringBuilder.toString();
            }

          }

            public static class findAccompanyOrderByPatientId_result {

            
                  private java.util.List<com.isuwang.dapeng.json.demo.domain.OrderItem> success;
                  public java.util.List<com.isuwang.dapeng.json.demo.domain.OrderItem> getSuccess(){
                  return success;
                }

                  public void setSuccess(java.util.List<com.isuwang.dapeng.json.demo.domain.OrderItem> success){
                  this.success = success;
                }


                  @Override
                  public String toString(){
                  StringBuilder stringBuilder = new StringBuilder("{");
                    
      stringBuilder.append("\"").append("success").append("\":").append(success).append(",");
    
                    stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                    stringBuilder.append("}");

                  return stringBuilder.toString();
                }

                
          }

            public static class FindAccompanyOrderByPatientId_argsSerializer implements BeanSerializer<findAccompanyOrderByPatientId_args>{
            
      @Override
      public findAccompanyOrderByPatientId_args read(TProtocol iprot) throws TException{

      findAccompanyOrderByPatientId_args bean = new findAccompanyOrderByPatientId_args();
      com.isuwang.org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();

      while(true){
        schemeField = iprot.readFieldBegin();
        if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

        switch(schemeField.id){
          
              case 1:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.I32){
               int elem0 = iprot.readI32();
       bean.setPatientId(elem0);
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
          
            default:
            com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate(bean);
      return bean;
    }
    
      @Override
      public void write(findAccompanyOrderByPatientId_args bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("findAccompanyOrderByPatientId_args"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("patientId", com.isuwang.org.apache.thrift.protocol.TType.I32, (short) 1));
            Integer elem0 = bean.getPatientId();
            oprot.writeI32(elem0);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(findAccompanyOrderByPatientId_args bean) throws TException{
      
    }
    

            @Override
            public String toString(findAccompanyOrderByPatientId_args bean) { return bean == null ? "null" : bean.toString(); }

          }

            public static class FindAccompanyOrderByPatientId_resultSerializer implements BeanSerializer<findAccompanyOrderByPatientId_result>{
            @Override
            public findAccompanyOrderByPatientId_result read(TProtocol iprot) throws TException{

              findAccompanyOrderByPatientId_result bean = new findAccompanyOrderByPatientId_result();
              com.isuwang.org.apache.thrift.protocol.TField schemeField;
              iprot.readStructBegin();

              while(true){
                schemeField = iprot.readFieldBegin();
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

                switch(schemeField.id){
                  case 0:  //SUCCESS
                  if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.LIST){
                     com.isuwang.org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
        java.util.List<com.isuwang.dapeng.json.demo.domain.OrderItem> elem0 = new java.util.ArrayList<>(_list0.size);
        for(int _i0 = 0; _i0 < _list0.size; ++ _i0){
          com.isuwang.dapeng.json.demo.domain.OrderItem elem1 = new com.isuwang.dapeng.json.demo.domain.OrderItem();
        elem1=new com.isuwang.dapeng.json.demo.domain.serializer.OrderItemSerializer().read(iprot);
          elem0.add(elem1);
        }
        iprot.readListEnd();
       bean.setSuccess(elem0);
                  }else{
                    com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }
                  break;
                  /*
                  case 1: //ERROR
                  bean.setSoaException(new SoaException());
                  new SoaExceptionSerializer().read(bean.getSoaException(),iprot);
                  break A;
                  */
                  default:
                  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
              }
              iprot.readStructEnd();

              validate(bean);
              return bean;
            }
            
      @Override
      public void write(findAccompanyOrderByPatientId_result bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("findAccompanyOrderByPatientId_result"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("success", com.isuwang.org.apache.thrift.protocol.TType.LIST, (short) 0));
            java.util.List<com.isuwang.dapeng.json.demo.domain.OrderItem> elem0 = bean.getSuccess();
            
          oprot.writeListBegin(new com.isuwang.org.apache.thrift.protocol.TList(com.isuwang.org.apache.thrift.protocol.TType.STRUCT, elem0.size()));
          for(com.isuwang.dapeng.json.demo.domain.OrderItem elem1 : elem0){
           new com.isuwang.dapeng.json.demo.domain.serializer.OrderItemSerializer().write(elem1, oprot);
        }
          oprot.writeListEnd();
        
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
            
      public void validate(findAccompanyOrderByPatientId_result bean) throws TException{
      
              if(bean.getSuccess() == null)
              throw new SoaException(SoaBaseCode.NotNull, "success字段不允许为空");
            
    }
    

            @Override
            public String toString(findAccompanyOrderByPatientId_result bean) { return bean == null ? "null" : bean.toString(); }
          }

            public static class findAccompanyOrderByPatientId<I extends com.isuwang.dapeng.json.demo.service.OrderServiceAsync> extends SoaFunctionDefinition.Async<I, findAccompanyOrderByPatientId_args, findAccompanyOrderByPatientId_result>
            {
              public findAccompanyOrderByPatientId()
              {
                super("findAccompanyOrderByPatientId", new FindAccompanyOrderByPatientId_argsSerializer(),  new FindAccompanyOrderByPatientId_resultSerializer());
              }

              @Override
              public CompletableFuture<findAccompanyOrderByPatientId_result> apply(OrderServiceAsync iface, findAccompanyOrderByPatientId_args findAccompanyOrderByPatientId_args) throws SoaException
              {

                CompletableFuture<java.util.List<com.isuwang.dapeng.json.demo.domain.OrderItem>> result = (CompletableFuture<java.util.List<com.isuwang.dapeng.json.demo.domain.OrderItem>>) iface.findAccompanyOrderByPatientId(findAccompanyOrderByPatientId_args.patientId ,50000);

                return result.thenApply(( java.util.List<com.isuwang.dapeng.json.demo.domain.OrderItem> i) -> {
                  findAccompanyOrderByPatientId_result res = new findAccompanyOrderByPatientId_result();
                  res.setSuccess(i);
                  return res;
              });
              }

            }
          
            public static class createAccompanyOrder_args {
            
                private com.isuwang.dapeng.json.demo.domain.CreateAccompanyOrderRequest request;
                public com.isuwang.dapeng.json.demo.domain.CreateAccompanyOrderRequest getRequest(){
                return this.request;
              }
                public void setRequest(com.isuwang.dapeng.json.demo.domain.CreateAccompanyOrderRequest request){
                this.request = request;
              }
              

            @Override
            public String toString(){
              StringBuilder stringBuilder = new StringBuilder("{");
                
      stringBuilder.append("\"").append("request").append("\":").append(this.request == null ? "null" : this.request.toString()).append(",");
    
                if(stringBuilder.lastIndexOf(",") > 0)
                stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                stringBuilder.append("}");

              return stringBuilder.toString();
            }

          }

            public static class createAccompanyOrder_result {

            
                  private com.isuwang.dapeng.json.demo.domain.OrderItem success;
                  public com.isuwang.dapeng.json.demo.domain.OrderItem getSuccess(){
                  return success;
                }

                  public void setSuccess(com.isuwang.dapeng.json.demo.domain.OrderItem success){
                  this.success = success;
                }


                  @Override
                  public String toString(){
                  StringBuilder stringBuilder = new StringBuilder("{");
                    
      stringBuilder.append("\"").append("success").append("\":").append(this.success == null ? "null" : this.success.toString()).append(",");
    
                    stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                    stringBuilder.append("}");

                  return stringBuilder.toString();
                }

                
          }

            public static class CreateAccompanyOrder_argsSerializer implements BeanSerializer<createAccompanyOrder_args>{
            
      @Override
      public createAccompanyOrder_args read(TProtocol iprot) throws TException{

      createAccompanyOrder_args bean = new createAccompanyOrder_args();
      com.isuwang.org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();

      while(true){
        schemeField = iprot.readFieldBegin();
        if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

        switch(schemeField.id){
          
              case 1:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRUCT){
              com.isuwang.dapeng.json.demo.domain.CreateAccompanyOrderRequest elem0 = new com.isuwang.dapeng.json.demo.domain.CreateAccompanyOrderRequest();
        elem0=new com.isuwang.dapeng.json.demo.domain.serializer.CreateAccompanyOrderRequestSerializer().read(iprot);
       bean.setRequest(elem0);
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
          
            default:
            com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate(bean);
      return bean;
    }
    
      @Override
      public void write(createAccompanyOrder_args bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("createAccompanyOrder_args"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("request", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, (short) 1));
            com.isuwang.dapeng.json.demo.domain.CreateAccompanyOrderRequest elem0 = bean.getRequest();
             new com.isuwang.dapeng.json.demo.domain.serializer.CreateAccompanyOrderRequestSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(createAccompanyOrder_args bean) throws TException{
      
              if(bean.getRequest() == null)
              throw new SoaException(SoaBaseCode.NotNull, "request字段不允许为空");
            
                if(bean.getRequest() != null)
                new com.isuwang.dapeng.json.demo.domain.serializer.CreateAccompanyOrderRequestSerializer().validate(bean.getRequest());
              
    }
    

            @Override
            public String toString(createAccompanyOrder_args bean) { return bean == null ? "null" : bean.toString(); }

          }

            public static class CreateAccompanyOrder_resultSerializer implements BeanSerializer<createAccompanyOrder_result>{
            @Override
            public createAccompanyOrder_result read(TProtocol iprot) throws TException{

              createAccompanyOrder_result bean = new createAccompanyOrder_result();
              com.isuwang.org.apache.thrift.protocol.TField schemeField;
              iprot.readStructBegin();

              while(true){
                schemeField = iprot.readFieldBegin();
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

                switch(schemeField.id){
                  case 0:  //SUCCESS
                  if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRUCT){
                    com.isuwang.dapeng.json.demo.domain.OrderItem elem0 = new com.isuwang.dapeng.json.demo.domain.OrderItem();
        elem0=new com.isuwang.dapeng.json.demo.domain.serializer.OrderItemSerializer().read(iprot);
       bean.setSuccess(elem0);
                  }else{
                    com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }
                  break;
                  /*
                  case 1: //ERROR
                  bean.setSoaException(new SoaException());
                  new SoaExceptionSerializer().read(bean.getSoaException(),iprot);
                  break A;
                  */
                  default:
                  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
              }
              iprot.readStructEnd();

              validate(bean);
              return bean;
            }
            
      @Override
      public void write(createAccompanyOrder_result bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("createAccompanyOrder_result"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("success", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, (short) 0));
            com.isuwang.dapeng.json.demo.domain.OrderItem elem0 = bean.getSuccess();
             new com.isuwang.dapeng.json.demo.domain.serializer.OrderItemSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
            
      public void validate(createAccompanyOrder_result bean) throws TException{
      
              if(bean.getSuccess() == null)
              throw new SoaException(SoaBaseCode.NotNull, "success字段不允许为空");
            
                if(bean.getSuccess() != null)
                new com.isuwang.dapeng.json.demo.domain.serializer.OrderItemSerializer().validate(bean.getSuccess());
              
    }
    

            @Override
            public String toString(createAccompanyOrder_result bean) { return bean == null ? "null" : bean.toString(); }
          }

            public static class createAccompanyOrder<I extends com.isuwang.dapeng.json.demo.service.OrderServiceAsync> extends SoaFunctionDefinition.Async<I, createAccompanyOrder_args, createAccompanyOrder_result>
            {
              public createAccompanyOrder()
              {
                super("createAccompanyOrder", new CreateAccompanyOrder_argsSerializer(),  new CreateAccompanyOrder_resultSerializer());
              }

              @Override
              public CompletableFuture<createAccompanyOrder_result> apply(OrderServiceAsync iface, createAccompanyOrder_args createAccompanyOrder_args) throws SoaException
              {

                CompletableFuture<com.isuwang.dapeng.json.demo.domain.OrderItem> result = (CompletableFuture<com.isuwang.dapeng.json.demo.domain.OrderItem>) iface.createAccompanyOrder(createAccompanyOrder_args.request ,50000);

                return result.thenApply(( com.isuwang.dapeng.json.demo.domain.OrderItem i) -> {
                  createAccompanyOrder_result res = new createAccompanyOrder_result();
                  res.setSuccess(i);
                  return res;
              });
              }

            }
          
            public static class getAccompanyOrderParams_args {
            

            @Override
            public String toString(){
              StringBuilder stringBuilder = new StringBuilder("{");
                
                if(stringBuilder.lastIndexOf(",") > 0)
                stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                stringBuilder.append("}");

              return stringBuilder.toString();
            }

          }

            public static class getAccompanyOrderParams_result {

            
                  private java.util.List<com.isuwang.dapeng.json.demo.domain.AccompanyOrderParam> success;
                  public java.util.List<com.isuwang.dapeng.json.demo.domain.AccompanyOrderParam> getSuccess(){
                  return success;
                }

                  public void setSuccess(java.util.List<com.isuwang.dapeng.json.demo.domain.AccompanyOrderParam> success){
                  this.success = success;
                }


                  @Override
                  public String toString(){
                  StringBuilder stringBuilder = new StringBuilder("{");
                    
      stringBuilder.append("\"").append("success").append("\":").append(success).append(",");
    
                    stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                    stringBuilder.append("}");

                  return stringBuilder.toString();
                }

                
          }

            public static class GetAccompanyOrderParams_argsSerializer implements BeanSerializer<getAccompanyOrderParams_args>{
            
      @Override
      public getAccompanyOrderParams_args read(TProtocol iprot) throws TException{

      getAccompanyOrderParams_args bean = new getAccompanyOrderParams_args();
      com.isuwang.org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();

      while(true){
        schemeField = iprot.readFieldBegin();
        if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

        switch(schemeField.id){
          
          
            default:
            com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate(bean);
      return bean;
    }
    
      @Override
      public void write(getAccompanyOrderParams_args bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("getAccompanyOrderParams_args"));

      
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(getAccompanyOrderParams_args bean) throws TException{
      
    }
    

            @Override
            public String toString(getAccompanyOrderParams_args bean) { return bean == null ? "null" : bean.toString(); }

          }

            public static class GetAccompanyOrderParams_resultSerializer implements BeanSerializer<getAccompanyOrderParams_result>{
            @Override
            public getAccompanyOrderParams_result read(TProtocol iprot) throws TException{

              getAccompanyOrderParams_result bean = new getAccompanyOrderParams_result();
              com.isuwang.org.apache.thrift.protocol.TField schemeField;
              iprot.readStructBegin();

              while(true){
                schemeField = iprot.readFieldBegin();
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

                switch(schemeField.id){
                  case 0:  //SUCCESS
                  if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.LIST){
                     com.isuwang.org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
        java.util.List<com.isuwang.dapeng.json.demo.domain.AccompanyOrderParam> elem0 = new java.util.ArrayList<>(_list0.size);
        for(int _i0 = 0; _i0 < _list0.size; ++ _i0){
          com.isuwang.dapeng.json.demo.domain.AccompanyOrderParam elem1 = new com.isuwang.dapeng.json.demo.domain.AccompanyOrderParam();
        elem1=new com.isuwang.dapeng.json.demo.domain.serializer.AccompanyOrderParamSerializer().read(iprot);
          elem0.add(elem1);
        }
        iprot.readListEnd();
       bean.setSuccess(elem0);
                  }else{
                    com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }
                  break;
                  /*
                  case 1: //ERROR
                  bean.setSoaException(new SoaException());
                  new SoaExceptionSerializer().read(bean.getSoaException(),iprot);
                  break A;
                  */
                  default:
                  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
              }
              iprot.readStructEnd();

              validate(bean);
              return bean;
            }
            
      @Override
      public void write(getAccompanyOrderParams_result bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("getAccompanyOrderParams_result"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("success", com.isuwang.org.apache.thrift.protocol.TType.LIST, (short) 0));
            java.util.List<com.isuwang.dapeng.json.demo.domain.AccompanyOrderParam> elem0 = bean.getSuccess();
            
          oprot.writeListBegin(new com.isuwang.org.apache.thrift.protocol.TList(com.isuwang.org.apache.thrift.protocol.TType.STRUCT, elem0.size()));
          for(com.isuwang.dapeng.json.demo.domain.AccompanyOrderParam elem1 : elem0){
           new com.isuwang.dapeng.json.demo.domain.serializer.AccompanyOrderParamSerializer().write(elem1, oprot);
        }
          oprot.writeListEnd();
        
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
            
      public void validate(getAccompanyOrderParams_result bean) throws TException{
      
              if(bean.getSuccess() == null)
              throw new SoaException(SoaBaseCode.NotNull, "success字段不允许为空");
            
    }
    

            @Override
            public String toString(getAccompanyOrderParams_result bean) { return bean == null ? "null" : bean.toString(); }
          }

            public static class getAccompanyOrderParams<I extends com.isuwang.dapeng.json.demo.service.OrderServiceAsync> extends SoaFunctionDefinition.Async<I, getAccompanyOrderParams_args, getAccompanyOrderParams_result>
            {
              public getAccompanyOrderParams()
              {
                super("getAccompanyOrderParams", new GetAccompanyOrderParams_argsSerializer(),  new GetAccompanyOrderParams_resultSerializer());
              }

              @Override
              public CompletableFuture<getAccompanyOrderParams_result> apply(OrderServiceAsync iface, getAccompanyOrderParams_args getAccompanyOrderParams_args) throws SoaException
              {

                CompletableFuture<java.util.List<com.isuwang.dapeng.json.demo.domain.AccompanyOrderParam>> result = (CompletableFuture<java.util.List<com.isuwang.dapeng.json.demo.domain.AccompanyOrderParam>>) iface.getAccompanyOrderParams( 50000);

                return result.thenApply(( java.util.List<com.isuwang.dapeng.json.demo.domain.AccompanyOrderParam> i) -> {
                  getAccompanyOrderParams_result res = new getAccompanyOrderParams_result();
                  res.setSuccess(i);
                  return res;
              });
              }

            }
          
            public static class getCouponOrderParams_args {
            

            @Override
            public String toString(){
              StringBuilder stringBuilder = new StringBuilder("{");
                
                if(stringBuilder.lastIndexOf(",") > 0)
                stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                stringBuilder.append("}");

              return stringBuilder.toString();
            }

          }

            public static class getCouponOrderParams_result {

            
                  private com.isuwang.dapeng.json.demo.domain.CouponOrderParams success;
                  public com.isuwang.dapeng.json.demo.domain.CouponOrderParams getSuccess(){
                  return success;
                }

                  public void setSuccess(com.isuwang.dapeng.json.demo.domain.CouponOrderParams success){
                  this.success = success;
                }


                  @Override
                  public String toString(){
                  StringBuilder stringBuilder = new StringBuilder("{");
                    
      stringBuilder.append("\"").append("success").append("\":").append(this.success == null ? "null" : this.success.toString()).append(",");
    
                    stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                    stringBuilder.append("}");

                  return stringBuilder.toString();
                }

                
          }

            public static class GetCouponOrderParams_argsSerializer implements BeanSerializer<getCouponOrderParams_args>{
            
      @Override
      public getCouponOrderParams_args read(TProtocol iprot) throws TException{

      getCouponOrderParams_args bean = new getCouponOrderParams_args();
      com.isuwang.org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();

      while(true){
        schemeField = iprot.readFieldBegin();
        if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

        switch(schemeField.id){
          
          
            default:
            com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate(bean);
      return bean;
    }
    
      @Override
      public void write(getCouponOrderParams_args bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("getCouponOrderParams_args"));

      
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(getCouponOrderParams_args bean) throws TException{
      
    }
    

            @Override
            public String toString(getCouponOrderParams_args bean) { return bean == null ? "null" : bean.toString(); }

          }

            public static class GetCouponOrderParams_resultSerializer implements BeanSerializer<getCouponOrderParams_result>{
            @Override
            public getCouponOrderParams_result read(TProtocol iprot) throws TException{

              getCouponOrderParams_result bean = new getCouponOrderParams_result();
              com.isuwang.org.apache.thrift.protocol.TField schemeField;
              iprot.readStructBegin();

              while(true){
                schemeField = iprot.readFieldBegin();
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

                switch(schemeField.id){
                  case 0:  //SUCCESS
                  if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRUCT){
                    com.isuwang.dapeng.json.demo.domain.CouponOrderParams elem0 = new com.isuwang.dapeng.json.demo.domain.CouponOrderParams();
        elem0=new com.isuwang.dapeng.json.demo.domain.serializer.CouponOrderParamsSerializer().read(iprot);
       bean.setSuccess(elem0);
                  }else{
                    com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }
                  break;
                  /*
                  case 1: //ERROR
                  bean.setSoaException(new SoaException());
                  new SoaExceptionSerializer().read(bean.getSoaException(),iprot);
                  break A;
                  */
                  default:
                  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
              }
              iprot.readStructEnd();

              validate(bean);
              return bean;
            }
            
      @Override
      public void write(getCouponOrderParams_result bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("getCouponOrderParams_result"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("success", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, (short) 0));
            com.isuwang.dapeng.json.demo.domain.CouponOrderParams elem0 = bean.getSuccess();
             new com.isuwang.dapeng.json.demo.domain.serializer.CouponOrderParamsSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
            
      public void validate(getCouponOrderParams_result bean) throws TException{
      
              if(bean.getSuccess() == null)
              throw new SoaException(SoaBaseCode.NotNull, "success字段不允许为空");
            
                if(bean.getSuccess() != null)
                new com.isuwang.dapeng.json.demo.domain.serializer.CouponOrderParamsSerializer().validate(bean.getSuccess());
              
    }
    

            @Override
            public String toString(getCouponOrderParams_result bean) { return bean == null ? "null" : bean.toString(); }
          }

            public static class getCouponOrderParams<I extends com.isuwang.dapeng.json.demo.service.OrderServiceAsync> extends SoaFunctionDefinition.Async<I, getCouponOrderParams_args, getCouponOrderParams_result>
            {
              public getCouponOrderParams()
              {
                super("getCouponOrderParams", new GetCouponOrderParams_argsSerializer(),  new GetCouponOrderParams_resultSerializer());
              }

              @Override
              public CompletableFuture<getCouponOrderParams_result> apply(OrderServiceAsync iface, getCouponOrderParams_args getCouponOrderParams_args) throws SoaException
              {

                CompletableFuture<com.isuwang.dapeng.json.demo.domain.CouponOrderParams> result = (CompletableFuture<com.isuwang.dapeng.json.demo.domain.CouponOrderParams>) iface.getCouponOrderParams( 50000);

                return result.thenApply(( com.isuwang.dapeng.json.demo.domain.CouponOrderParams i) -> {
                  getCouponOrderParams_result res = new getCouponOrderParams_result();
                  res.setSuccess(i);
                  return res;
              });
              }

            }
          
            public static class getPatientCaregiverHomePageInfo_args {
            
                private Integer patientId;
                public Integer getPatientId(){
                return this.patientId;
              }
                public void setPatientId(Integer patientId){
                this.patientId = patientId;
              }
              

            @Override
            public String toString(){
              StringBuilder stringBuilder = new StringBuilder("{");
                
      stringBuilder.append("\"").append("patientId").append("\":").append(patientId).append(",");
    
                if(stringBuilder.lastIndexOf(",") > 0)
                stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                stringBuilder.append("}");

              return stringBuilder.toString();
            }

          }

            public static class getPatientCaregiverHomePageInfo_result {

            
                  private com.isuwang.dapeng.json.demo.domain.GetPatientCaregiverHomePageInfoResponse success;
                  public com.isuwang.dapeng.json.demo.domain.GetPatientCaregiverHomePageInfoResponse getSuccess(){
                  return success;
                }

                  public void setSuccess(com.isuwang.dapeng.json.demo.domain.GetPatientCaregiverHomePageInfoResponse success){
                  this.success = success;
                }


                  @Override
                  public String toString(){
                  StringBuilder stringBuilder = new StringBuilder("{");
                    
      stringBuilder.append("\"").append("success").append("\":").append(this.success == null ? "null" : this.success.toString()).append(",");
    
                    stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                    stringBuilder.append("}");

                  return stringBuilder.toString();
                }

                
          }

            public static class GetPatientCaregiverHomePageInfo_argsSerializer implements BeanSerializer<getPatientCaregiverHomePageInfo_args>{
            
      @Override
      public getPatientCaregiverHomePageInfo_args read(TProtocol iprot) throws TException{

      getPatientCaregiverHomePageInfo_args bean = new getPatientCaregiverHomePageInfo_args();
      com.isuwang.org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();

      while(true){
        schemeField = iprot.readFieldBegin();
        if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

        switch(schemeField.id){
          
              case 1:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.I32){
               int elem0 = iprot.readI32();
       bean.setPatientId(elem0);
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
          
            default:
            com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate(bean);
      return bean;
    }
    
      @Override
      public void write(getPatientCaregiverHomePageInfo_args bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("getPatientCaregiverHomePageInfo_args"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("patientId", com.isuwang.org.apache.thrift.protocol.TType.I32, (short) 1));
            Integer elem0 = bean.getPatientId();
            oprot.writeI32(elem0);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(getPatientCaregiverHomePageInfo_args bean) throws TException{
      
    }
    

            @Override
            public String toString(getPatientCaregiverHomePageInfo_args bean) { return bean == null ? "null" : bean.toString(); }

          }

            public static class GetPatientCaregiverHomePageInfo_resultSerializer implements BeanSerializer<getPatientCaregiverHomePageInfo_result>{
            @Override
            public getPatientCaregiverHomePageInfo_result read(TProtocol iprot) throws TException{

              getPatientCaregiverHomePageInfo_result bean = new getPatientCaregiverHomePageInfo_result();
              com.isuwang.org.apache.thrift.protocol.TField schemeField;
              iprot.readStructBegin();

              while(true){
                schemeField = iprot.readFieldBegin();
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

                switch(schemeField.id){
                  case 0:  //SUCCESS
                  if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRUCT){
                    com.isuwang.dapeng.json.demo.domain.GetPatientCaregiverHomePageInfoResponse elem0 = new com.isuwang.dapeng.json.demo.domain.GetPatientCaregiverHomePageInfoResponse();
        elem0=new com.isuwang.dapeng.json.demo.domain.serializer.GetPatientCaregiverHomePageInfoResponseSerializer().read(iprot);
       bean.setSuccess(elem0);
                  }else{
                    com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }
                  break;
                  /*
                  case 1: //ERROR
                  bean.setSoaException(new SoaException());
                  new SoaExceptionSerializer().read(bean.getSoaException(),iprot);
                  break A;
                  */
                  default:
                  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
              }
              iprot.readStructEnd();

              validate(bean);
              return bean;
            }
            
      @Override
      public void write(getPatientCaregiverHomePageInfo_result bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("getPatientCaregiverHomePageInfo_result"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("success", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, (short) 0));
            com.isuwang.dapeng.json.demo.domain.GetPatientCaregiverHomePageInfoResponse elem0 = bean.getSuccess();
             new com.isuwang.dapeng.json.demo.domain.serializer.GetPatientCaregiverHomePageInfoResponseSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
            
      public void validate(getPatientCaregiverHomePageInfo_result bean) throws TException{
      
              if(bean.getSuccess() == null)
              throw new SoaException(SoaBaseCode.NotNull, "success字段不允许为空");
            
                if(bean.getSuccess() != null)
                new com.isuwang.dapeng.json.demo.domain.serializer.GetPatientCaregiverHomePageInfoResponseSerializer().validate(bean.getSuccess());
              
    }
    

            @Override
            public String toString(getPatientCaregiverHomePageInfo_result bean) { return bean == null ? "null" : bean.toString(); }
          }

            public static class getPatientCaregiverHomePageInfo<I extends com.isuwang.dapeng.json.demo.service.OrderServiceAsync> extends SoaFunctionDefinition.Async<I, getPatientCaregiverHomePageInfo_args, getPatientCaregiverHomePageInfo_result>
            {
              public getPatientCaregiverHomePageInfo()
              {
                super("getPatientCaregiverHomePageInfo", new GetPatientCaregiverHomePageInfo_argsSerializer(),  new GetPatientCaregiverHomePageInfo_resultSerializer());
              }

              @Override
              public CompletableFuture<getPatientCaregiverHomePageInfo_result> apply(OrderServiceAsync iface, getPatientCaregiverHomePageInfo_args getPatientCaregiverHomePageInfo_args) throws SoaException
              {

                CompletableFuture<com.isuwang.dapeng.json.demo.domain.GetPatientCaregiverHomePageInfoResponse> result = (CompletableFuture<com.isuwang.dapeng.json.demo.domain.GetPatientCaregiverHomePageInfoResponse>) iface.getPatientCaregiverHomePageInfo(getPatientCaregiverHomePageInfo_args.patientId ,50000);

                return result.thenApply(( com.isuwang.dapeng.json.demo.domain.GetPatientCaregiverHomePageInfoResponse i) -> {
                  getPatientCaregiverHomePageInfo_result res = new getPatientCaregiverHomePageInfo_result();
                  res.setSuccess(i);
                  return res;
              });
              }

            }
          
            public static class createAccompanyOrderByCode_args {
            
                private String code;
                public String getCode(){
                return this.code;
              }
                public void setCode(String code){
                this.code = code;
              }
              

            @Override
            public String toString(){
              StringBuilder stringBuilder = new StringBuilder("{");
                
      stringBuilder.append("\"").append("code").append("\":\"").append(code).append("\",");
    
                if(stringBuilder.lastIndexOf(",") > 0)
                stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                stringBuilder.append("}");

              return stringBuilder.toString();
            }

          }

            public static class createAccompanyOrderByCode_result {

            
                  private com.isuwang.dapeng.json.demo.domain.OrderItem success;
                  public com.isuwang.dapeng.json.demo.domain.OrderItem getSuccess(){
                  return success;
                }

                  public void setSuccess(com.isuwang.dapeng.json.demo.domain.OrderItem success){
                  this.success = success;
                }


                  @Override
                  public String toString(){
                  StringBuilder stringBuilder = new StringBuilder("{");
                    
      stringBuilder.append("\"").append("success").append("\":").append(this.success == null ? "null" : this.success.toString()).append(",");
    
                    stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                    stringBuilder.append("}");

                  return stringBuilder.toString();
                }

                
          }

            public static class CreateAccompanyOrderByCode_argsSerializer implements BeanSerializer<createAccompanyOrderByCode_args>{
            
      @Override
      public createAccompanyOrderByCode_args read(TProtocol iprot) throws TException{

      createAccompanyOrderByCode_args bean = new createAccompanyOrderByCode_args();
      com.isuwang.org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();

      while(true){
        schemeField = iprot.readFieldBegin();
        if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

        switch(schemeField.id){
          
              case 1:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRING){
              String elem0 = iprot.readString();
       bean.setCode(elem0);
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
          
            default:
            com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate(bean);
      return bean;
    }
    
      @Override
      public void write(createAccompanyOrderByCode_args bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("createAccompanyOrderByCode_args"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("code", com.isuwang.org.apache.thrift.protocol.TType.STRING, (short) 1));
            String elem0 = bean.getCode();
            oprot.writeString(elem0);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(createAccompanyOrderByCode_args bean) throws TException{
      
              if(bean.getCode() == null)
              throw new SoaException(SoaBaseCode.NotNull, "code字段不允许为空");
            
    }
    

            @Override
            public String toString(createAccompanyOrderByCode_args bean) { return bean == null ? "null" : bean.toString(); }

          }

            public static class CreateAccompanyOrderByCode_resultSerializer implements BeanSerializer<createAccompanyOrderByCode_result>{
            @Override
            public createAccompanyOrderByCode_result read(TProtocol iprot) throws TException{

              createAccompanyOrderByCode_result bean = new createAccompanyOrderByCode_result();
              com.isuwang.org.apache.thrift.protocol.TField schemeField;
              iprot.readStructBegin();

              while(true){
                schemeField = iprot.readFieldBegin();
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

                switch(schemeField.id){
                  case 0:  //SUCCESS
                  if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRUCT){
                    com.isuwang.dapeng.json.demo.domain.OrderItem elem0 = new com.isuwang.dapeng.json.demo.domain.OrderItem();
        elem0=new com.isuwang.dapeng.json.demo.domain.serializer.OrderItemSerializer().read(iprot);
       bean.setSuccess(elem0);
                  }else{
                    com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }
                  break;
                  /*
                  case 1: //ERROR
                  bean.setSoaException(new SoaException());
                  new SoaExceptionSerializer().read(bean.getSoaException(),iprot);
                  break A;
                  */
                  default:
                  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
              }
              iprot.readStructEnd();

              validate(bean);
              return bean;
            }
            
      @Override
      public void write(createAccompanyOrderByCode_result bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("createAccompanyOrderByCode_result"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("success", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, (short) 0));
            com.isuwang.dapeng.json.demo.domain.OrderItem elem0 = bean.getSuccess();
             new com.isuwang.dapeng.json.demo.domain.serializer.OrderItemSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
            
      public void validate(createAccompanyOrderByCode_result bean) throws TException{
      
              if(bean.getSuccess() == null)
              throw new SoaException(SoaBaseCode.NotNull, "success字段不允许为空");
            
                if(bean.getSuccess() != null)
                new com.isuwang.dapeng.json.demo.domain.serializer.OrderItemSerializer().validate(bean.getSuccess());
              
    }
    

            @Override
            public String toString(createAccompanyOrderByCode_result bean) { return bean == null ? "null" : bean.toString(); }
          }

            public static class createAccompanyOrderByCode<I extends com.isuwang.dapeng.json.demo.service.OrderServiceAsync> extends SoaFunctionDefinition.Async<I, createAccompanyOrderByCode_args, createAccompanyOrderByCode_result>
            {
              public createAccompanyOrderByCode()
              {
                super("createAccompanyOrderByCode", new CreateAccompanyOrderByCode_argsSerializer(),  new CreateAccompanyOrderByCode_resultSerializer());
              }

              @Override
              public CompletableFuture<createAccompanyOrderByCode_result> apply(OrderServiceAsync iface, createAccompanyOrderByCode_args createAccompanyOrderByCode_args) throws SoaException
              {

                CompletableFuture<com.isuwang.dapeng.json.demo.domain.OrderItem> result = (CompletableFuture<com.isuwang.dapeng.json.demo.domain.OrderItem>) iface.createAccompanyOrderByCode(createAccompanyOrderByCode_args.code ,50000);

                return result.thenApply(( com.isuwang.dapeng.json.demo.domain.OrderItem i) -> {
                  createAccompanyOrderByCode_result res = new createAccompanyOrderByCode_result();
                  res.setSuccess(i);
                  return res;
              });
              }

            }
          
            public static class recommendTreatDoctors_args {
            
                private com.isuwang.dapeng.json.demo.domain.PageRequest pageRequest;
                public com.isuwang.dapeng.json.demo.domain.PageRequest getPageRequest(){
                return this.pageRequest;
              }
                public void setPageRequest(com.isuwang.dapeng.json.demo.domain.PageRequest pageRequest){
                this.pageRequest = pageRequest;
              }
              

            @Override
            public String toString(){
              StringBuilder stringBuilder = new StringBuilder("{");
                
      stringBuilder.append("\"").append("pageRequest").append("\":").append(this.pageRequest == null ? "null" : this.pageRequest.toString()).append(",");
    
                if(stringBuilder.lastIndexOf(",") > 0)
                stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                stringBuilder.append("}");

              return stringBuilder.toString();
            }

          }

            public static class recommendTreatDoctors_result {

            
                  private com.isuwang.dapeng.json.demo.domain.AppointmentDoctorsResponse success;
                  public com.isuwang.dapeng.json.demo.domain.AppointmentDoctorsResponse getSuccess(){
                  return success;
                }

                  public void setSuccess(com.isuwang.dapeng.json.demo.domain.AppointmentDoctorsResponse success){
                  this.success = success;
                }


                  @Override
                  public String toString(){
                  StringBuilder stringBuilder = new StringBuilder("{");
                    
      stringBuilder.append("\"").append("success").append("\":").append(this.success == null ? "null" : this.success.toString()).append(",");
    
                    stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                    stringBuilder.append("}");

                  return stringBuilder.toString();
                }

                
          }

            public static class RecommendTreatDoctors_argsSerializer implements BeanSerializer<recommendTreatDoctors_args>{
            
      @Override
      public recommendTreatDoctors_args read(TProtocol iprot) throws TException{

      recommendTreatDoctors_args bean = new recommendTreatDoctors_args();
      com.isuwang.org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();

      while(true){
        schemeField = iprot.readFieldBegin();
        if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

        switch(schemeField.id){
          
              case 1:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRUCT){
              com.isuwang.dapeng.json.demo.domain.PageRequest elem0 = new com.isuwang.dapeng.json.demo.domain.PageRequest();
        elem0=new com.isuwang.dapeng.json.demo.domain.serializer.PageRequestSerializer().read(iprot);
       bean.setPageRequest(elem0);
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
          
            default:
            com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate(bean);
      return bean;
    }
    
      @Override
      public void write(recommendTreatDoctors_args bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("recommendTreatDoctors_args"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("pageRequest", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, (short) 1));
            com.isuwang.dapeng.json.demo.domain.PageRequest elem0 = bean.getPageRequest();
             new com.isuwang.dapeng.json.demo.domain.serializer.PageRequestSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(recommendTreatDoctors_args bean) throws TException{
      
              if(bean.getPageRequest() == null)
              throw new SoaException(SoaBaseCode.NotNull, "pageRequest字段不允许为空");
            
                if(bean.getPageRequest() != null)
                new com.isuwang.dapeng.json.demo.domain.serializer.PageRequestSerializer().validate(bean.getPageRequest());
              
    }
    

            @Override
            public String toString(recommendTreatDoctors_args bean) { return bean == null ? "null" : bean.toString(); }

          }

            public static class RecommendTreatDoctors_resultSerializer implements BeanSerializer<recommendTreatDoctors_result>{
            @Override
            public recommendTreatDoctors_result read(TProtocol iprot) throws TException{

              recommendTreatDoctors_result bean = new recommendTreatDoctors_result();
              com.isuwang.org.apache.thrift.protocol.TField schemeField;
              iprot.readStructBegin();

              while(true){
                schemeField = iprot.readFieldBegin();
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

                switch(schemeField.id){
                  case 0:  //SUCCESS
                  if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRUCT){
                    com.isuwang.dapeng.json.demo.domain.AppointmentDoctorsResponse elem0 = new com.isuwang.dapeng.json.demo.domain.AppointmentDoctorsResponse();
        elem0=new com.isuwang.dapeng.json.demo.domain.serializer.AppointmentDoctorsResponseSerializer().read(iprot);
       bean.setSuccess(elem0);
                  }else{
                    com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }
                  break;
                  /*
                  case 1: //ERROR
                  bean.setSoaException(new SoaException());
                  new SoaExceptionSerializer().read(bean.getSoaException(),iprot);
                  break A;
                  */
                  default:
                  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
              }
              iprot.readStructEnd();

              validate(bean);
              return bean;
            }
            
      @Override
      public void write(recommendTreatDoctors_result bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("recommendTreatDoctors_result"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("success", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, (short) 0));
            com.isuwang.dapeng.json.demo.domain.AppointmentDoctorsResponse elem0 = bean.getSuccess();
             new com.isuwang.dapeng.json.demo.domain.serializer.AppointmentDoctorsResponseSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
            
      public void validate(recommendTreatDoctors_result bean) throws TException{
      
              if(bean.getSuccess() == null)
              throw new SoaException(SoaBaseCode.NotNull, "success字段不允许为空");
            
                if(bean.getSuccess() != null)
                new com.isuwang.dapeng.json.demo.domain.serializer.AppointmentDoctorsResponseSerializer().validate(bean.getSuccess());
              
    }
    

            @Override
            public String toString(recommendTreatDoctors_result bean) { return bean == null ? "null" : bean.toString(); }
          }

            public static class recommendTreatDoctors<I extends com.isuwang.dapeng.json.demo.service.OrderServiceAsync> extends SoaFunctionDefinition.Async<I, recommendTreatDoctors_args, recommendTreatDoctors_result>
            {
              public recommendTreatDoctors()
              {
                super("recommendTreatDoctors", new RecommendTreatDoctors_argsSerializer(),  new RecommendTreatDoctors_resultSerializer());
              }

              @Override
              public CompletableFuture<recommendTreatDoctors_result> apply(OrderServiceAsync iface, recommendTreatDoctors_args recommendTreatDoctors_args) throws SoaException
              {

                CompletableFuture<com.isuwang.dapeng.json.demo.domain.AppointmentDoctorsResponse> result = (CompletableFuture<com.isuwang.dapeng.json.demo.domain.AppointmentDoctorsResponse>) iface.recommendTreatDoctors(recommendTreatDoctors_args.pageRequest ,50000);

                return result.thenApply(( com.isuwang.dapeng.json.demo.domain.AppointmentDoctorsResponse i) -> {
                  recommendTreatDoctors_result res = new recommendTreatDoctors_result();
                  res.setSuccess(i);
                  return res;
              });
              }

            }
          
            public static class createExperienceCoupon_args {
            
                private Integer number;
                public Integer getNumber(){
                return this.number;
              }
                public void setNumber(Integer number){
                this.number = number;
              }
              

            @Override
            public String toString(){
              StringBuilder stringBuilder = new StringBuilder("{");
                
      stringBuilder.append("\"").append("number").append("\":").append(number).append(",");
    
                if(stringBuilder.lastIndexOf(",") > 0)
                stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                stringBuilder.append("}");

              return stringBuilder.toString();
            }

          }

            public static class createExperienceCoupon_result {

            
                  private Integer success;
                  public Integer getSuccess(){
                  return success;
                }

                  public void setSuccess(Integer success){
                  this.success = success;
                }


                  @Override
                  public String toString(){
                  StringBuilder stringBuilder = new StringBuilder("{");
                    
      stringBuilder.append("\"").append("success").append("\":").append(success).append(",");
    
                    stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                    stringBuilder.append("}");

                  return stringBuilder.toString();
                }

                
          }

            public static class CreateExperienceCoupon_argsSerializer implements BeanSerializer<createExperienceCoupon_args>{
            
      @Override
      public createExperienceCoupon_args read(TProtocol iprot) throws TException{

      createExperienceCoupon_args bean = new createExperienceCoupon_args();
      com.isuwang.org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();

      while(true){
        schemeField = iprot.readFieldBegin();
        if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

        switch(schemeField.id){
          
              case 1:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.I32){
               int elem0 = iprot.readI32();
       bean.setNumber(elem0);
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
          
            default:
            com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate(bean);
      return bean;
    }
    
      @Override
      public void write(createExperienceCoupon_args bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("createExperienceCoupon_args"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("number", com.isuwang.org.apache.thrift.protocol.TType.I32, (short) 1));
            Integer elem0 = bean.getNumber();
            oprot.writeI32(elem0);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(createExperienceCoupon_args bean) throws TException{
      
    }
    

            @Override
            public String toString(createExperienceCoupon_args bean) { return bean == null ? "null" : bean.toString(); }

          }

            public static class CreateExperienceCoupon_resultSerializer implements BeanSerializer<createExperienceCoupon_result>{
            @Override
            public createExperienceCoupon_result read(TProtocol iprot) throws TException{

              createExperienceCoupon_result bean = new createExperienceCoupon_result();
              com.isuwang.org.apache.thrift.protocol.TField schemeField;
              iprot.readStructBegin();

              while(true){
                schemeField = iprot.readFieldBegin();
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

                switch(schemeField.id){
                  case 0:  //SUCCESS
                  if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.I32){
                     int elem0 = iprot.readI32();
       bean.setSuccess(elem0);
                  }else{
                    com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }
                  break;
                  /*
                  case 1: //ERROR
                  bean.setSoaException(new SoaException());
                  new SoaExceptionSerializer().read(bean.getSoaException(),iprot);
                  break A;
                  */
                  default:
                  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
              }
              iprot.readStructEnd();

              validate(bean);
              return bean;
            }
            
      @Override
      public void write(createExperienceCoupon_result bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("createExperienceCoupon_result"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("success", com.isuwang.org.apache.thrift.protocol.TType.I32, (short) 0));
            Integer elem0 = bean.getSuccess();
            oprot.writeI32(elem0);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
            
      public void validate(createExperienceCoupon_result bean) throws TException{
      
    }
    

            @Override
            public String toString(createExperienceCoupon_result bean) { return bean == null ? "null" : bean.toString(); }
          }

            public static class createExperienceCoupon<I extends com.isuwang.dapeng.json.demo.service.OrderServiceAsync> extends SoaFunctionDefinition.Async<I, createExperienceCoupon_args, createExperienceCoupon_result>
            {
              public createExperienceCoupon()
              {
                super("createExperienceCoupon", new CreateExperienceCoupon_argsSerializer(),  new CreateExperienceCoupon_resultSerializer());
              }

              @Override
              public CompletableFuture<createExperienceCoupon_result> apply(OrderServiceAsync iface, createExperienceCoupon_args createExperienceCoupon_args) throws SoaException
              {

                CompletableFuture<Integer> result = (CompletableFuture<Integer>) iface.createExperienceCoupon(createExperienceCoupon_args.number ,50000);

                return result.thenApply(( Integer i) -> {
                  createExperienceCoupon_result res = new createExperienceCoupon_result();
                  res.setSuccess(i);
                  return res;
              });
              }

            }
          
            public static class listExperienceCoupon_args {
            
                private com.isuwang.dapeng.json.demo.domain.ListExperienceCouponRequest request;
                public com.isuwang.dapeng.json.demo.domain.ListExperienceCouponRequest getRequest(){
                return this.request;
              }
                public void setRequest(com.isuwang.dapeng.json.demo.domain.ListExperienceCouponRequest request){
                this.request = request;
              }
              

            @Override
            public String toString(){
              StringBuilder stringBuilder = new StringBuilder("{");
                
      stringBuilder.append("\"").append("request").append("\":").append(this.request == null ? "null" : this.request.toString()).append(",");
    
                if(stringBuilder.lastIndexOf(",") > 0)
                stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                stringBuilder.append("}");

              return stringBuilder.toString();
            }

          }

            public static class listExperienceCoupon_result {

            
                  private com.isuwang.dapeng.json.demo.domain.ListExperienceCouponResponse success;
                  public com.isuwang.dapeng.json.demo.domain.ListExperienceCouponResponse getSuccess(){
                  return success;
                }

                  public void setSuccess(com.isuwang.dapeng.json.demo.domain.ListExperienceCouponResponse success){
                  this.success = success;
                }


                  @Override
                  public String toString(){
                  StringBuilder stringBuilder = new StringBuilder("{");
                    
      stringBuilder.append("\"").append("success").append("\":").append(this.success == null ? "null" : this.success.toString()).append(",");
    
                    stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                    stringBuilder.append("}");

                  return stringBuilder.toString();
                }

                
          }

            public static class ListExperienceCoupon_argsSerializer implements BeanSerializer<listExperienceCoupon_args>{
            
      @Override
      public listExperienceCoupon_args read(TProtocol iprot) throws TException{

      listExperienceCoupon_args bean = new listExperienceCoupon_args();
      com.isuwang.org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();

      while(true){
        schemeField = iprot.readFieldBegin();
        if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

        switch(schemeField.id){
          
              case 1:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRUCT){
              com.isuwang.dapeng.json.demo.domain.ListExperienceCouponRequest elem0 = new com.isuwang.dapeng.json.demo.domain.ListExperienceCouponRequest();
        elem0=new com.isuwang.dapeng.json.demo.domain.serializer.ListExperienceCouponRequestSerializer().read(iprot);
       bean.setRequest(elem0);
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
          
            default:
            com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate(bean);
      return bean;
    }
    
      @Override
      public void write(listExperienceCoupon_args bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("listExperienceCoupon_args"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("request", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, (short) 1));
            com.isuwang.dapeng.json.demo.domain.ListExperienceCouponRequest elem0 = bean.getRequest();
             new com.isuwang.dapeng.json.demo.domain.serializer.ListExperienceCouponRequestSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(listExperienceCoupon_args bean) throws TException{
      
              if(bean.getRequest() == null)
              throw new SoaException(SoaBaseCode.NotNull, "request字段不允许为空");
            
                if(bean.getRequest() != null)
                new com.isuwang.dapeng.json.demo.domain.serializer.ListExperienceCouponRequestSerializer().validate(bean.getRequest());
              
    }
    

            @Override
            public String toString(listExperienceCoupon_args bean) { return bean == null ? "null" : bean.toString(); }

          }

            public static class ListExperienceCoupon_resultSerializer implements BeanSerializer<listExperienceCoupon_result>{
            @Override
            public listExperienceCoupon_result read(TProtocol iprot) throws TException{

              listExperienceCoupon_result bean = new listExperienceCoupon_result();
              com.isuwang.org.apache.thrift.protocol.TField schemeField;
              iprot.readStructBegin();

              while(true){
                schemeField = iprot.readFieldBegin();
                if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

                switch(schemeField.id){
                  case 0:  //SUCCESS
                  if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRUCT){
                    com.isuwang.dapeng.json.demo.domain.ListExperienceCouponResponse elem0 = new com.isuwang.dapeng.json.demo.domain.ListExperienceCouponResponse();
        elem0=new com.isuwang.dapeng.json.demo.domain.serializer.ListExperienceCouponResponseSerializer().read(iprot);
       bean.setSuccess(elem0);
                  }else{
                    com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                  }
                  break;
                  /*
                  case 1: //ERROR
                  bean.setSoaException(new SoaException());
                  new SoaExceptionSerializer().read(bean.getSoaException(),iprot);
                  break A;
                  */
                  default:
                  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
              }
              iprot.readStructEnd();

              validate(bean);
              return bean;
            }
            
      @Override
      public void write(listExperienceCoupon_result bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("listExperienceCoupon_result"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("success", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, (short) 0));
            com.isuwang.dapeng.json.demo.domain.ListExperienceCouponResponse elem0 = bean.getSuccess();
             new com.isuwang.dapeng.json.demo.domain.serializer.ListExperienceCouponResponseSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
            
      public void validate(listExperienceCoupon_result bean) throws TException{
      
              if(bean.getSuccess() == null)
              throw new SoaException(SoaBaseCode.NotNull, "success字段不允许为空");
            
                if(bean.getSuccess() != null)
                new com.isuwang.dapeng.json.demo.domain.serializer.ListExperienceCouponResponseSerializer().validate(bean.getSuccess());
              
    }
    

            @Override
            public String toString(listExperienceCoupon_result bean) { return bean == null ? "null" : bean.toString(); }
          }

            public static class listExperienceCoupon<I extends com.isuwang.dapeng.json.demo.service.OrderServiceAsync> extends SoaFunctionDefinition.Async<I, listExperienceCoupon_args, listExperienceCoupon_result>
            {
              public listExperienceCoupon()
              {
                super("listExperienceCoupon", new ListExperienceCoupon_argsSerializer(),  new ListExperienceCoupon_resultSerializer());
              }

              @Override
              public CompletableFuture<listExperienceCoupon_result> apply(OrderServiceAsync iface, listExperienceCoupon_args listExperienceCoupon_args) throws SoaException
              {

                CompletableFuture<com.isuwang.dapeng.json.demo.domain.ListExperienceCouponResponse> result = (CompletableFuture<com.isuwang.dapeng.json.demo.domain.ListExperienceCouponResponse>) iface.listExperienceCoupon(listExperienceCoupon_args.request ,50000);

                return result.thenApply(( com.isuwang.dapeng.json.demo.domain.ListExperienceCouponResponse i) -> {
                  listExperienceCoupon_result res = new listExperienceCoupon_result();
                  res.setSuccess(i);
                  return res;
              });
              }

            }
          

        public static class getServiceMetadata_args {

          @Override
          public String toString() {
            return "{}";
          }
        }


        public static class getServiceMetadata_result {

          private String success;

          public String getSuccess() {
            return success;
          }

          public void setSuccess(String success) {
            this.success = success;
          }

          @Override
          public String toString() {
            StringBuilder stringBuilder = new StringBuilder("{");
              stringBuilder.append("\"").append("success").append("\":\"").append(this.success).append("\",");
              stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
              stringBuilder.append("}");

            return stringBuilder.toString();
          }
        }

        public static class GetServiceMetadata_argsSerializer implements BeanSerializer<getServiceMetadata_args> {

          @Override
          public getServiceMetadata_args read(TProtocol iprot) throws TException {

            getServiceMetadata_args bean =new getServiceMetadata_args();
            com.isuwang.org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();

            while (true) {
              schemeField = iprot.readFieldBegin();
              if (schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP) {
                break;
              }
              switch (schemeField.id) {
                default:
                com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);

              }
              iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            validate(bean);
            return bean;
          }


          @Override
          public void write(getServiceMetadata_args bean, TProtocol oprot) throws TException {

            validate(bean);
            oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("getServiceMetadata_args"));
            oprot.writeFieldStop();
            oprot.writeStructEnd();
          }

          public void validate(getServiceMetadata_args bean) throws TException {}

          @Override
          public String toString(getServiceMetadata_args bean) {
            return bean == null ? "null" : bean.toString();
          }

        }

        public static class GetServiceMetadata_resultSerializer implements BeanSerializer<getServiceMetadata_result> {
          @Override
          public getServiceMetadata_result read(TProtocol iprot) throws TException {

            getServiceMetadata_result bean = new getServiceMetadata_result();
            com.isuwang.org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();

            while (true) {
              schemeField = iprot.readFieldBegin();
              if (schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP) {
                break;
              }

              switch (schemeField.id) {
                case 0:  //SUCCESS
                if (schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRING) {
                  bean.setSuccess(iprot.readString());
                } else {
                  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                break;
                default:
                com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            validate(bean);
            return bean;
          }

          @Override
          public void write(getServiceMetadata_result bean, TProtocol oprot) throws TException {

            validate(bean);
            oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("getServiceMetadata_result"));

            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("success", com.isuwang.org.apache.thrift.protocol.TType.STRING, (short) 0));
            oprot.writeString(bean.getSuccess());
            oprot.writeFieldEnd();

            oprot.writeFieldStop();
            oprot.writeStructEnd();
          }

          public void validate(getServiceMetadata_result bean) throws TException {

            if (bean.getSuccess() == null)
            throw new SoaException(SoaBaseCode.NotNull, "success字段不允许为空");
          }

          @Override
          public String toString(getServiceMetadata_result bean) {
            return bean == null ? "null" : bean.toString();
          }
        }

        public static class getServiceMetadata<I extends com.isuwang.dapeng.json.demo.service.OrderService> extends SoaFunctionDefinition.Sync<I, getServiceMetadata_args, getServiceMetadata_result> {
          public getServiceMetadata() {
            super("getServiceMetadata", new GetServiceMetadata_argsSerializer(), new GetServiceMetadata_resultSerializer());
          }

          @Override
          public getServiceMetadata_result apply(I iface, getServiceMetadata_args args) {
            getServiceMetadata_result result = new getServiceMetadata_result();

            try (InputStreamReader isr = new InputStreamReader(OrderServiceCodec.class.getClassLoader().getResourceAsStream("com.isuwang.dapeng.json.demo.service.OrderService.xml"));
            BufferedReader in = new BufferedReader(isr)) {
              int len = 0;
              StringBuilder str = new StringBuilder("");
              String line;
              while ((line = in.readLine()) != null) {

                if (len != 0) {
                  str.append("\r\n").append(line);
                } else {
                  str.append(line);
                }
                len++;
              }
              result.success = str.toString();

            } catch (Exception e) {
              e.printStackTrace();
              result.success = "";
            }

            return result;
          }

        }

        @SuppressWarnings("unchecked")
        public static class Processor<I extends com.isuwang.dapeng.json.demo.service.OrderServiceAsync> extends SoaServiceDefinition<com.isuwang.dapeng.json.demo.service.OrderServiceAsync>
        {

          public Processor(com.isuwang.dapeng.json.demo.service.OrderServiceAsync iface, Class<com.isuwang.dapeng.json.demo.service.OrderServiceAsync> ifaceClass)
          {
            super(iface, ifaceClass, buildMap(new java.util.HashMap<>()));
          }

          @SuppressWarnings("unchecked")
          private static <I extends com.isuwang.dapeng.json.demo.service.OrderServiceAsync> java.util.Map<String, SoaFunctionDefinition<I, ?, ?>> buildMap(java.util.Map<String, SoaFunctionDefinition<I, ?, ?>> processMap)
          {
            
                processMap.put("batchAppointment", new batchAppointment());
              
                processMap.put("batchAppointment4Doctor", new batchAppointment4Doctor());
              
                processMap.put("listAppointments", new listAppointments());
              
                processMap.put("createAppointmentForAvailable", new createAppointmentForAvailable());
              
                processMap.put("getLastTreatDoctor", new getLastTreatDoctor());
              
                processMap.put("createOrder", new createOrder());
              
                processMap.put("listOrders", new listOrders());
              
                processMap.put("getOrder", new getOrder());
              
                processMap.put("modifyOrderStatus", new modifyOrderStatus());
              
                processMap.put("payNotify", new payNotify());
              
                processMap.put("createDiagnose", new createDiagnose());
              
                processMap.put("listDiagnoses", new listDiagnoses());
              
                processMap.put("listTreatPlans", new listTreatPlans());
              
                processMap.put("listAppointmentDoctors", new listAppointmentDoctors());
              
                processMap.put("listAppointmentForDoctorName", new listAppointmentForDoctorName());
              
                processMap.put("listAppointmentDoctorsByDate", new listAppointmentDoctorsByDate());
              
                processMap.put("listAppointmentPatients", new listAppointmentPatients());
              
                processMap.put("listDoctorOnDuty", new listDoctorOnDuty());
              
                processMap.put("listAppointmentCalendar", new listAppointmentCalendar());
              
                processMap.put("listAppointmentCalendarForDoctor", new listAppointmentCalendarForDoctor());
              
                processMap.put("listAppointmentsByDoctorId", new listAppointmentsByDoctorId());
              
                processMap.put("getAppointmentItem", new getAppointmentItem());
              
                processMap.put("listAppointmentTimeForDoctor", new listAppointmentTimeForDoctor());
              
                processMap.put("getDoctorHomePageNotice", new getDoctorHomePageNotice());
              
                processMap.put("getPatientHomePageNotice", new getPatientHomePageNotice());
              
                processMap.put("readDiagnose", new readDiagnose());
              
                processMap.put("getDiagnoseItem", new getDiagnoseItem());
              
                processMap.put("getOrderForWx", new getOrderForWx());
              
                processMap.put("payNotifyForWx", new payNotifyForWx());
              
                processMap.put("getOrderForAlipay", new getOrderForAlipay());
              
                processMap.put("payNotifyForAlipay", new payNotifyForAlipay());
              
                processMap.put("diagnoseFinish", new diagnoseFinish());
              
                processMap.put("redoExceptionOrder", new redoExceptionOrder());
              
                processMap.put("createOfflinePatient", new createOfflinePatient());
              
                processMap.put("getOfflinePatient", new getOfflinePatient());
              
                processMap.put("createOrderForOffline", new createOrderForOffline());
              
                processMap.put("modifyOrderForOffline", new modifyOrderForOffline());
              
                processMap.put("modifyOrderStatusForOffline", new modifyOrderStatusForOffline());
              
                processMap.put("getPatientHomePageInfo", new getPatientHomePageInfo());
              
                processMap.put("getPatientHomePageSliderNotice", new getPatientHomePageSliderNotice());
              
                processMap.put("saveRecommends", new saveRecommends());
              
                processMap.put("listRecommends", new listRecommends());
              
                processMap.put("getArticleReadership", new getArticleReadership());
              
                processMap.put("readArticle", new readArticle());
              
                processMap.put("listPriceRule", new listPriceRule());
              
                processMap.put("modifyPriceRule", new modifyPriceRule());
              
                processMap.put("savePriceRule", new savePriceRule());
              
                processMap.put("listPackageChargesByDoctorId", new listPackageChargesByDoctorId());
              
                processMap.put("getPackageInfo", new getPackageInfo());
              
                processMap.put("buyPackage", new buyPackage());
              
                processMap.put("listTextPackOrderForDoctor", new listTextPackOrderForDoctor());
              
                processMap.put("countBuyTextPackPatients", new countBuyTextPackPatients());
              
                processMap.put("judgeChatAble", new judgeChatAble());
              
                processMap.put("giveCoupon", new giveCoupon());
              
                processMap.put("batchGiveCoupon", new batchGiveCoupon());
              
                processMap.put("listAvaliableCoupons", new listAvaliableCoupons());
              
                processMap.put("findAccompanyOrderByPatientId", new findAccompanyOrderByPatientId());
              
                processMap.put("createAccompanyOrder", new createAccompanyOrder());
              
                processMap.put("getAccompanyOrderParams", new getAccompanyOrderParams());
              
                processMap.put("getCouponOrderParams", new getCouponOrderParams());
              
                processMap.put("getPatientCaregiverHomePageInfo", new getPatientCaregiverHomePageInfo());
              
                processMap.put("createAccompanyOrderByCode", new createAccompanyOrderByCode());
              
                processMap.put("recommendTreatDoctors", new recommendTreatDoctors());
              
                processMap.put("createExperienceCoupon", new createExperienceCoupon());
              
                processMap.put("listExperienceCoupon", new listExperienceCoupon());
              
            processMap.put("getServiceMetadata", new getServiceMetadata());
            return processMap;
          }
        }

      }
      