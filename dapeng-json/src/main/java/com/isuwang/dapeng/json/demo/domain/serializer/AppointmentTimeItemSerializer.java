 package com.isuwang.dapeng.json.demo.domain.serializer;
        import com.isuwang.dapeng.json.demo.domain.serializer.*;

        import com.isuwang.dapeng.core.*;
        import com.isuwang.org.apache.thrift.*;
        import com.isuwang.org.apache.thrift.protocol.*;

        import java.util.Optional;
        import java.util.concurrent.CompletableFuture;
        import java.util.concurrent.Future;

        /**
        * Autogenerated by Dapeng-Code-Generator (1.2.2)
        *
        * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
        *  @generated
        **/
        public class AppointmentTimeItemSerializer implements BeanSerializer<com.isuwang.dapeng.json.demo.domain.AppointmentTimeItem>{
        
      @Override
      public com.isuwang.dapeng.json.demo.domain.AppointmentTimeItem read(TProtocol iprot) throws TException{

      com.isuwang.dapeng.json.demo.domain.AppointmentTimeItem bean = new com.isuwang.dapeng.json.demo.domain.AppointmentTimeItem();
      com.isuwang.org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();

      while(true){
        schemeField = iprot.readFieldBegin();
        if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

        switch(schemeField.id){
          
              case 1:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.I32){
               int elem0 = iprot.readI32();
       bean.setId(elem0);
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 2:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.I64){
              long elem0 = iprot.readI64();
       bean.setAppointmentBeginTime(elem0);
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 3:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.I64){
              long elem0 = iprot.readI64();
       bean.setAppointmentEndTime(elem0);
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 4:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.I32){
               int elem0 = iprot.readI32();
       bean.setDoctorId(elem0);
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 5:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.BOOL){
              boolean elem0 = iprot.readBool();
       bean.setAllotted(elem0);
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 6:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.BOOL){
              boolean elem0 = iprot.readBool();
       bean.setAlterable(elem0);
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 7:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.DOUBLE){
               double elem0 = iprot.readDouble();
       bean.setRegistrationAmount(elem0);
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 8:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.DOUBLE){
               double elem0 = iprot.readDouble();
       bean.setDiscountRegistrationAmount(elem0);
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 9:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.DOUBLE){
               double elem0 = iprot.readDouble();
       bean.setDiscount(elem0);
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 10:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.I32){
              com.isuwang.dapeng.json.demo.enums.AppointmentType elem0 = com.isuwang.dapeng.json.demo.enums.AppointmentType.findByValue(iprot.readI32());
       bean.setAppointmentType(elem0);
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 11:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.I32){
              com.isuwang.dapeng.json.demo.enums.TimeInterval elem0 = com.isuwang.dapeng.json.demo.enums.TimeInterval.findByValue(iprot.readI32());
       bean.setTimeInterval(elem0);
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
          
            default:
            com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate(bean);
      return bean;
    }
    
      @Override
      public void write(com.isuwang.dapeng.json.demo.domain.AppointmentTimeItem bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("AppointmentTimeItem"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("id", com.isuwang.org.apache.thrift.protocol.TType.I32, (short) 1));
            Integer elem0 = bean.getId();
            oprot.writeI32(elem0);
            
            oprot.writeFieldEnd();
          
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("appointmentBeginTime", com.isuwang.org.apache.thrift.protocol.TType.I64, (short) 2));
            Long elem1 = bean.getAppointmentBeginTime();
            oprot.writeI64(elem1);
            
            oprot.writeFieldEnd();
          
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("appointmentEndTime", com.isuwang.org.apache.thrift.protocol.TType.I64, (short) 3));
            Long elem2 = bean.getAppointmentEndTime();
            oprot.writeI64(elem2);
            
            oprot.writeFieldEnd();
          
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("doctorId", com.isuwang.org.apache.thrift.protocol.TType.I32, (short) 4));
            Integer elem3 = bean.getDoctorId();
            oprot.writeI32(elem3);
            
            oprot.writeFieldEnd();
          
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("allotted", com.isuwang.org.apache.thrift.protocol.TType.BOOL, (short) 5));
            Boolean elem4 = bean.getAllotted();
            oprot.writeBool(elem4);
            
            oprot.writeFieldEnd();
          
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("alterable", com.isuwang.org.apache.thrift.protocol.TType.BOOL, (short) 6));
            Boolean elem5 = bean.getAlterable();
            oprot.writeBool(elem5);
            
            oprot.writeFieldEnd();
          
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("registrationAmount", com.isuwang.org.apache.thrift.protocol.TType.DOUBLE, (short) 7));
            Double elem6 = bean.getRegistrationAmount();
            oprot.writeDouble(elem6);
            
            oprot.writeFieldEnd();
          
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("discountRegistrationAmount", com.isuwang.org.apache.thrift.protocol.TType.DOUBLE, (short) 8));
            Double elem7 = bean.getDiscountRegistrationAmount();
            oprot.writeDouble(elem7);
            
            oprot.writeFieldEnd();
          
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("discount", com.isuwang.org.apache.thrift.protocol.TType.DOUBLE, (short) 9));
            Double elem8 = bean.getDiscount();
            oprot.writeDouble(elem8);
            
            oprot.writeFieldEnd();
          
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("appointmentType", com.isuwang.org.apache.thrift.protocol.TType.I32, (short) 10));
            com.isuwang.dapeng.json.demo.enums.AppointmentType elem9 = bean.getAppointmentType();
            oprot.writeI32(elem9.getValue());
            
            oprot.writeFieldEnd();
          
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("timeInterval", com.isuwang.org.apache.thrift.protocol.TType.I32, (short) 11));
            com.isuwang.dapeng.json.demo.enums.TimeInterval elem10 = bean.getTimeInterval();
            oprot.writeI32(elem10.getValue());
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(com.isuwang.dapeng.json.demo.domain.AppointmentTimeItem bean) throws TException{
      
              if(bean.getAppointmentType() == null)
              throw new SoaException(SoaBaseCode.NotNull, "appointmentType字段不允许为空");
            
              if(bean.getTimeInterval() == null)
              throw new SoaException(SoaBaseCode.NotNull, "timeInterval字段不允许为空");
            
    }
    
        @Override
        public String toString(com.isuwang.dapeng.json.demo.domain.AppointmentTimeItem bean)
        {return bean == null ? "null" : bean.toString();}
      }
      

      