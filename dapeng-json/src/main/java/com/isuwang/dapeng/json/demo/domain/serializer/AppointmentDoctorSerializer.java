 package com.isuwang.dapeng.json.demo.domain.serializer;
        import com.isuwang.dapeng.json.demo.domain.serializer.*;

        import com.isuwang.dapeng.core.*;
        import com.isuwang.org.apache.thrift.*;
        import com.isuwang.org.apache.thrift.protocol.*;

        import java.util.Optional;
        import java.util.concurrent.CompletableFuture;
        import java.util.concurrent.Future;

        /**
        * Autogenerated by Dapeng-Code-Generator (1.2.2)
        *
        * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
        *  @generated
        **/
        public class AppointmentDoctorSerializer implements BeanSerializer<com.isuwang.dapeng.json.demo.domain.AppointmentDoctor>{
        
      @Override
      public com.isuwang.dapeng.json.demo.domain.AppointmentDoctor read(TProtocol iprot) throws TException{

      com.isuwang.dapeng.json.demo.domain.AppointmentDoctor bean = new com.isuwang.dapeng.json.demo.domain.AppointmentDoctor();
      com.isuwang.org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();

      while(true){
        schemeField = iprot.readFieldBegin();
        if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

        switch(schemeField.id){
          
              case 1:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.I32){
               int elem0 = iprot.readI32();
       bean.setDoctorId(elem0);
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 2:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRING){
              String elem0 = iprot.readString();
       bean.setDoctorName(elem0);
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 3:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRING){
              String elem0 = iprot.readString();
       bean.setHeadImage(Optional.of(elem0));
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 4:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRING){
              String elem0 = iprot.readString();
       bean.setForte(elem0);
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 5:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.I32){
               int elem0 = iprot.readI32();
       bean.setLevel(elem0);
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 6:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.I32){
              com.isuwang.dapeng.json.demo.enums.AppointmentPeriod elem0 = com.isuwang.dapeng.json.demo.enums.AppointmentPeriod.findByValue(iprot.readI32());
       bean.setPeriod(Optional.of(elem0));
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 7:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRING){
              String elem0 = iprot.readString();
       bean.setJobTitle(Optional.of(elem0));
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 8:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRING){
              String elem0 = iprot.readString();
       bean.setJobExperience(Optional.of(elem0));
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 9:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.DOUBLE){
               double elem0 = iprot.readDouble();
       bean.setTherapyAmount(elem0);
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 10:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.DOUBLE){
               double elem0 = iprot.readDouble();
       bean.setDiscountTherapyAmount(elem0);
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 11:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRING){
              String elem0 = iprot.readString();
       bean.setDiscountDesc(Optional.of(elem0));
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 12:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRING){
              String elem0 = iprot.readString();
       bean.setHospitalName(elem0);
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 13:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRING){
              String elem0 = iprot.readString();
       bean.setDepartmentName(elem0);
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 14:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.I32){
              com.isuwang.dapeng.json.demo.enums.AppointmentType elem0 = com.isuwang.dapeng.json.demo.enums.AppointmentType.findByValue(iprot.readI32());
       bean.setAppointmentType(elem0);
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 15:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRING){
              String elem0 = iprot.readString();
       bean.setInfo(Optional.of(elem0));
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
          
            default:
            com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate(bean);
      return bean;
    }
    
      @Override
      public void write(com.isuwang.dapeng.json.demo.domain.AppointmentDoctor bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("AppointmentDoctor"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("doctorId", com.isuwang.org.apache.thrift.protocol.TType.I32, (short) 1));
            Integer elem0 = bean.getDoctorId();
            oprot.writeI32(elem0);
            
            oprot.writeFieldEnd();
          
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("doctorName", com.isuwang.org.apache.thrift.protocol.TType.STRING, (short) 2));
            String elem1 = bean.getDoctorName();
            oprot.writeString(elem1);
            
            oprot.writeFieldEnd();
          if(bean.getHeadImage().isPresent()){
              oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("headImage", com.isuwang.org.apache.thrift.protocol.TType.STRING, (short) 3));
              String elem2 = bean.getHeadImage().get();
              oprot.writeString(elem2);
              
            }
            
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("forte", com.isuwang.org.apache.thrift.protocol.TType.STRING, (short) 4));
            String elem3 = bean.getForte();
            oprot.writeString(elem3);
            
            oprot.writeFieldEnd();
          
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("level", com.isuwang.org.apache.thrift.protocol.TType.I32, (short) 5));
            Integer elem4 = bean.getLevel();
            oprot.writeI32(elem4);
            
            oprot.writeFieldEnd();
          if(bean.getPeriod().isPresent()){
              oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("period", com.isuwang.org.apache.thrift.protocol.TType.I32, (short) 6));
              com.isuwang.dapeng.json.demo.enums.AppointmentPeriod elem5 = bean.getPeriod().get();
              oprot.writeI32(elem5.getValue());
              
            }
            if(bean.getJobTitle().isPresent()){
              oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("jobTitle", com.isuwang.org.apache.thrift.protocol.TType.STRING, (short) 7));
              String elem6 = bean.getJobTitle().get();
              oprot.writeString(elem6);
              
            }
            if(bean.getJobExperience().isPresent()){
              oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("jobExperience", com.isuwang.org.apache.thrift.protocol.TType.STRING, (short) 8));
              String elem7 = bean.getJobExperience().get();
              oprot.writeString(elem7);
              
            }
            
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("therapyAmount", com.isuwang.org.apache.thrift.protocol.TType.DOUBLE, (short) 9));
            Double elem8 = bean.getTherapyAmount();
            oprot.writeDouble(elem8);
            
            oprot.writeFieldEnd();
          
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("discountTherapyAmount", com.isuwang.org.apache.thrift.protocol.TType.DOUBLE, (short) 10));
            Double elem9 = bean.getDiscountTherapyAmount();
            oprot.writeDouble(elem9);
            
            oprot.writeFieldEnd();
          if(bean.getDiscountDesc().isPresent()){
              oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("discountDesc", com.isuwang.org.apache.thrift.protocol.TType.STRING, (short) 11));
              String elem10 = bean.getDiscountDesc().get();
              oprot.writeString(elem10);
              
            }
            
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("hospitalName", com.isuwang.org.apache.thrift.protocol.TType.STRING, (short) 12));
            String elem11 = bean.getHospitalName();
            oprot.writeString(elem11);
            
            oprot.writeFieldEnd();
          
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("departmentName", com.isuwang.org.apache.thrift.protocol.TType.STRING, (short) 13));
            String elem12 = bean.getDepartmentName();
            oprot.writeString(elem12);
            
            oprot.writeFieldEnd();
          
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("appointmentType", com.isuwang.org.apache.thrift.protocol.TType.I32, (short) 14));
            com.isuwang.dapeng.json.demo.enums.AppointmentType elem13 = bean.getAppointmentType();
            oprot.writeI32(elem13.getValue());
            
            oprot.writeFieldEnd();
          if(bean.getInfo().isPresent()){
              oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("info", com.isuwang.org.apache.thrift.protocol.TType.STRING, (short) 15));
              String elem14 = bean.getInfo().get();
              oprot.writeString(elem14);
              
            }
            
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(com.isuwang.dapeng.json.demo.domain.AppointmentDoctor bean) throws TException{
      
              if(bean.getDoctorName() == null)
              throw new SoaException(SoaBaseCode.NotNull, "doctorName字段不允许为空");
            
              if(bean.getForte() == null)
              throw new SoaException(SoaBaseCode.NotNull, "forte字段不允许为空");
            
              if(bean.getHospitalName() == null)
              throw new SoaException(SoaBaseCode.NotNull, "hospitalName字段不允许为空");
            
              if(bean.getDepartmentName() == null)
              throw new SoaException(SoaBaseCode.NotNull, "departmentName字段不允许为空");
            
              if(bean.getAppointmentType() == null)
              throw new SoaException(SoaBaseCode.NotNull, "appointmentType字段不允许为空");
            
    }
    
        @Override
        public String toString(com.isuwang.dapeng.json.demo.domain.AppointmentDoctor bean)
        {return bean == null ? "null" : bean.toString();}
      }
      

      