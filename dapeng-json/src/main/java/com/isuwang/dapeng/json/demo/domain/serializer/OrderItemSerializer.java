 package com.isuwang.dapeng.json.demo.domain.serializer;
        import com.isuwang.dapeng.json.demo.domain.serializer.*;

        import com.isuwang.dapeng.core.*;
        import com.isuwang.org.apache.thrift.*;
        import com.isuwang.org.apache.thrift.protocol.*;

        import java.util.Optional;
        import java.util.concurrent.CompletableFuture;
        import java.util.concurrent.Future;

        /**
        * Autogenerated by Dapeng-Code-Generator (1.2.2)
        *
        * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
        *  @generated
        **/
        public class OrderItemSerializer implements BeanSerializer<com.isuwang.dapeng.json.demo.domain.OrderItem>{
        
      @Override
      public com.isuwang.dapeng.json.demo.domain.OrderItem read(TProtocol iprot) throws TException{

      com.isuwang.dapeng.json.demo.domain.OrderItem bean = new com.isuwang.dapeng.json.demo.domain.OrderItem();
      com.isuwang.org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();

      while(true){
        schemeField = iprot.readFieldBegin();
        if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

        switch(schemeField.id){
          
              case 1:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.I32){
               int elem0 = iprot.readI32();
       bean.setId(elem0);
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 2:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.I32){
               int elem0 = iprot.readI32();
       bean.setDoctorId(elem0);
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 3:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.I32){
               int elem0 = iprot.readI32();
       bean.setPatientId(elem0);
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 4:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRING){
              String elem0 = iprot.readString();
       bean.setPatientInformationContent(Optional.of(elem0));
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 5:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.I32){
               int elem0 = iprot.readI32();
       bean.setDiagnoseId(Optional.of(elem0));
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 6:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.I32){
               int elem0 = iprot.readI32();
       bean.setAppointmentId(elem0);
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 7:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.I32){
              com.isuwang.dapeng.json.demo.enums.TOrderStatus elem0 = com.isuwang.dapeng.json.demo.enums.TOrderStatus.findByValue(iprot.readI32());
       bean.setStatus(elem0);
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 8:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.DOUBLE){
               double elem0 = iprot.readDouble();
       bean.setTherapyAmount(elem0);
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 9:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.DOUBLE){
               double elem0 = iprot.readDouble();
       bean.setDiscountTherapyAmount(elem0);
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 10:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.I64){
              long elem0 = iprot.readI64();
       bean.setRegistrationExpireTime(elem0);
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 11:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.I64){
              long elem0 = iprot.readI64();
       bean.setTherapyBeginTime(elem0);
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 12:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.I64){
              long elem0 = iprot.readI64();
       bean.setTherapyEndTime(elem0);
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 13:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.I64){
              long elem0 = iprot.readI64();
       bean.setCreatedAt(elem0);
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 14:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.I32){
               int elem0 = iprot.readI32();
       bean.setCreatedBy(elem0);
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 15:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.I64){
              long elem0 = iprot.readI64();
       bean.setUpdatedAt(elem0);
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 16:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.I32){
               int elem0 = iprot.readI32();
       bean.setUpdatedBy(elem0);
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 17:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRING){
              String elem0 = iprot.readString();
       bean.setRemark(Optional.of(elem0));
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 18:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRING){
              String elem0 = iprot.readString();
       bean.setTransactionId(Optional.of(elem0));
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 19:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRING){
              String elem0 = iprot.readString();
       bean.setOrderNum(elem0);
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 20:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.I32){
              com.isuwang.dapeng.json.demo.enums.TOrderPayType elem0 = com.isuwang.dapeng.json.demo.enums.TOrderPayType.findByValue(iprot.readI32());
       bean.setPayType(elem0);
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 21:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.I64){
              long elem0 = iprot.readI64();
       bean.setExpireRemainSeconds(Optional.of(elem0));
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 22:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.I32){
              com.isuwang.dapeng.json.demo.enums.AppointmentType elem0 = com.isuwang.dapeng.json.demo.enums.AppointmentType.findByValue(iprot.readI32());
       bean.setAppointmentType(elem0);
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 24:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRUCT){
              com.isuwang.dapeng.json.demo.domain.DoctorInfo elem0 = new com.isuwang.dapeng.json.demo.domain.DoctorInfo();
        elem0=new com.isuwang.dapeng.json.demo.domain.serializer.DoctorInfoSerializer().read(iprot);
       bean.setDoctorInfo(elem0);
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 25:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRUCT){
              com.isuwang.dapeng.json.demo.domain.PatientInfo elem0 = new com.isuwang.dapeng.json.demo.domain.PatientInfo();
        elem0=new com.isuwang.dapeng.json.demo.domain.serializer.PatientInfoSerializer().read(iprot);
       bean.setPatientInfo(elem0);
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 26:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.I32){
               int elem0 = iprot.readI32();
       bean.setParentId(Optional.of(elem0));
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 27:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.I32){
               int elem0 = iprot.readI32();
       bean.setOfflinePatientId(Optional.of(elem0));
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 28:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.I32){
              com.isuwang.dapeng.json.demo.enums.TOrderTherapyMode elem0 = com.isuwang.dapeng.json.demo.enums.TOrderTherapyMode.findByValue(iprot.readI32());
       bean.setTherapyMode(elem0);
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 29:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRING){
              String elem0 = iprot.readString();
       bean.setUuid(Optional.of(elem0));
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 30:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.BOOL){
              boolean elem0 = iprot.readBool();
       bean.setRead(Optional.of(elem0));
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 31:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.I32){
              com.isuwang.dapeng.json.demo.enums.AccompanyPackEnum elem0 = com.isuwang.dapeng.json.demo.enums.AccompanyPackEnum.findByValue(iprot.readI32());
       bean.setAccompanyPackDays(Optional.of(elem0));
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 32:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.DOUBLE){
               double elem0 = iprot.readDouble();
       bean.setCouponAmount(elem0);
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
          
            default:
            com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate(bean);
      return bean;
    }
    
      @Override
      public void write(com.isuwang.dapeng.json.demo.domain.OrderItem bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("OrderItem"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("id", com.isuwang.org.apache.thrift.protocol.TType.I32, (short) 1));
            Integer elem0 = bean.getId();
            oprot.writeI32(elem0);
            
            oprot.writeFieldEnd();
          
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("doctorId", com.isuwang.org.apache.thrift.protocol.TType.I32, (short) 2));
            Integer elem1 = bean.getDoctorId();
            oprot.writeI32(elem1);
            
            oprot.writeFieldEnd();
          
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("patientId", com.isuwang.org.apache.thrift.protocol.TType.I32, (short) 3));
            Integer elem2 = bean.getPatientId();
            oprot.writeI32(elem2);
            
            oprot.writeFieldEnd();
          if(bean.getPatientInformationContent().isPresent()){
              oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("patientInformationContent", com.isuwang.org.apache.thrift.protocol.TType.STRING, (short) 4));
              String elem3 = bean.getPatientInformationContent().get();
              oprot.writeString(elem3);
              
            }
            if(bean.getDiagnoseId().isPresent()){
              oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("diagnoseId", com.isuwang.org.apache.thrift.protocol.TType.I32, (short) 5));
              Integer elem4 = bean.getDiagnoseId().get();
              oprot.writeI32(elem4);
              
            }
            
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("appointmentId", com.isuwang.org.apache.thrift.protocol.TType.I32, (short) 6));
            Integer elem5 = bean.getAppointmentId();
            oprot.writeI32(elem5);
            
            oprot.writeFieldEnd();
          
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("status", com.isuwang.org.apache.thrift.protocol.TType.I32, (short) 7));
            com.isuwang.dapeng.json.demo.enums.TOrderStatus elem6 = bean.getStatus();
            oprot.writeI32(elem6.getValue());
            
            oprot.writeFieldEnd();
          
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("therapyAmount", com.isuwang.org.apache.thrift.protocol.TType.DOUBLE, (short) 8));
            Double elem7 = bean.getTherapyAmount();
            oprot.writeDouble(elem7);
            
            oprot.writeFieldEnd();
          
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("discountTherapyAmount", com.isuwang.org.apache.thrift.protocol.TType.DOUBLE, (short) 9));
            Double elem8 = bean.getDiscountTherapyAmount();
            oprot.writeDouble(elem8);
            
            oprot.writeFieldEnd();
          
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("registrationExpireTime", com.isuwang.org.apache.thrift.protocol.TType.I64, (short) 10));
            Long elem9 = bean.getRegistrationExpireTime();
            oprot.writeI64(elem9);
            
            oprot.writeFieldEnd();
          
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("therapyBeginTime", com.isuwang.org.apache.thrift.protocol.TType.I64, (short) 11));
            Long elem10 = bean.getTherapyBeginTime();
            oprot.writeI64(elem10);
            
            oprot.writeFieldEnd();
          
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("therapyEndTime", com.isuwang.org.apache.thrift.protocol.TType.I64, (short) 12));
            Long elem11 = bean.getTherapyEndTime();
            oprot.writeI64(elem11);
            
            oprot.writeFieldEnd();
          
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("createdAt", com.isuwang.org.apache.thrift.protocol.TType.I64, (short) 13));
            Long elem12 = bean.getCreatedAt();
            oprot.writeI64(elem12);
            
            oprot.writeFieldEnd();
          
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("createdBy", com.isuwang.org.apache.thrift.protocol.TType.I32, (short) 14));
            Integer elem13 = bean.getCreatedBy();
            oprot.writeI32(elem13);
            
            oprot.writeFieldEnd();
          
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("updatedAt", com.isuwang.org.apache.thrift.protocol.TType.I64, (short) 15));
            Long elem14 = bean.getUpdatedAt();
            oprot.writeI64(elem14);
            
            oprot.writeFieldEnd();
          
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("updatedBy", com.isuwang.org.apache.thrift.protocol.TType.I32, (short) 16));
            Integer elem15 = bean.getUpdatedBy();
            oprot.writeI32(elem15);
            
            oprot.writeFieldEnd();
          if(bean.getRemark().isPresent()){
              oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("remark", com.isuwang.org.apache.thrift.protocol.TType.STRING, (short) 17));
              String elem16 = bean.getRemark().get();
              oprot.writeString(elem16);
              
            }
            if(bean.getTransactionId().isPresent()){
              oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("transactionId", com.isuwang.org.apache.thrift.protocol.TType.STRING, (short) 18));
              String elem17 = bean.getTransactionId().get();
              oprot.writeString(elem17);
              
            }
            
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("orderNum", com.isuwang.org.apache.thrift.protocol.TType.STRING, (short) 19));
            String elem18 = bean.getOrderNum();
            oprot.writeString(elem18);
            
            oprot.writeFieldEnd();
          
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("payType", com.isuwang.org.apache.thrift.protocol.TType.I32, (short) 20));
            com.isuwang.dapeng.json.demo.enums.TOrderPayType elem19 = bean.getPayType();
            oprot.writeI32(elem19.getValue());
            
            oprot.writeFieldEnd();
          if(bean.getExpireRemainSeconds().isPresent()){
              oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("expireRemainSeconds", com.isuwang.org.apache.thrift.protocol.TType.I64, (short) 21));
              Long elem20 = bean.getExpireRemainSeconds().get();
              oprot.writeI64(elem20);
              
            }
            
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("appointmentType", com.isuwang.org.apache.thrift.protocol.TType.I32, (short) 22));
            com.isuwang.dapeng.json.demo.enums.AppointmentType elem21 = bean.getAppointmentType();
            oprot.writeI32(elem21.getValue());
            
            oprot.writeFieldEnd();
          
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("doctorInfo", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, (short) 24));
            com.isuwang.dapeng.json.demo.domain.DoctorInfo elem22 = bean.getDoctorInfo();
             new com.isuwang.dapeng.json.demo.domain.serializer.DoctorInfoSerializer().write(elem22, oprot);
            
            oprot.writeFieldEnd();
          
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("patientInfo", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, (short) 25));
            com.isuwang.dapeng.json.demo.domain.PatientInfo elem23 = bean.getPatientInfo();
             new com.isuwang.dapeng.json.demo.domain.serializer.PatientInfoSerializer().write(elem23, oprot);
            
            oprot.writeFieldEnd();
          if(bean.getParentId().isPresent()){
              oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("parentId", com.isuwang.org.apache.thrift.protocol.TType.I32, (short) 26));
              Integer elem24 = bean.getParentId().get();
              oprot.writeI32(elem24);
              
            }
            if(bean.getOfflinePatientId().isPresent()){
              oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("offlinePatientId", com.isuwang.org.apache.thrift.protocol.TType.I32, (short) 27));
              Integer elem25 = bean.getOfflinePatientId().get();
              oprot.writeI32(elem25);
              
            }
            
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("therapyMode", com.isuwang.org.apache.thrift.protocol.TType.I32, (short) 28));
            com.isuwang.dapeng.json.demo.enums.TOrderTherapyMode elem26 = bean.getTherapyMode();
            oprot.writeI32(elem26.getValue());
            
            oprot.writeFieldEnd();
          if(bean.getUuid().isPresent()){
              oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("uuid", com.isuwang.org.apache.thrift.protocol.TType.STRING, (short) 29));
              String elem27 = bean.getUuid().get();
              oprot.writeString(elem27);
              
            }
            if(bean.getRead().isPresent()){
              oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("read", com.isuwang.org.apache.thrift.protocol.TType.BOOL, (short) 30));
              Boolean elem28 = bean.getRead().get();
              oprot.writeBool(elem28);
              
            }
            if(bean.getAccompanyPackDays().isPresent()){
              oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("accompanyPackDays", com.isuwang.org.apache.thrift.protocol.TType.I32, (short) 31));
              com.isuwang.dapeng.json.demo.enums.AccompanyPackEnum elem29 = bean.getAccompanyPackDays().get();
              oprot.writeI32(elem29.getValue());
              
            }
            
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("couponAmount", com.isuwang.org.apache.thrift.protocol.TType.DOUBLE, (short) 32));
            Double elem30 = bean.getCouponAmount();
            oprot.writeDouble(elem30);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(com.isuwang.dapeng.json.demo.domain.OrderItem bean) throws TException{
      
              if(bean.getStatus() == null)
              throw new SoaException(SoaBaseCode.NotNull, "status字段不允许为空");
            
              if(bean.getOrderNum() == null)
              throw new SoaException(SoaBaseCode.NotNull, "orderNum字段不允许为空");
            
              if(bean.getPayType() == null)
              throw new SoaException(SoaBaseCode.NotNull, "payType字段不允许为空");
            
              if(bean.getAppointmentType() == null)
              throw new SoaException(SoaBaseCode.NotNull, "appointmentType字段不允许为空");
            
              if(bean.getDoctorInfo() == null)
              throw new SoaException(SoaBaseCode.NotNull, "doctorInfo字段不允许为空");
            
                if(bean.getDoctorInfo() != null)
                new com.isuwang.dapeng.json.demo.domain.serializer.DoctorInfoSerializer().validate(bean.getDoctorInfo());
              
              if(bean.getPatientInfo() == null)
              throw new SoaException(SoaBaseCode.NotNull, "patientInfo字段不允许为空");
            
                if(bean.getPatientInfo() != null)
                new com.isuwang.dapeng.json.demo.domain.serializer.PatientInfoSerializer().validate(bean.getPatientInfo());
              
              if(bean.getTherapyMode() == null)
              throw new SoaException(SoaBaseCode.NotNull, "therapyMode字段不允许为空");
            
    }
    
        @Override
        public String toString(com.isuwang.dapeng.json.demo.domain.OrderItem bean)
        {return bean == null ? "null" : bean.toString();}
      }
      

      