 package com.isuwang.dapeng.json.demo.domain.serializer;
        import com.isuwang.dapeng.json.demo.domain.serializer.*;

        import com.isuwang.dapeng.core.*;
        import com.isuwang.org.apache.thrift.*;
        import com.isuwang.org.apache.thrift.protocol.*;

        import java.util.Optional;
        import java.util.concurrent.CompletableFuture;
        import java.util.concurrent.Future;

        /**
        * Autogenerated by Dapeng-Code-Generator (1.2.2)
        *
        * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
        *  @generated
        **/
        public class CreateAppointmentForAvailableRequestSerializer implements BeanSerializer<com.isuwang.dapeng.json.demo.domain.CreateAppointmentForAvailableRequest>{
        
      @Override
      public com.isuwang.dapeng.json.demo.domain.CreateAppointmentForAvailableRequest read(TProtocol iprot) throws TException{

      com.isuwang.dapeng.json.demo.domain.CreateAppointmentForAvailableRequest bean = new com.isuwang.dapeng.json.demo.domain.CreateAppointmentForAvailableRequest();
      com.isuwang.org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();

      while(true){
        schemeField = iprot.readFieldBegin();
        if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

        switch(schemeField.id){
          
              case 1:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.I32){
               int elem0 = iprot.readI32();
       bean.setDoctorId(elem0);
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 2:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.LIST){
               com.isuwang.org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
        java.util.List<String> elem0 = new java.util.ArrayList<>(_list0.size);
        for(int _i0 = 0; _i0 < _list0.size; ++ _i0){
          String elem1 = iprot.readString();
          elem0.add(elem1);
        }
        iprot.readListEnd();
       bean.setAppointmentDate(elem0);
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 3:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRUCT){
              com.isuwang.dapeng.json.demo.domain.PageRequest elem0 = new com.isuwang.dapeng.json.demo.domain.PageRequest();
        elem0=new com.isuwang.dapeng.json.demo.domain.serializer.PageRequestSerializer().read(iprot);
       bean.setPageRequest(elem0);
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 4:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.SET){
              com.isuwang.org.apache.thrift.protocol.TSet _set0 = iprot.readSetBegin();
        java.util.Set<com.isuwang.dapeng.json.demo.domain.CreateOrderRequest> elem0 = new java.util.HashSet<>(_set0.size);
        for(int _i0 = 0; _i0 < _set0.size; ++ _i0){
          com.isuwang.dapeng.json.demo.domain.CreateOrderRequest elem1 = new com.isuwang.dapeng.json.demo.domain.CreateOrderRequest();
        elem1=new com.isuwang.dapeng.json.demo.domain.serializer.CreateOrderRequestSerializer().read(iprot);
          elem0.add(elem1);
        }
        iprot.readSetEnd();
      
       bean.setRequests(elem0);
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 5:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.LIST){
               com.isuwang.org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
        java.util.List<java.util.List<com.isuwang.dapeng.json.demo.domain.CreateOrderRequest>> elem0 = new java.util.ArrayList<>(_list0.size);
        for(int _i0 = 0; _i0 < _list0.size; ++ _i0){
           com.isuwang.org.apache.thrift.protocol.TList _list1 = iprot.readListBegin();
        java.util.List<com.isuwang.dapeng.json.demo.domain.CreateOrderRequest> elem1 = new java.util.ArrayList<>(_list1.size);
        for(int _i1 = 0; _i1 < _list1.size; ++ _i1){
          com.isuwang.dapeng.json.demo.domain.CreateOrderRequest elem2 = new com.isuwang.dapeng.json.demo.domain.CreateOrderRequest();
        elem2=new com.isuwang.dapeng.json.demo.domain.serializer.CreateOrderRequestSerializer().read(iprot);
          elem1.add(elem2);
        }
        iprot.readListEnd();
          elem0.add(elem1);
        }
        iprot.readListEnd();
       bean.setRequestLists(elem0);
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
          
            default:
            com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate(bean);
      return bean;
    }
    
      @Override
      public void write(com.isuwang.dapeng.json.demo.domain.CreateAppointmentForAvailableRequest bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("CreateAppointmentForAvailableRequest"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("doctorId", com.isuwang.org.apache.thrift.protocol.TType.I32, (short) 1));
            Integer elem0 = bean.getDoctorId();
            oprot.writeI32(elem0);
            
            oprot.writeFieldEnd();
          
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("appointmentDate", com.isuwang.org.apache.thrift.protocol.TType.LIST, (short) 2));
            java.util.List<String> elem1 = bean.getAppointmentDate();
            
          oprot.writeListBegin(new com.isuwang.org.apache.thrift.protocol.TList(com.isuwang.org.apache.thrift.protocol.TType.STRING, elem1.size()));
          for(String elem2 : elem1){
          oprot.writeString(elem2);
        }
          oprot.writeListEnd();
        
            
            oprot.writeFieldEnd();
          
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("pageRequest", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, (short) 3));
            com.isuwang.dapeng.json.demo.domain.PageRequest elem2 = bean.getPageRequest();
             new com.isuwang.dapeng.json.demo.domain.serializer.PageRequestSerializer().write(elem2, oprot);
            
            oprot.writeFieldEnd();
          
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("requests", com.isuwang.org.apache.thrift.protocol.TType.SET, (short) 4));
            java.util.Set<com.isuwang.dapeng.json.demo.domain.CreateOrderRequest> elem3 = bean.getRequests();
            
            oprot.writeSetBegin(new com.isuwang.org.apache.thrift.protocol.TSet(com.isuwang.org.apache.thrift.protocol.TType.STRUCT, elem3.size()));
            for(com.isuwang.dapeng.json.demo.domain.CreateOrderRequest elem4 : elem3){
             new com.isuwang.dapeng.json.demo.domain.serializer.CreateOrderRequestSerializer().write(elem4, oprot);
          }
            oprot.writeSetEnd();
          
            
            oprot.writeFieldEnd();
          
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("requestLists", com.isuwang.org.apache.thrift.protocol.TType.LIST, (short) 5));
            java.util.List<java.util.List<com.isuwang.dapeng.json.demo.domain.CreateOrderRequest>> elem4 = bean.getRequestLists();
            
          oprot.writeListBegin(new com.isuwang.org.apache.thrift.protocol.TList(com.isuwang.org.apache.thrift.protocol.TType.LIST, elem4.size()));
          for(java.util.List<com.isuwang.dapeng.json.demo.domain.CreateOrderRequest> elem5 : elem4){
          
          oprot.writeListBegin(new com.isuwang.org.apache.thrift.protocol.TList(com.isuwang.org.apache.thrift.protocol.TType.STRUCT, elem5.size()));
          for(com.isuwang.dapeng.json.demo.domain.CreateOrderRequest elem6 : elem5){
           new com.isuwang.dapeng.json.demo.domain.serializer.CreateOrderRequestSerializer().write(elem6, oprot);
        }
          oprot.writeListEnd();
        
        }
          oprot.writeListEnd();
        
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(com.isuwang.dapeng.json.demo.domain.CreateAppointmentForAvailableRequest bean) throws TException{
      
              if(bean.getAppointmentDate() == null)
              throw new SoaException(SoaBaseCode.NotNull, "appointmentDate字段不允许为空");
            
              if(bean.getPageRequest() == null)
              throw new SoaException(SoaBaseCode.NotNull, "pageRequest字段不允许为空");
            
                if(bean.getPageRequest() != null)
                new com.isuwang.dapeng.json.demo.domain.serializer.PageRequestSerializer().validate(bean.getPageRequest());
              
              if(bean.getRequests() == null)
              throw new SoaException(SoaBaseCode.NotNull, "requests字段不允许为空");
            
              if(bean.getRequestLists() == null)
              throw new SoaException(SoaBaseCode.NotNull, "requestLists字段不允许为空");
            
    }
    
        @Override
        public String toString(com.isuwang.dapeng.json.demo.domain.CreateAppointmentForAvailableRequest bean)
        {return bean == null ? "null" : bean.toString();}
      }
      

      