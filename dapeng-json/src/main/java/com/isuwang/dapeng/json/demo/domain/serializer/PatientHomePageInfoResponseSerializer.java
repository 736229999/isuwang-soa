 package com.isuwang.dapeng.json.demo.domain.serializer;
        import com.isuwang.dapeng.json.demo.domain.serializer.*;

        import com.isuwang.dapeng.core.*;
        import com.isuwang.org.apache.thrift.*;
        import com.isuwang.org.apache.thrift.protocol.*;

        import java.util.Optional;
        import java.util.concurrent.CompletableFuture;
        import java.util.concurrent.Future;

        /**
        * Autogenerated by Dapeng-Code-Generator (1.2.2)
        *
        * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
        *  @generated
        **/
        public class PatientHomePageInfoResponseSerializer implements BeanSerializer<com.isuwang.dapeng.json.demo.domain.PatientHomePageInfoResponse>{
        
      @Override
      public com.isuwang.dapeng.json.demo.domain.PatientHomePageInfoResponse read(TProtocol iprot) throws TException{

      com.isuwang.dapeng.json.demo.domain.PatientHomePageInfoResponse bean = new com.isuwang.dapeng.json.demo.domain.PatientHomePageInfoResponse();
      com.isuwang.org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();

      while(true){
        schemeField = iprot.readFieldBegin();
        if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

        switch(schemeField.id){
          
              case 1:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRUCT){
              com.isuwang.dapeng.json.demo.domain.PatientHomePageAppointment elem0 = new com.isuwang.dapeng.json.demo.domain.PatientHomePageAppointment();
        elem0=new com.isuwang.dapeng.json.demo.domain.serializer.PatientHomePageAppointmentSerializer().read(iprot);
       bean.setFirstDoctor(Optional.of(elem0));
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 2:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRUCT){
              com.isuwang.dapeng.json.demo.domain.PatientHomePageAppointment elem0 = new com.isuwang.dapeng.json.demo.domain.PatientHomePageAppointment();
        elem0=new com.isuwang.dapeng.json.demo.domain.serializer.PatientHomePageAppointmentSerializer().read(iprot);
       bean.setAppointment(Optional.of(elem0));
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 3:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRUCT){
              com.isuwang.dapeng.json.demo.domain.PatientHomePageAppointment elem0 = new com.isuwang.dapeng.json.demo.domain.PatientHomePageAppointment();
        elem0=new com.isuwang.dapeng.json.demo.domain.serializer.PatientHomePageAppointmentSerializer().read(iprot);
       bean.setAttendingDoctor(Optional.of(elem0));
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 4:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRUCT){
              com.isuwang.dapeng.json.demo.domain.PatientHomePageAppointment elem0 = new com.isuwang.dapeng.json.demo.domain.PatientHomePageAppointment();
        elem0=new com.isuwang.dapeng.json.demo.domain.serializer.PatientHomePageAppointmentSerializer().read(iprot);
       bean.setFirstPsychologist(Optional.of(elem0));
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 5:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRUCT){
              com.isuwang.dapeng.json.demo.domain.PatientHomePageAppointment elem0 = new com.isuwang.dapeng.json.demo.domain.PatientHomePageAppointment();
        elem0=new com.isuwang.dapeng.json.demo.domain.serializer.PatientHomePageAppointmentSerializer().read(iprot);
       bean.setLastPsychologist(Optional.of(elem0));
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 6:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRUCT){
              com.isuwang.dapeng.json.demo.domain.PatientHomePageAppointment elem0 = new com.isuwang.dapeng.json.demo.domain.PatientHomePageAppointment();
        elem0=new com.isuwang.dapeng.json.demo.domain.serializer.PatientHomePageAppointmentSerializer().read(iprot);
       bean.setPsychologistAppointment(Optional.of(elem0));
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 7:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRUCT){
              com.isuwang.dapeng.json.demo.domain.PatientHomePageArticle elem0 = new com.isuwang.dapeng.json.demo.domain.PatientHomePageArticle();
        elem0=new com.isuwang.dapeng.json.demo.domain.serializer.PatientHomePageArticleSerializer().read(iprot);
       bean.setArticle(Optional.of(elem0));
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 8:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.LIST){
               com.isuwang.org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
        java.util.List<com.isuwang.dapeng.json.demo.domain.XZHelperItem> elem0 = new java.util.ArrayList<>(_list0.size);
        for(int _i0 = 0; _i0 < _list0.size; ++ _i0){
          com.isuwang.dapeng.json.demo.domain.XZHelperItem elem1 = new com.isuwang.dapeng.json.demo.domain.XZHelperItem();
        elem1=new com.isuwang.dapeng.json.demo.domain.serializer.XZHelperItemSerializer().read(iprot);
          elem0.add(elem1);
        }
        iprot.readListEnd();
       bean.setXinzhiHelperArticle(Optional.of(elem0));
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
          
            default:
            com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate(bean);
      return bean;
    }
    
      @Override
      public void write(com.isuwang.dapeng.json.demo.domain.PatientHomePageInfoResponse bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("PatientHomePageInfoResponse"));

      if(bean.getFirstDoctor().isPresent()){
              oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("firstDoctor", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, (short) 1));
              com.isuwang.dapeng.json.demo.domain.PatientHomePageAppointment elem0 = bean.getFirstDoctor().get();
               new com.isuwang.dapeng.json.demo.domain.serializer.PatientHomePageAppointmentSerializer().write(elem0, oprot);
              
            }
            if(bean.getAppointment().isPresent()){
              oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("appointment", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, (short) 2));
              com.isuwang.dapeng.json.demo.domain.PatientHomePageAppointment elem1 = bean.getAppointment().get();
               new com.isuwang.dapeng.json.demo.domain.serializer.PatientHomePageAppointmentSerializer().write(elem1, oprot);
              
            }
            if(bean.getAttendingDoctor().isPresent()){
              oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("attendingDoctor", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, (short) 3));
              com.isuwang.dapeng.json.demo.domain.PatientHomePageAppointment elem2 = bean.getAttendingDoctor().get();
               new com.isuwang.dapeng.json.demo.domain.serializer.PatientHomePageAppointmentSerializer().write(elem2, oprot);
              
            }
            if(bean.getFirstPsychologist().isPresent()){
              oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("firstPsychologist", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, (short) 4));
              com.isuwang.dapeng.json.demo.domain.PatientHomePageAppointment elem3 = bean.getFirstPsychologist().get();
               new com.isuwang.dapeng.json.demo.domain.serializer.PatientHomePageAppointmentSerializer().write(elem3, oprot);
              
            }
            if(bean.getLastPsychologist().isPresent()){
              oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("lastPsychologist", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, (short) 5));
              com.isuwang.dapeng.json.demo.domain.PatientHomePageAppointment elem4 = bean.getLastPsychologist().get();
               new com.isuwang.dapeng.json.demo.domain.serializer.PatientHomePageAppointmentSerializer().write(elem4, oprot);
              
            }
            if(bean.getPsychologistAppointment().isPresent()){
              oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("psychologistAppointment", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, (short) 6));
              com.isuwang.dapeng.json.demo.domain.PatientHomePageAppointment elem5 = bean.getPsychologistAppointment().get();
               new com.isuwang.dapeng.json.demo.domain.serializer.PatientHomePageAppointmentSerializer().write(elem5, oprot);
              
            }
            if(bean.getArticle().isPresent()){
              oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("article", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, (short) 7));
              com.isuwang.dapeng.json.demo.domain.PatientHomePageArticle elem6 = bean.getArticle().get();
               new com.isuwang.dapeng.json.demo.domain.serializer.PatientHomePageArticleSerializer().write(elem6, oprot);
              
            }
            if(bean.getXinzhiHelperArticle().isPresent()){
              oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("xinzhiHelperArticle", com.isuwang.org.apache.thrift.protocol.TType.LIST, (short) 8));
              java.util.List<com.isuwang.dapeng.json.demo.domain.XZHelperItem> elem7 = bean.getXinzhiHelperArticle().get();
              
          oprot.writeListBegin(new com.isuwang.org.apache.thrift.protocol.TList(com.isuwang.org.apache.thrift.protocol.TType.STRUCT, elem7.size()));
          for(com.isuwang.dapeng.json.demo.domain.XZHelperItem elem8 : elem7){
           new com.isuwang.dapeng.json.demo.domain.serializer.XZHelperItemSerializer().write(elem8, oprot);
        }
          oprot.writeListEnd();
        
              
            }
            
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(com.isuwang.dapeng.json.demo.domain.PatientHomePageInfoResponse bean) throws TException{
      
                if(bean.getFirstDoctor().isPresent())
                new com.isuwang.dapeng.json.demo.domain.serializer.PatientHomePageAppointmentSerializer().validate(bean.getFirstDoctor().get());
              
                if(bean.getAppointment().isPresent())
                new com.isuwang.dapeng.json.demo.domain.serializer.PatientHomePageAppointmentSerializer().validate(bean.getAppointment().get());
              
                if(bean.getAttendingDoctor().isPresent())
                new com.isuwang.dapeng.json.demo.domain.serializer.PatientHomePageAppointmentSerializer().validate(bean.getAttendingDoctor().get());
              
                if(bean.getFirstPsychologist().isPresent())
                new com.isuwang.dapeng.json.demo.domain.serializer.PatientHomePageAppointmentSerializer().validate(bean.getFirstPsychologist().get());
              
                if(bean.getLastPsychologist().isPresent())
                new com.isuwang.dapeng.json.demo.domain.serializer.PatientHomePageAppointmentSerializer().validate(bean.getLastPsychologist().get());
              
                if(bean.getPsychologistAppointment().isPresent())
                new com.isuwang.dapeng.json.demo.domain.serializer.PatientHomePageAppointmentSerializer().validate(bean.getPsychologistAppointment().get());
              
                if(bean.getArticle().isPresent())
                new com.isuwang.dapeng.json.demo.domain.serializer.PatientHomePageArticleSerializer().validate(bean.getArticle().get());
              
    }
    
        @Override
        public String toString(com.isuwang.dapeng.json.demo.domain.PatientHomePageInfoResponse bean)
        {return bean == null ? "null" : bean.toString();}
      }
      

      