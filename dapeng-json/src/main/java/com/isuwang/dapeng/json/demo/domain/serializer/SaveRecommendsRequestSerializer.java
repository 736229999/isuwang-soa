 package com.isuwang.dapeng.json.demo.domain.serializer;
        import com.isuwang.dapeng.json.demo.domain.serializer.*;

        import com.isuwang.dapeng.core.*;
        import com.isuwang.org.apache.thrift.*;
        import com.isuwang.org.apache.thrift.protocol.*;

        import java.util.Optional;
        import java.util.concurrent.CompletableFuture;
        import java.util.concurrent.Future;

        /**
        * Autogenerated by Dapeng-Code-Generator (1.2.2)
        *
        * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
        *  @generated
        **/
        public class SaveRecommendsRequestSerializer implements BeanSerializer<com.isuwang.dapeng.json.demo.domain.SaveRecommendsRequest>{
        
      @Override
      public com.isuwang.dapeng.json.demo.domain.SaveRecommendsRequest read(TProtocol iprot) throws TException{

      com.isuwang.dapeng.json.demo.domain.SaveRecommendsRequest bean = new com.isuwang.dapeng.json.demo.domain.SaveRecommendsRequest();
      com.isuwang.org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();

      while(true){
        schemeField = iprot.readFieldBegin();
        if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

        switch(schemeField.id){
          
              case 1:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.I32){
               int elem0 = iprot.readI32();
       bean.setPatientId(elem0);
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 2:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.I32){
               int elem0 = iprot.readI32();
       bean.setOrderId(elem0);
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 3:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.I32){
              com.isuwang.dapeng.json.demo.enums.RecommendTypeEnum elem0 = com.isuwang.dapeng.json.demo.enums.RecommendTypeEnum.findByValue(iprot.readI32());
       bean.setRecommendType(elem0);
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 4:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.LIST){
               com.isuwang.org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
        java.util.List<Integer> elem0 = new java.util.ArrayList<>(_list0.size);
        for(int _i0 = 0; _i0 < _list0.size; ++ _i0){
           int elem1 = iprot.readI32();
          elem0.add(elem1);
        }
        iprot.readListEnd();
       bean.setRecDoctorIds(Optional.of(elem0));
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 5:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.LIST){
               com.isuwang.org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
        java.util.List<String> elem0 = new java.util.ArrayList<>(_list0.size);
        for(int _i0 = 0; _i0 < _list0.size; ++ _i0){
          String elem1 = iprot.readString();
          elem0.add(elem1);
        }
        iprot.readListEnd();
       bean.setRecTitleCategory(Optional.of(elem0));
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 6:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.I32){
               int elem0 = iprot.readI32();
       bean.setRecommendBy(elem0);
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
          
            default:
            com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate(bean);
      return bean;
    }
    
      @Override
      public void write(com.isuwang.dapeng.json.demo.domain.SaveRecommendsRequest bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("SaveRecommendsRequest"));

      
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("patientId", com.isuwang.org.apache.thrift.protocol.TType.I32, (short) 1));
            Integer elem0 = bean.getPatientId();
            oprot.writeI32(elem0);
            
            oprot.writeFieldEnd();
          
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("orderId", com.isuwang.org.apache.thrift.protocol.TType.I32, (short) 2));
            Integer elem1 = bean.getOrderId();
            oprot.writeI32(elem1);
            
            oprot.writeFieldEnd();
          
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("recommendType", com.isuwang.org.apache.thrift.protocol.TType.I32, (short) 3));
            com.isuwang.dapeng.json.demo.enums.RecommendTypeEnum elem2 = bean.getRecommendType();
            oprot.writeI32(elem2.getValue());
            
            oprot.writeFieldEnd();
          if(bean.getRecDoctorIds().isPresent()){
              oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("recDoctorIds", com.isuwang.org.apache.thrift.protocol.TType.LIST, (short) 4));
              java.util.List<Integer> elem3 = bean.getRecDoctorIds().get();
              
          oprot.writeListBegin(new com.isuwang.org.apache.thrift.protocol.TList(com.isuwang.org.apache.thrift.protocol.TType.I32, elem3.size()));
          for(Integer elem4 : elem3){
          oprot.writeI32(elem4);
        }
          oprot.writeListEnd();
        
              
            }
            if(bean.getRecTitleCategory().isPresent()){
              oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("recTitleCategory", com.isuwang.org.apache.thrift.protocol.TType.LIST, (short) 5));
              java.util.List<String> elem4 = bean.getRecTitleCategory().get();
              
          oprot.writeListBegin(new com.isuwang.org.apache.thrift.protocol.TList(com.isuwang.org.apache.thrift.protocol.TType.STRING, elem4.size()));
          for(String elem5 : elem4){
          oprot.writeString(elem5);
        }
          oprot.writeListEnd();
        
              
            }
            
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("recommendBy", com.isuwang.org.apache.thrift.protocol.TType.I32, (short) 6));
            Integer elem5 = bean.getRecommendBy();
            oprot.writeI32(elem5);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(com.isuwang.dapeng.json.demo.domain.SaveRecommendsRequest bean) throws TException{
      
              if(bean.getRecommendType() == null)
              throw new SoaException(SoaBaseCode.NotNull, "recommendType字段不允许为空");
            
    }
    
        @Override
        public String toString(com.isuwang.dapeng.json.demo.domain.SaveRecommendsRequest bean)
        {return bean == null ? "null" : bean.toString();}
      }
      

      