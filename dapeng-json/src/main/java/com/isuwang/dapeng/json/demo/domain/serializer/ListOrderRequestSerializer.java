 package com.isuwang.dapeng.json.demo.domain.serializer;
        import com.isuwang.dapeng.json.demo.domain.serializer.*;

        import com.isuwang.dapeng.core.*;
        import com.isuwang.org.apache.thrift.*;
        import com.isuwang.org.apache.thrift.protocol.*;

        import java.util.Optional;
        import java.util.concurrent.CompletableFuture;
        import java.util.concurrent.Future;

        /**
        * Autogenerated by Dapeng-Code-Generator (1.2.2)
        *
        * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
        *  @generated
        **/
        public class ListOrderRequestSerializer implements BeanSerializer<com.isuwang.dapeng.json.demo.domain.ListOrderRequest>{
        
      @Override
      public com.isuwang.dapeng.json.demo.domain.ListOrderRequest read(TProtocol iprot) throws TException{

      com.isuwang.dapeng.json.demo.domain.ListOrderRequest bean = new com.isuwang.dapeng.json.demo.domain.ListOrderRequest();
      com.isuwang.org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();

      while(true){
        schemeField = iprot.readFieldBegin();
        if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP){ break;}

        switch(schemeField.id){
          
              case 1:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STRUCT){
              com.isuwang.dapeng.json.demo.domain.PageRequest elem0 = new com.isuwang.dapeng.json.demo.domain.PageRequest();
        elem0=new com.isuwang.dapeng.json.demo.domain.serializer.PageRequestSerializer().read(iprot);
       bean.setPageRequest(Optional.of(elem0));
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 2:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.LIST){
               com.isuwang.org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
        java.util.List<com.isuwang.dapeng.json.demo.enums.TOrderStatus> elem0 = new java.util.ArrayList<>(_list0.size);
        for(int _i0 = 0; _i0 < _list0.size; ++ _i0){
          com.isuwang.dapeng.json.demo.enums.TOrderStatus elem1 = com.isuwang.dapeng.json.demo.enums.TOrderStatus.findByValue(iprot.readI32());
          elem0.add(elem1);
        }
        iprot.readListEnd();
       bean.setStatuses(elem0);
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 3:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.I32){
               int elem0 = iprot.readI32();
       bean.setPatientId(Optional.of(elem0));
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 4:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.I32){
               int elem0 = iprot.readI32();
       bean.setDoctorId(Optional.of(elem0));
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 5:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.LIST){
               com.isuwang.org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
        java.util.List<Integer> elem0 = new java.util.ArrayList<>(_list0.size);
        for(int _i0 = 0; _i0 < _list0.size; ++ _i0){
           int elem1 = iprot.readI32();
          elem0.add(elem1);
        }
        iprot.readListEnd();
       bean.setDoctorIdList(elem0);
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 6:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.I64){
              long elem0 = iprot.readI64();
       bean.setBeginTime(Optional.of(elem0));
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 7:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.I64){
              long elem0 = iprot.readI64();
       bean.setEndTime(Optional.of(elem0));
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 8:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.BOOL){
              boolean elem0 = iprot.readBool();
       bean.setExitDiagnose(Optional.of(elem0));
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 9:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.I32){
              com.isuwang.dapeng.json.demo.enums.TOrderPayType elem0 = com.isuwang.dapeng.json.demo.enums.TOrderPayType.findByValue(iprot.readI32());
       bean.setPayType(Optional.of(elem0));
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 10:
              if(schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.I32){
              com.isuwang.dapeng.json.demo.enums.AppointmentType elem0 = com.isuwang.dapeng.json.demo.enums.AppointmentType.findByValue(iprot.readI32());
       bean.setAppointmentType(Optional.of(elem0));
            }else{
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
          
            default:
            com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate(bean);
      return bean;
    }
    
      @Override
      public void write(com.isuwang.dapeng.json.demo.domain.ListOrderRequest bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("ListOrderRequest"));

      if(bean.getPageRequest().isPresent()){
              oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("pageRequest", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, (short) 1));
              com.isuwang.dapeng.json.demo.domain.PageRequest elem0 = bean.getPageRequest().get();
               new com.isuwang.dapeng.json.demo.domain.serializer.PageRequestSerializer().write(elem0, oprot);
              
            }
            
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("statuses", com.isuwang.org.apache.thrift.protocol.TType.LIST, (short) 2));
            java.util.List<com.isuwang.dapeng.json.demo.enums.TOrderStatus> elem1 = bean.getStatuses();
            
          oprot.writeListBegin(new com.isuwang.org.apache.thrift.protocol.TList(com.isuwang.org.apache.thrift.protocol.TType.I32, elem1.size()));
          for(com.isuwang.dapeng.json.demo.enums.TOrderStatus elem2 : elem1){
          oprot.writeI32(elem2.getValue());
        }
          oprot.writeListEnd();
        
            
            oprot.writeFieldEnd();
          if(bean.getPatientId().isPresent()){
              oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("patientId", com.isuwang.org.apache.thrift.protocol.TType.I32, (short) 3));
              Integer elem2 = bean.getPatientId().get();
              oprot.writeI32(elem2);
              
            }
            if(bean.getDoctorId().isPresent()){
              oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("doctorId", com.isuwang.org.apache.thrift.protocol.TType.I32, (short) 4));
              Integer elem3 = bean.getDoctorId().get();
              oprot.writeI32(elem3);
              
            }
            
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("doctorIdList", com.isuwang.org.apache.thrift.protocol.TType.LIST, (short) 5));
            java.util.List<Integer> elem4 = bean.getDoctorIdList();
            
          oprot.writeListBegin(new com.isuwang.org.apache.thrift.protocol.TList(com.isuwang.org.apache.thrift.protocol.TType.I32, elem4.size()));
          for(Integer elem5 : elem4){
          oprot.writeI32(elem5);
        }
          oprot.writeListEnd();
        
            
            oprot.writeFieldEnd();
          if(bean.getBeginTime().isPresent()){
              oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("beginTime", com.isuwang.org.apache.thrift.protocol.TType.I64, (short) 6));
              Long elem5 = bean.getBeginTime().get();
              oprot.writeI64(elem5);
              
            }
            if(bean.getEndTime().isPresent()){
              oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("endTime", com.isuwang.org.apache.thrift.protocol.TType.I64, (short) 7));
              Long elem6 = bean.getEndTime().get();
              oprot.writeI64(elem6);
              
            }
            if(bean.getExitDiagnose().isPresent()){
              oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("exitDiagnose", com.isuwang.org.apache.thrift.protocol.TType.BOOL, (short) 8));
              Boolean elem7 = bean.getExitDiagnose().get();
              oprot.writeBool(elem7);
              
            }
            if(bean.getPayType().isPresent()){
              oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("payType", com.isuwang.org.apache.thrift.protocol.TType.I32, (short) 9));
              com.isuwang.dapeng.json.demo.enums.TOrderPayType elem8 = bean.getPayType().get();
              oprot.writeI32(elem8.getValue());
              
            }
            if(bean.getAppointmentType().isPresent()){
              oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("appointmentType", com.isuwang.org.apache.thrift.protocol.TType.I32, (short) 10));
              com.isuwang.dapeng.json.demo.enums.AppointmentType elem9 = bean.getAppointmentType().get();
              oprot.writeI32(elem9.getValue());
              
            }
            
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(com.isuwang.dapeng.json.demo.domain.ListOrderRequest bean) throws TException{
      
                if(bean.getPageRequest().isPresent())
                new com.isuwang.dapeng.json.demo.domain.serializer.PageRequestSerializer().validate(bean.getPageRequest().get());
              
              if(bean.getStatuses() == null)
              throw new SoaException(SoaBaseCode.NotNull, "statuses字段不允许为空");
            
              if(bean.getDoctorIdList() == null)
              throw new SoaException(SoaBaseCode.NotNull, "doctorIdList字段不允许为空");
            
    }
    
        @Override
        public String toString(com.isuwang.dapeng.json.demo.domain.ListOrderRequest bean)
        {return bean == null ? "null" : bean.toString();}
      }
      

      