package com.isuwang.soa.scala

import java.lang.Object

import com.isuwang.dapeng.core._
import com.isuwang.org.apache.thrift._
import java.util.ServiceLoader
import java.util.concurrent.CompletableFuture

import com.isuwang.soa.scala.CalculateServiceAsyncCodec._
import com.isuwang.soa.scala.service.CalculateServiceAsync;

        /**
         * Autogenerated by Dapeng-Code-Generator (1.2.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated

        **/
        class CalculateServiceAsyncClient extends CalculateServiceAsync {

        import java.util.function.{ Function ⇒ JFunction, Predicate ⇒ JPredicate, BiPredicate }
        implicit def toJavaFunction[A, B](f: Function1[A, B]) = new JFunction[A, B] {
          override def apply(a: A): B = f(a)
        }

        val serviceName = "com.isuwang.soa.scala.service.CalculateService"
        val version = "1.0.0"
        val pool = {
          val serviceLoader = ServiceLoader.load(classOf[SoaConnectionPoolFactory])
          if (serviceLoader.iterator().hasNext) {
            val poolImpl = serviceLoader.iterator().next().getPool
            poolImpl.registerClientInfo(serviceName,version)
            poolImpl
          } else null
        }

        def getServiceMetadata: String = {
          pool.send(
          serviceName,
          version,
          "getServiceMetadata",
          new getServiceMetadata_args,
          new GetServiceMetadata_argsSerializer,
          new GetServiceMetadata_resultSerializer
          ).success
        }


        

            /**
            * 
            **/
            def calcualteWordCount(filename:String ,word:String 
            , timeout: Long = 5000) : Int = {

            val response = pool.sendAsync(
            serviceName,
            version,
            "calcualteWordCount",
            calcualteWordCount_args(filename,word),
            new CalcualteWordCount_argsSerializer(),
            new CalcualteWordCount_resultSerializer()
            ,timeout).asInstanceOf[CompletableFuture[calcualteWordCount_result]]

            response.thenApply(_.success).get

          }

          

            /**
            * 
            **/
            def calcualteWordsCount(fileName:String 
            , timeout: Long = 5000) : Map[String, Int] = {

            val response = pool.sendAsync(
            serviceName,
            version,
            "calcualteWordsCount",
            calcualteWordsCount_args(fileName),
            new CalcualteWordsCount_argsSerializer(),
            new CalcualteWordsCount_resultSerializer()
            ,timeout).asInstanceOf[CompletableFuture[calcualteWordsCount_result]]

            response.thenApply(_.success).get

          }

          
      }
      